function pdestruct = SFcore_ImportData(varargin)
%>
%>  function SFcore_ImportData
%>
%>  This routine will import data from a pair of .txt / .ff2m file 
%>         (data generated by FreeFem solvers of the StabFem project)
%>
%>  Usage :
%>
%>  1/ pdestruct=SFcore_ImportData(file.ff2m )
%>      to import files in ff2m/txt format ; 
%>        (if files contain mesh-associated data the .ff2m must have a "meshfilename" field) 
%>
%>  2/ pdestruct = SCcore_ImportData(file,'metadataonly')
%>       will only import "metadata" from the header of the .ff2m, not the .txt file)
%>       (this 3rd mode is for internal usage by SF_Status) 
%> 
%>    3/ pdestruct=SFcore_ImportData(mesh,file.ff2m [,fileToRead2,..] )  LEGACY
%>       old method to import mesh-associated data by explicitly specifying the mesh.
%>   The .ff2m format is a text file with four lines of header describing
%>   the content (as explained below), possibly followed by numerical data
%>       
%>   Line 1 : (not used)
%>   Line 2 : string describing the content 
%>   Line 3 : list of string-valued keywords 
%>           ( field1 value1 field2 value2 ...  )
%>            EXPLAINING HOW TO IMPORT THE DATA FROM THE ASSOCIATED .txt FILE
%>   Line 4 (optional) : description of auxiliary numerical data 
%>           ( typedata1 namedata1 typedata2 namedata2  ...)
%>            THAT WILL BE IMPORTED FROM THE REMAINDER OF THE .ff2m file (not from the .txt file)
%>
%>   Two Storage modes are handled :
%>
%>   1/ For mesh-associated data, line 3 must contain two important keywords
%>   datastoragemode and datadescriptors which will explain how to import
%>   the associated .txt file.
%>       For instance if line 3 is 
%>        "datatype baseflow datastoragemode CxP2P2P1.1 datadescriptors ux,uy,p,Re"
%>       The interface will understand that the .txt file contains a
%>       vectorial data set with format [P2,P2,P1] corresponding to variables [ux,uy,p],
%>       plus an additional scalar called Re.
%>
%>   1b/ for mesh-associated data, the .ff2m may contain additional data 
%>   with mesh-associated structure (see bellow the recognized types)
%>       For instance if line 4 is "P1 vorticity real Fx real Fy" the interface will
%>       understand that the remainder of the .ff2m file will contain a P1
%>       data set corresponding to the vorticity and two real scalars
%>       corresponding to the lift and drag forces.
%>
%>   2/ For non-mesh associated data, line 3 must contain the keyword  "datastoragemode columns"
%>       and the "datadescriptors" which will now describe the columns in the asssiated .txt file
%>       For instance if line 3 is 
%>       "datatype DNSstats datastoragemode columns datadescriptors t,dt,Fx,Fy"
%>       The interface will understand that the .txt file contains data
%>       organized in columns which will be imported as vectors t, dt, Fx, Fy
%>
%>  (2/ for some "legacy cases" an alternate method to import non mesh-associated 
%>   data directly from the remainder of the .ff2m is still available but this 
%>   second method is not recommended any more and to be disabled soon ) 
%>
%>   RECOGNIZED DATA TYPES (for auxiliary data)  
%>
%>      typedata may be of the following types :
%>           - real -> one real scalar
%>           - complex -> complex number read as two reals
%>           - P1 -> P1 field (compatible with the mesh)
%>           - P1c -> P1 complex field
%>           - P2, P2c -> P2 field (*)
%>           - P1surf, P1surfc -> surface field (**) 
%>           - real.N, complex.N -> vectorial data with specified size
%> 
%> Notes : 
%> (*) 
%>   P2 data requires that the mesh object contains connectivity data 
%>   read from a file mesh_connectivity.ff2m, normally created by a macro
%>   SFWrite_Connectivity
%> (**) 
%>   P1surf data requires that the mesh object contains surface data 
%>   read from a file mesh_surface.ff2m, normally created by a macro 
%>   SFWrite_Surface
%> (****)
%>   Complex data are read as two numbers with brackets (re,im) in .txt files
%>    and as two real numbers separated by a line break in .ff2m files
%>
%> FUTURE EVOLUTIONS :
%> 1/ remove the multiple file option (not useful anymore)
%> 2/ Modify the interface :  SFcore_ImportData(file,'mesh',ffmesh,'readmode','metadataonly')
%>   instead of SFcore_ImportData(ffmesh,file,'metadataonly') 
%>                         
%>
%>This function is part of the StabFem project distributed under gnu licence
%>
%>History : this function was previously called importFFdata.m
%>          (redesigned in feb. 2019)


%try

fIDs = fopen('all');
if length(fIDs)>2
    SF_core_log('w',' In entering SFcore_ImportData : too many open files were detected ')
    SF_core_log('w',' It seems a "fclose" was missing somewhere !')
    fids = fopen('all')
    filenames = arrayfun(@fopen, fids, 'UniformOutput', 0)
    filenames(1)
    SF_core_log('w',' To suppress this message please type "fclose(''all'')"')
end
if length(fIDs)>10
    fclose('all')
    error('Stop here');
end

ffdatadir = SF_core_getopt('ffdatadir');

SF_core_log('dd', '  ENTERING FUNCTION  SFcore_ImportData.m ');

%% trick to pick the option from the last argument
if ischar(varargin{end})&&strcmp(varargin{end},'metadataonly')
    narginF = nargin-1;
    isimportaux = 0;
    isimporttxt = 0;
    isimportmesh = 0;
elseif ischar(varargin{end})&&strcmp(varargin{end},'metadataandtxt')
    narginF = nargin-1;
    isimportaux = 0;
    isimporttxt = 1;
    isimportmesh = 1; % ?????
else
    narginF = nargin;
    isimportaux = 1;
    isimporttxt = 1;
    isimportmesh = 1;
end
iter = 1;%trick if iter is not in the metadata 

%%
if (ischar(varargin{1}) == 0)
    % LEGACY : ALL THIS IS TO BE REMOVED SOON
    % if first argument is a mesh structure, take dimension np from it
    SF_core_log('l',[' When reading : ', varargin{2}, ' : Please don''t use SFcore_ImportData with a mesh object any more']);
    mesh = varargin{1};
    istart = 2;
    np = mesh.np;nt = mesh.nt;
    if isimporttxt
        pdestruct.mesh = mesh;
    end
    if (isfield(mesh, 'np2')) 
        np2 = mesh.np2;
    else
        np2 = 0;
    end
    
    if (isfield(mesh, 'nsurf')) 
        nsurf = mesh.nsurf;
    else
        nsurf = 0;
    end
else % END OF LEGACY PART
    
    % if all arguments are file names, only real,int,complex data are expected
    istart = 1;
    np = 0;
    %nsurf = 0;
    np2 = 0;
    mesh = [];
    %    nsurfFOU=0;
end

pdestruct.mesh = mesh;



%%
for ifile = istart:narginF % loop if several files are to be imported
    SF_core_log('dd',['SFcore_ImportData : Reading file ',varargin{ifile}]);
    fileToRead = varargin{ifile} ;  
    if (length(ffdatadir)>2)&&~contains(fileToRead,ffdatadir(3:end-1))
        fileToRead = [SF_core_getopt('ffdatadir') fileToRead];
    end
    if ~(exist(fileToRead,'file'))
%    if (exist([ffdatadir, fileToRead],'file') == 2)
%        fileToRead = [ffdatadir, fileToRead]
%    else
        SF_core_log('w',['Error in importFFdata : file ', fileToRead, ' does not exist !!']);
        
%    end
    end
    [dir,file,suffix] = fileparts(fileToRead);
    if strcmp(suffix,'.ff2m')
      suffix = '.txt';
    end
    if(isempty(dir))
        pdestruct.filename = [file suffix];
        fileToRead = [file '.ff2m'];
    else
        pdestruct.filename = [dir '/' file suffix];
        fileToRead = [dir '/' file '.ff2m'];
    end
    SF_core_log('dd', ['      Function SFcore_ImportData : reading file ', fileToRead]);
    
    if exist(fileToRead,'file')
    fid1 = fopen(fileToRead);
    [~] = fgetl(fid1); % first line is ignored
% reads lines 2-3-4 of the file
    Datadescription = fgetl(fid1);
    keawords = fgetl(fid1);
    auxdatadescription = fgetl(fid1);
% read the numerical ?data (if line 4 is not blank : -> reported to the sequel of thie function, after determining the size)
    if(ischar(auxdatadescription)&&~isempty(auxdatadescription))
%        data = fscanf(fid1,'%f');
    else
%        data = [];
        auxdatadescription = ' ';
    end
%    fclose(fid1); % it has to be reopened after
    
% interprets lines 2-3-4 of the file    
    % line 2 : description
    pdestruct.DataDescription = Datadescription;

    % line 3 : keywords
    words = textscan(keawords, '%s');
    numkeywords = length(words{1});
    if(numkeywords>1) % hack for cases where the line is blank
      K1 = words{1}{1};
      if sum(strcmpi(K1, {'format','format:'}))
        SF_core_log('l', ['Warning : third line of  file  "',fileToRead,'"  looks obsolete !']);
        SF_core_log('l', 'please modify you macro (usually in Macro_StabFem.edp) to fit to new format (see manual)');
        SF_core_log('l',' you may replace by something like (for a baseflow) ''file << "datatype BaseFlow datastoragemode ReP2P2P1.1 datadescriptors ux,uy,p,Re" << endl'' ;');
        SF_core_log('l','                                   (for a eigenmode) ''file << "datatype Eigenmode datastoragemode CxP2P2P1.1 datadescriptors ux,uy,p,lambda " << endl'' ;');
        SF_core_log('l','                                   (for a mesh) ''file << "datatype mesh meshtype 2D " << endl;'' ;');
        pdestruct.datatype = Datadescription;
      elseif mod(numkeywords, 2)
        error('Error in SFcore_ImportData : number of words at third line of file should be an even number')
      else
            for ii = 1:2:numkeywords - 1
                keywordname = words{1}{ii};
                keywordvalue = words{1}{ii + 1};
                pdestruct.(keywordname) = keywordvalue;
                SF_core_log('dd', ['      Function importFFdata : setting keyword ''', keywordname, ' '' =  ''', keywordvalue, '''']);               
            end
            if  (~isfield(pdestruct,'datastoragemode')||~isfield(pdestruct,'datadescriptors'))&&(~isfield(pdestruct,'problemtype')&&~isfield(pdestruct,'meshtype'))
             if ~(isfield(pdestruct,'datatype')&&strcmp(pdestruct.datatype,'connectivitydata'))
              SF_core_log('l', ['Warning : third line of  file  "',fileToRead,'"  looks obsolete !']);
              SF_core_log('l', 'please modify you macro (usually in Macro_StabFem.edp) to fit to new format (see manual)');
              SF_core_log('l',' you may replace by something like (for a baseflow) ''file << "datatype BaseFlow datastoragemode ReP2P2P1.1 datadescriptors ux,uy,p,Re" << endl'' ;');
              SF_core_log('l','                                   (for a eigenmode) ''file << "datatype Eigenmode datastoragemode CxP2P2P1.1 datadescriptors ux,uy,p,lambda " << endl'' ;');
              SF_core_log('l','                                   (for a mesh) ''file << "datatype mesh meshtype 2D " << endl;'' ;');
             end 
            end
            if ~isfield(pdestruct,'datastoragemode')
                pdestruct.datastoragemode = 'unknown';
            end
      end

       if isfield(pdestruct,'meshfilename')&&isempty(mesh)&&isimportmesh
            SF_core_log('dd','Importing mesh according to meshfilename (new method)');
            mesh = SFcore_ImportMesh(pdestruct.meshfilename);
            istart = 2;
            np = mesh.np;
            pdestruct.mesh = mesh;
            if (isfield(mesh, 'np2')) 
                np2 = mesh.np2;
            else
                np2 = 0;
            end
            if (isfield(mesh, 'nsurf')) 
                nsurf = mesh.nsurf;
            else
                nsurf = 0;
            end
       elseif (exist([fileparts(fileToRead),'/.meshfilename'])&&~strcmp(SF_core_getopt('ffdatadir'),'./')&&~isempty(SF_core_getopt('ffdatadir')))&&isimportmesh
            fid = fopen([fileparts(fileToRead),'/.meshfilename']);
            meshfilename = fscanf(fid,'%s');
            fclose(fid);
            mesh = SFcore_ImportMesh(meshfilename);
            istart = 2;
            np = mesh.np;
            pdestruct.mesh = mesh;     
          SF_core_log('dd', 'Using meshfilename as specified in file ".meshfilename"');  
       else
           SF_core_log('dd','No meshfilename was specified : we expect that this file does not contain mesh-associated data');
       end
      
      
    % line 4 : descfiption of auxiliary data
    description = textscan(auxdatadescription, '%s');
    numfieldsaux = length(description{1}) / 2;
    if(mod(numfieldsaux,1)~=0)
        SF_core_log('w',['problem in SFcore_ImportData : wrong number of words at line 4 of header of file ',fileToRead,' ; skipping reading this']);
        numfieldsaux = 0;
    end
    end

%     
%     

    %%
    % IMPORTATION OF AUXILIARY DATA
    %
    %determines the kind of numerical data to be read in the file,
    % and checks if the number of numerical data is consistent
    
    
    indexdata = 1;
    Ndata = 0;
    ismetadata = false;
    for ifield = 1:numfieldsaux
        typefield = description{1}{2 * ifield - 1};
        namefield = description{1}{2 * ifield};
        toto = strsplit(typefield,'.');
        typefield = toto{1};
        if(length(toto)==1)
            sizefield(ifield) = 1;
        else
            sizefield(ifield) = str2double(toto{2});
        end
        switch (typefield)
            case ('real')
                Ndata = Ndata + sizefield(ifield);
            case ('real*')
                Ndata = Ndata + sizefield(ifield);
                ismetadata = true;
            case ('int')
                Ndata = Ndata + sizefield(ifield);
            case ('int*')
                Ndata = Ndata + sizefield(ifield);
                ismetadata = true;
            case ('complex')
                Ndata = Ndata + 2 * sizefield(ifield);
            case ('complex*')
                Ndata = Ndata + 2 * sizefield(ifield);
                ismetadata =true;
            case ('P1')
                if isimporttxt
                    Ndata = Ndata + np;
                end
            case ('P1c')
                if isimporttxt
                    Ndata = Ndata + 2 * np;
                end
             case ('P1dc')
                if isimporttxt
                    Ndata = Ndata + 3 * nt;
                end
             case ('P1dcc')
                if isimporttxt
                    Ndata = Ndata + 6 * nt;
                end     
            case ('P2')
                if isimporttxt
                    Ndata = Ndata + np2;
                end
            case ('P2c')
                if isimporttxt
                    Ndata = Ndata + 2 * np2;
                end
            case ('P0')
                if isimporttxt
                    Ndata = Ndata + nt;
                end
            case ('P0c')
                if isimporttxt
                    Ndata = Ndata + 2 * nt;
                end    
            case ('P1surf')
                if isimporttxt
                    Ndata = Ndata + nsurf;
                end
            case ('P1surfc')
                if isimporttxt
                    Ndata = Ndata + 2 * nsurf;
                end
            otherwise
                error(['### Error in importFFdata : data type ' num2str(typefield) ' not recognized !']);
        end    
    end
    if ~ismetadata
        SF_core_log('dd', [ 'In importing data from file ',fileToRead, ' : no metadata were found']);
        SF_core_log('dd',  'We recommend that you update your export macros to have at least one metadata field (e.g. real*)');
    end
    % read the numerical ?data (if line 4 is not blank)
    if(ischar(auxdatadescription)&&~isempty(auxdatadescription))
        if(isimporttxt)
           data = fscanf(fid1,'%f');
        else
           data = fscanf(fid1,'%f',Ndata);
        end
    else
        data = [];
    end
    fclose(fid1);
    
    SF_core_log('d',['### WARNING data number ; expecting ', num2str(Ndata), ' reading ', num2str(length(data))]);
    if (istart == 2 && Ndata ~= length(data) && isimportaux)
         SF_core_log('w',['### WARNING in importFFdata : wrong data number ; expecting ', num2str(Ndata), ' reading ', num2str(length(data)), ...
            '  (Mesh may be incompatible)']);
         SF_core_log('w',['### When reading  data file : ',fileToRead]);
         SF_core_log('w',['### Associated to mesh file : ',mesh.filename]);
         iter=0; % to reassign to iter at end
         if  length(data)<Ndata 
             data = [data; zeros(Ndata-length(data)+1,1)];
             SF_core_log('w',' => completes by zeros and proceeds to reading fields but results may be incorrect');
         else
             SF_core_log('w',' => Proceeds to reading fields but results may be incorrect');

         end
    end
    
 %%   
 isbreak = 0;   
    for ifield = 1:numfieldsaux
        typefield = description{1}{2 * ifield - 1};
        [~, typefield, ~] = fileparts(typefield); % remplacer par strsplit
        namefield = description{1}{2 * ifield};
        if ~isimportaux
          % metadata only mode : return after reading metadata
          switch (typefield)
            case({'real*','int*','complex*'})
               SF_core_log('dd','metadata detected')
            otherwise
              SF_core_log('dd','end of metadata detection')
              isbreak=1;
          end
        end
        if isbreak
            break
        end
        switch (typefield)
            case ('real')
                value = data(indexdata:indexdata+sizefield(ifield)-1);
                indexdata = indexdata + sizefield(ifield);
                pdestruct.(namefield)= value;
                if sizefield(ifield)>0
                  SF_core_log('dd', ['      Function importFFdata : reading real(', num2str(sizefield(ifield)), ') field : ', namefield, ' = ', num2str(value(1))]);
                end
            case ('real*')
                value = data(indexdata:indexdata+sizefield(ifield)-1);
                indexdata = indexdata + sizefield(ifield);
                pdestruct.(namefield)= value;
                pdestruct.INDEXING.(namefield)= value;
                if sizefield(ifield)>0
                  SF_core_log('dd', ['      Function importFFdata : reading  real(', num2str(sizefield(ifield)), ') METADATA field : ', namefield, ' = ', num2str(value(1))]);
                end
            case ('int')
                SF_core_log('dd', ['      Function importFFdata : reading field : ', namefield]);
                value = data(indexdata:indexdata+sizefield(ifield)-1);
                indexdata = indexdata + sizefield(ifield);
                pdestruct.(namefield)= value;
                SF_core_log('dd', ['      Function importFFdata : reading int(', num2str(sizefield(ifield)), ') field : ', namefield, ' = ', num2str(value(1))]);
            case ('int*')
                value = data(indexdata:indexdata+sizefield(ifield)-1);
                indexdata = indexdata + sizefield(ifield);
                pdestruct.(namefield)= value;
                 pdestruct.INDEXING.(namefield)= value;
                SF_core_log('dd', ['      Function importFFdata : reading int(', num2str(sizefield(ifield)), ') METADATA field : ', namefield, ' = ', num2str(value(1))]);
            case ('complex')
                valueR = data(indexdata:2:indexdata+2*sizefield(ifield)-2);
                valueI = data(indexdata+1:2:indexdata+2*sizefield(ifield)-1);
                indexdata = indexdata + 2 * sizefield(ifield);
                pdestruct.(namefield)= valueR+1i*valueI;
                SF_core_log('dd', ['      Function importFFdata : reading complex(', num2str(sizefield(ifield)), ') field : ', namefield, ' = ', num2str(valueR(1)+1i*valueI(1))]);
            case ('complex*')
                valueR = data(indexdata:2:indexdata+2*sizefield(ifield)-2);
                valueI = data(indexdata+1:2:indexdata+2*sizefield(ifield)-1);
                indexdata = indexdata + 2 * sizefield(ifield);
                pdestruct.(namefield)= valueR+1i*valueI;
                pdestruct.INDEXING.(namefield)= valueR+1i*valueI;
                SF_core_log('dd', ['      Function importFFdata : reading complex(', num2str(sizefield(ifield)), ') METADATA field : ', namefield, ' = ', num2str(valueR(1)+1i*valueI(1))]);
            case ('P1')
                value = data(indexdata:indexdata+np-1);
                indexdata = indexdata + np;
                pdestruct.(namefield)= value;
                SF_core_log('dd', ['      Function importFFdata : reading P1 field : ', namefield, ' (dimension = ', num2str(np), ' )']);
            case ('P1c')
                value = data(indexdata:indexdata+2*np-1);
                valueC = value(1:2:end-1) + 1i * value(2:2:end);
                indexdata = indexdata + 2 * np;
                pdestruct.(namefield)= valueC;
                SF_core_log('dd', ['      Function importFFdata : reading P1c field : ', namefield, ' (dimension = ', num2str(np), ' )']);
           case ('P1dc')
                value = data(indexdata:indexdata+3*nt-1);
                indexdata = indexdata + 3*nt;
                pdestruct.(namefield)= value;
                SF_core_log('dd', ['      Function importFFdata : reading P1dc field : ', namefield, ' (dimension = ', num2str(np), ' )']);    
            case ('P1dcc')
                value = data(indexdata:indexdata+6*nt-1);
                valueC = value(1:2:end-1) + 1i * value(2:2:end);
                indexdata = indexdata + 6*nt;
                pdestruct.(namefield)= valueC;
                SF_core_log('dd', ['      Function importFFdata : reading P1dcc field : ', namefield, ' (dimension = ', num2str(np), ' )']);         
           case ('P2')
                value = data(indexdata:indexdata+np2-1);
                indexdata = indexdata + np2;
                pdestruct.(namefield)= value;
                SF_core_log('dd', ['      Function importFFdata : reading P2 field : ', namefield, ' (dimension = ', num2str(np2), ' )']);
            case ('P2c')
                value = data(indexdata:indexdata+2*np2-1);
                valueC = value(1:2:end-1) + 1i * value(2:2:end);
                indexdata = indexdata + 2 * np2;
                pdestruct.(namefield)= valueC;
                SF_core_log('dd', ['      Function importFFdata : reading P2c field : ', namefield, ' (dimension = ', num2str(np2), ' )']);
            case ('P0')
                value = data(indexdata:indexdata+nt-1);
                indexdata = indexdata + nt;
                pdestruct.(namefield)= value;
                SF_core_log('dd', ['      Function importFFdata : reading P0 field : ', namefield, ' (dimension = ', num2str(np), ' )']);
            case ('P1surf')
                if (istart == 2 && isfield(mesh, 'nsurf') == 1)
                    nsurf = mesh.nsurf;
                elseif (istart == 1 && isfield(pdestruct, 'nsurf') == 1)
                    nsurf = pdestruct.nsurf;
                else  
                    SF_core_log('w','ERROR in importFFdata : trying to import P1surf field but nsurf is not defined !')
                    SF_core_log('w',['while reading file ',  fileToRead]);%, ' assocciated to mesh ',mesh.filename ])
                    SF_core_log('e','Stop here');
                end
                if (indexdata+nsurf-1>length(data))
                    SF_core_log('e',['while reading file ',  fileToRead, ' : incorrect data number']); 
                end
                    
                value = data(indexdata:indexdata+nsurf-1);
                indexdata = indexdata + nsurf;
                pdestruct.(namefield)= value;
                SF_core_log('dd', ['      Function importFFdata : reading P1surf field : ', namefield, ' (dimension = ', num2str(nsurf), ' )']);            
            case ('P1surfc')
                if (istart == 2 && isfield(mesh, 'nsurf') == 1)
                    nsurf = mesh.nsurf;
                elseif (istart == 1 && isfield(pdestruct, 'nsurf') == 1)
                    nsurf = pdestruct.nsurf;
                else
                    SF_core_log('w','ERROR in importFFdata : trying to import P1surf field but nsurf is not defined !')
                    SF_core_log('w',['while reading file ',  fileToRead]);%, ' assocciated to mesh ',mesh.filename ])
                    SF_core_log('e','Stop here');
                end
                value = data(indexdata:indexdata+2*nsurf-1);
                valueC = value(1:2:end-1) + 1i * value(2:2:end);
                indexdata = indexdata + 2 * nsurf;
                pdestruct.(namefield)= valueC;
                SF_core_log('dd', ['      Function importFFdata : reading P1surfC field : ', namefield, ' (dimension = ', num2str(nsurf), ' )']);
        end
    end
    end
end
  if iter==0&&isfield(pdestruct,'iter')
      pdestruct.iter = 0; % most likely this is a projected and not recomputyed baseflow
      SF_core_log('w','Iter field assigned to 0');
  end
%%
%
% IMPORTATION FROM THE .txt file
%
    if isimporttxt
%        pdestruct.filename(end-2:end)= 'txt';
        if isfield(pdestruct,'datastoragemode')&&contains(pdestruct.datastoragemode,';')
            pdestruct = SFcore_ImportData_txt_DEV(pdestruct);  % new method still in development
        else
            pdestruct = SFcore_ImportData_txt(pdestruct);  % old method
        end
        pdestruct.status = 'loaded';
    else
        if isfield(pdestruct,'datadescriptors')
            namefields = strsplit(pdestruct.datadescriptors,{',',';'});
            for name = namefields
                pdestruct.(name{1}) = [];
            end
        pdestruct.status = 'unloaded';    
        end 
    end

%catch
%        SF_core_log('w',['Problem in SFcore_ImportData.m : when reading file ',fileToRead]);
%end
    
SF_core_log('dd','Leaving SFcore_ImportData.m');    
end


