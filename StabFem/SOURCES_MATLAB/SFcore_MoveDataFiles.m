function finalname = SFcore_MoveDataFiles(filename,destination,mode)
%>
%> function [] = SFcore_MoveDataFiles(filename,nexfilename)
%>
%>  The role of this function is to displace data files generated by the 
%>  FreeFem solvers (.txt/.ff2m or .msh/.ff2m files, plus possibly auxiliary files) 
%>  into "storage" directories.
%> 
%> Usage : 
%>
%>  1/ (recommended mode for storage) 
%>  newname = SFcore_MoveDataFiles('oldname.txt','DIRECTORY'])  
%>  in this way the file will be copied under a generic name with form 
%>       'DIRECTORY/FFDATA_(#n).txt' where (#n) is an incremental index. 
%>  (for meshes the name will be MESHES/FFMESH_(#n).txt')   
%>
%>  1b/ 
%>  newname = SFcore_MoveDataFiles('oldname.txt','DIRECTORY'],['cp'|'mv'|'app']) 
%>       to specify if you want to keep the files in their initial location ('cp') or not ('mv')
%>       default mode is 'mv' (but returns to 'cp' in debugging mode, e.g. SF_core_getopt('verbosity')>5)
%>       mode 'app' means append to the existing file (only for the .txt file)
%>
%>  2/ (legacy mode)
%>   newname = SFcore_MoveDataFiles('oldname.txt','DIRECTORY/newname.txt') 
%>   This on is basically equivalent to 
%>       'cp ffdatadir/oldname.txt ffdatadir/DIRECTORY/newname.txt' (same for .ff2m and aux files)
%>
%>   In both cases the return value 'newname' will be the actual new name of
%>   the main file, to be used subsequently with SFcore_ImportData (or SFcore_ImportMesh)
%>
%> Notes : 
%> 1/ the files and DIRECTORIES are expected to be in ffdatadir or subdirectories
%> 2/ Auxiliary files with name 
%>     'oldname_something.txt', 'oldname_something.ff2m'  are also copied 
%> 3/ if ffdatadir = './' file displacements are disabled
%> 4/ copy in subdirectories is affected by the global variable SF_core_getopt('storagemode') as follows :
%>          0 : no storage of data files (everything is kept in base directory workdir, nothing is put in subfolders)
%>          1 : stores results but cleans everything each time the
%>              mesh is reconstructed (recommended for static free-surface problems)
%>          2 : stores everything, each time the mesh is
%>              reconstructed we clean everything but keep a copy of each new mesh in subdirectory MESHES 
%>              (default mode, recommended for cases where the mesh is only adapted at the start) 
%>          3 : stores and keeps everything (SF_BaseFlow is automatically in 'force' mode)     
%>
%> This function is part of the StabFem project distributed under gnu licence.
SF_core_log('d',[ ' Entering SFcore_MoveDataFiles : move ' filename ' to '  destination]);


ffdatadir = SF_core_getopt('ffdatadir');

if strcmp(destination,'STATS')
    SF_core_log('l',' Please do not write in folder "STATS"; this one is reserved !')
end

if strcmp(SF_core_getopt('ffdatadir'),'./')&&exist(destination,'dir')
    finalname = filename;
    SF_core_log('d',' in calling SFcore_MoveDataFiles : disabled because workdir is ''./'' ');
elseif SF_core_getopt('storagemode')<1
    finalname = filename;
    SF_core_log('d',' in calling SFcore_MoveDataFiles : disabled because storagemode < 1');
else

    
    

 
    
if(nargin==2) 
    if(SF_core_getopt('verbosity')<6)
        mode = 'mv'; 
    else
        mode = 'cp';
    end
end


% Normally the files are in the ffdatadir directory

[~, ~, suffix] = fileparts(filename);
if strcmp(suffix,'.txt')||strcmp(suffix,'.ff2m')
    genericname = 'FFDATA';
elseif strcmp(suffix,'.msh')
    genericname = 'FFMESH';
else
    SF_core_log('e','file type not rcognized');
end

%  If this is not specified we add it to be sure  

if ~startswith(filename,ffdatadir)&&~startswith(filename,['./',ffdatadir]) 
    filename = [SF_core_getopt('ffdatadir'), filename];
end

if ~startswith(destination,ffdatadir)&&~startswith(destination,['./',ffdatadir]) 
    truedestination = [SF_core_getopt('ffdatadir'), destination];
else
    truedestination = destination;
end


if strcmp(destination(end),'/')&&~exist(truedestination,'dir')
    SF_core_log('w',[' Folder ', truedestination, ' not found : creating it !']);
    SF_core_syscommand('mkdir',truedestination);
    fid = fopen([truedestination,'/.counter'],'w');
    fprintf(fid,'%i',0);
    fclose(fid);
end

if isempty(strfind(destination,'.'))&&~exist(truedestination,'dir')
    SF_core_log('w',[' Folder ', truedestination, ' not found : creating it !']);
    SF_core_syscommand('mkdir',truedestination);
end

if exist(truedestination,'dir')
    SF_core_log('d',[ ' SFcore_MoveDataFiles : move ' filename ' to DIRECTORY '  truedestination]);
    if exist([truedestination,'.counter'])
       fid = fopen([truedestination,'/.counter']);
       Nfiles = fscanf(fid,'%i');
       fclose(fid);
       SF_core_log('d','No counter found in this directory');
    else
        Nfiles = countfiles(truedestination,suffix);    
    end
    newfilename = [ truedestination, '/', genericname, '_', num2str(Nfiles+1,'%06.f'), '.ff2m'];
    fid = fopen([truedestination,'/.counter'],'w');
    fprintf(fid,'%i',Nfiles+1);
    fclose(fid);
    SF_core_log('d',['Counter in folder ',truedestination,' incremented to ',num2str(Nfiles+1)]);
else
    SF_core_log('d',[ ' using SFcore_MoveDataFiles : move ' filename ' to '  truedestination]);   
    newfilename = truedestination;
end

% 

[filepath, name, ~] = fileparts(filename);
if (isempty(filepath)) 
    filepath = '.'; 
end
name = [filepath, '/' name];
[newfilepath, newname, ~] = fileparts(newfilename);
if (isempty(newfilepath)) 
    filepath = '.'; 
end

newname = [newfilepath, '/' newname];


% copy main file


if (exist([ name, '.msh'],'file'))
    SF_core_log('d',['MoveDataFile : ',mode, '  ' filepath , '/', name, '.msh', ' to ' newname, '.msh'  ]);
    %mycp([ name, '.msh'],[newname, '.msh']);
    SF_core_syscommand(mode,[ name, '.msh'],[newname, '.msh']);
    finalname = [newname, '.msh'];
elseif (exist([  name, '.txt'],'file'))
    SF_core_log('d',['MoveDataFile : ',mode, '  ' filepath , '/', name, '.txt', ' to ' newname, '.txt'  ]);
    %mycp([ name, '.txt'],[ newname, '.txt']);
    if strcmp(mode,'app')
        disp('launching system command ');
        if ~ispc
            SF_core_system([' cat ',name, '.txt >> ', newname, '.txt']);
        else
            SF_core_system([' type ',strrep(name,'/','\'), '.txt >> ', strrep(newname,'/','\'), '.txt']);
        end
        mode = 'cp'; % for the .ff2m file treated below
    else
        SF_core_syscommand(mode,[ name, '.txt'],[ newname, '.txt']);
    end
    finalname = [newname, '.txt'];
else
    SF_core_log('w',[' In SFcore_MoveDataFiles : File '  name '.txt does not exit ! ']);
    finalname = [];    
    %newfilename = [ truedestination, '/', destination, '_', num2str(Nfiles+1), '.ff2m']
    %SF_core_syscommand(mode,[newname, '.ff2m'],[newname, '.txt']);  
 end
    


% copy auxiliary files

if (exist([  name, '.ff2m'],'file'))
    SF_core_log('d',['MoveDataFile : copying auxiliary file ', name, '.ff2m'])
    SF_core_syscommand(mode,[ name, '.ff2m'],[newname, '.ff2m']);
    if isempty(finalname)
        % if there is no .txt attached to it, we have to create one for
        % good operation of SF_Status
        finalname = [newname, '.ff2m'];
        SF_core_syscommand('cp',[newname, '.ff2m'],[newname, '.txt']);
        SF_core_log('d','Moving only .ff2m file and creating a fake .txt file');
    end
else
   SF_core_log('w',['MoveDataFile : DID NOT FIND auxiliary file ', name, '.ff2m']) 
end

suffixes = {'_connectivity.ff2m','_surface.ff2m','_line.ff2m','_line2.ff2m','_aux.msh','_mapping.ff2m','.btxt','.vtk','.vtu','.pvd'};
for suf = suffixes
    suf1 = suf{1};
    if(exist([ name,suf1],'file'))
       SF_core_log('d',['MoveDataFile : copying auxiliary file ',  name, suf1]);
       SF_core_syscommand(mode,[ name, suf1],[newname, suf1]);
    end
end

% 
% if(exist([ name,'_connectivity.ff2m'],'file'))
%     SF_core_log('d',['MoveDataFile : copying auxiliary file ',  name, '_connectivity.ff2m'])
%     SF_core_syscommand(mode,[ name, '_connectivity.ff2m'],[newname, '_connectivity.ff2m']);
% else
%    SF_core_log('d',['MoveDataFile : DID NOT FIND auxiliary file ',  name, '_connectivity.ff2m']) 
% end
% 
% if(exist([ name,'_surface.ff2m'],'file'))
%     SF_core_log('d',['MoveDataFile : copying auxiliary file ',  name, '_surface.ff2m'])
%     SF_core_syscommand(mode,[ name, '_surface.ff2m'],[newname, '_surface.ff2m']);
% end
% 
% if(exist([ name,'_line.ff2m'],'file'))
%     SF_core_log('d',['MoveDataFile : copying auxiliary file ',  name, '_line.ff2m'])
%     SF_core_syscommand(mode,[ name, '_line.ff2m'],[newname, '_line.ff2m']);
% end
% 
% if(exist([ name,'_line2.ff2m'],'file'))
%     SF_core_log('d',['MoveDataFile : copying auxiliary file ',  name, '_line2.ff2m'])
%     SF_core_syscommand(mode,[ name, '_line2.ff2m'],[newname, '_line2.ff2m']);
% end
% 
% if(exist([ name,'_mapping.ff2m'],'file'))
%     SF_core_log('d',['MoveDataFile : copying auxiliary file ',  name, '_mapping.ff2m'])
%     SF_core_syscommand(mode,[ name, '_mapping.ff2m'],[newname, '_mapping.ff2m']);
% end
% 
% if(exist([ name,'_aux.msh'],'file'))
%     SF_core_log('d',['MoveDataFile : copying auxiliary file ',  name, '_aux.msh'])
%     SF_core_syscommand(mode,[ name, '_aux.msh'],[newname, '_aux.msh']);
% end

SF_core_log('d',' Leaving SFcore_MoveDataFiles ');
end
end

function Nfiles = countfiles(directory,suffix)
  thedir = dir([directory,'/*',suffix]);
  Nfiles = length(thedir);
  if strcmp(suffix,'.msh')
    thedir = dir([directory,'/*_aux.msh']);
    Nfilesaux = length(thedir);
    Nfiles = Nfiles-Nfilesaux;
  end
end
  