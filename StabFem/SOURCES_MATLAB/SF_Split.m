function flowfield = SF_Split(varargin)
%
% This is part of StabFem Project, D. Fabre, July 2017 -- present
% Matlab driver for SplitMesh
% The mesh will be refined by splitting each triangles in 'nsplit' triangles
% (usually nsplit = 2 is enough).
% The base flow will be recomputed on the adapted mesh.
%
% Usage 1 : mesh=SF_Split(mesh [,'nsplit',nsplit] )
% if argument is a 'mesh' object, simple split.
%
% Usage 2 : baseflow = SF_Split(baseflow [,'nsplit',nsplit] )
% if argument is a 'baseflow' object, recompute on the new mesh.
%
% (To be done : generalisation of reinterpolation to multiple fields)
%
% This is part of the StabFem project, copyright D. Fabre, jkuly 2018.
%
% Cleaned up june 2020 
%
ffdatadir = SF_core_getopt('ffdatadir');

%oldmethod = true; % Using SplitMesh
oldmethod = false; % using tweaked Adapt 

flowfield = varargin{1};
vararginopt = {varargin{2:end}};


p = inputParser;
addParameter(p, 'nsplit', 2);
parse(p, vararginopt{:});


% position input files
switch (flowfield.datatype)
    case ('Mesh')
        SF_core_log('n', 'FUNCTION SF_Split : splitting mesh for single mesh');
        SFcore_MoveDataFiles(flowfield.filename, [ffdatadir, 'mesh.msh'],'cp');
        if oldmethod
            ffparams = [' ', num2str(p.Results.nsplit)];
        end
        ffparams = [ffparams, ' 0 '];
    case ({'BaseFlow','BaseFlowSurf'})
    SF_core_log('n', 'FUNCTION SF_Split : splitting mesh projecting base flow');
    SFcore_MoveDataFiles(flowfield.mesh.filename,'mesh.msh','cp');
    SFcore_MoveDataFiles(flowfield.filename, 'FlowFieldToAdapt1.txt','cp');
        [~,storagemode,nscalars] = fileparts(flowfield.datastoragemode); % this is to extract two parts of datastoragemode, e.g. P2P2P1.1
         if oldmethod
            ffparams = [' ', num2str(p.Results.nsplit)];
         else
             ffparams = ' ';
         end
        Ns = nscalars(2:end); 
        if isempty(nscalars)
            Ns = '0';  
        end
        ffparams = [ffparams, ' 1 ', storagemode, ' ' , Ns , ' '];
    otherwise
        error('ERROR IN FUNCTION SF_Split : data type not recognised');
end     

%%% Writing parameter file for Adapmesh (useless here but required)
writeParamFile4Split('Param_Adaptmesh.idp'); %% see function defined at bottom

% launch ff++ code
SF_core_log('n', '## Entering the FreeFem file for splitting the mesh');


if oldmethod
    ffsolver = 'SplitMesh.edp';
    status = SF_core_freefem(ffsolver,'parameters',ffparams);
    filename = 'mesh_split.msh';
else
     ffsolver = 'AdaptMesh.edp';
     status = SF_core_freefem(ffsolver,'parameters',ffparams,'arguments','-split 2');
     filename = 'mesh_adapt.msh';
end



% in case of failure
if (status ~= 0)
    SF_core_log('e',' ERROR in SF_Split : recomputing base flow failed')
end

% storing mesh file
meshfilename = SFcore_MoveDataFiles(filename,'MESHES');

% storing data file
SF_core_syscommand('cp',[SF_core_getopt('ffdatadir'),'FlowFieldToAdapt1.ff2m'],...
                           [SF_core_getopt('ffdatadir'),'FlowFieldAdapted1.ff2m']);

SFcore_AddMESHFilenameToFF2M('FlowFieldAdapted1.txt',meshfilename);
finalname = SFcore_MoveDataFiles('FlowFieldAdapted1.txt','MISC','cp');  
%NB here we copy the .ff2m file but the content may be false ! as a consequence only metadata should be imported    

%Importing datafile
flowfield = SFcore_ImportData(finalname,'metadataandtxt');
flowfield.iter = 0;

SF_core_log('w', 'Split mesh : the flow was projected but not recomputed ! Please run SF_BaseFlow once more');

end





function [] = writeParamFile4Split(filename)
fid = fopen(filename, 'w');
fprintf(fid, '// Parameters for adaptmesh (file generated by matlab driver)\n');
fprintf(fid, ['real Hmax = 1 ;\n']);
fprintf(fid, ['real Hmin = 0.01 ;\n']);
fprintf(fid, ['real Ratio = 1 ;\n']);
fprintf(fid, ['real error = 0.01 ;\n']);
fprintf(fid, ['real rr = 0.01 ;\n']);
fprintf(fid, ['int Nbvx = 10 ; \n']);        
fprintf(fid, ['real Thetamax = 10 ; \n']);
fprintf(fid, ['real anisomax = 10; \n']);
fprintf(fid, ['real nbjacoby = 10; \n']);
fprintf(fid, 'bool Splitpbedge= true; \n');
fprintf(fid, 'bool Splitin2 = true ; \n' );
fprintf(fid, 'bool Keepbackvertices = true ; \n');
fprintf(fid, 'real Verbosity    = 1; \n');
fprintf(fid, 'bool isofield = false ; \n');


fclose(fid);

 fidlog = fopen('.stabfem_log.bash','a');
        if (fidlog>0)
            fprintf(fidlog, ['#  Here a file  ', filename, ' has been created by driver SF_Adapt \n'] );
            fclose(fidlog);
        end

end