//
//  PROGRAM Harmonic_Balance_2D.edp
//	
//	Solves directly the Harmonic-Balance equations to decribe the limit cycle with two time-Fourier modes
//   
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	Re , omega_guess, sigma, typenormalization [,norm] 
//
//       the "sigma" parameter is the amplification rate in the SC model of Mantic-Lugo ; if zero it reduces to Harmonic-Balance	
//
//	INPUT FILES :
//		MeanFlow_guess.txt	
//      SelfConsistentMode_guess.txt 
// 		mesh.msh 			->  mesh in Freefem format
//  OUTPUT FILES :
//		MeanFlow.txt
//		MeanFlow.ff2m	
//      SelfConsistentMode.txt 
//      SelfConsistentMode.ff2m 
//
// 	ERROR MANAGEMENT : 
//      if Newton iteration diverges, SelfConsistentMode.txt is not generated and "iter" parameter in Eigenmode.ff2m is -1.
//
// Initial Version DF, avril 2018 ;  corrected by Diogo, may 2018 


//load "MUMPS_seq"

include "SF_Geom.edp";
include "Macros_StabFem.edp";


/////////////////////////////////////////////////////////////////////////////////


mesh th=readmesh(ffdatadir+"mesh.msh");                    ///// Read mesh
//int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6;

/////////////////////////////////////////////////////////////////////////////////

fespace Xh(th,P2);             ////// f.e. space for vel.
fespace Mh(th,P1);            ////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1]); ////// f.e. space for triplet [u,v,p]
fespace BIGSPACE(th,[P2,P2,P1,P2,P2,P1,P2,P2,P1]);

XXMh [ubx,uby,ubp]; // base flow (start) 
XXMh<complex> [u1x,u1y,u1p];    //eigenmode (start)      
Mh dumb; // to construct the rhs's


XXMh [u0x,u0y,u0p],[u1rx,u1ry,u1rp],[u1ix,u1iy,u1ip]; // components 0 (mean flow) and 1 (fundamental, re and im) of HB  
XXMh [du0x,du0y,du0p],[du1rx,du1ry,du1rp],[du1ix,du1iy,du1ip]; // Increments in Newton
XXMh [vx,vy,vp]; // test functions


real Re, ReM;
real omega, omegaM, sigmaM, domega;
     
////////////////////////////////////////////////////////////////////////////////

macro div(u) (dx(u#x)+dy(u#y))//EOM macro for divergence 
macro Conv(ua,ub,v) ( 
              ((ua#x*dx(ub#x)+ua#y*dy(ub#x))+(ub#x*dx(ua#x)+ub#y*dy(ua#x)))*v#x 
            + ((ua#x*dx(ub#y)+ua#y*dy(ub#y))+(ub#x*dx(ua#y)+ub#y*dy(ua#y)))*v#y 
                    ) //EOM macro for mutual convection operator
macro D(u) [[dx(u#x), .5*(dx(u#y)+dy(u#x))], [.5*(dx(u#y)+dy(u#x)), dy(u#y)]] 
//EOM macro for rate-of-deformation tensor

macro NS(nu,u,v) 
		(
		 -2*nu*(D(u):D(v))
        + u#p*div(v)
        + v#p*div(u)
        - .5*Conv(u,u,v)
        )
//EOM
     
macro NSL(nu,U,u,v) 
		(
		-2*nu*(D(u):D(v))
        + u#p*div(v)
        + div(u)*v#p
        - Conv(U,u,v)
        )
//EOM
        
macro Boundaryconditions(u1,u2,v1,v2,symmetry)
	           on(bcinlet,u1=0.0,u2=0.0) 
             + on(bcwall,u1=0.0,u2=0.0)
             + int1d(th,bcaxis)(u1*v1*1e30*(symmetry=="A")+u2*v2*1e30*(symmetry=="S"))
// 

macro Lift(nu,u1,u2,p)   
	(
	int1d(th,2,21,22,23)(2*p*N.y)
	+int1d(th,2,21,22,23)( -2*nu*(2*dy(u2)*N.y+(dx(u2)+dy(u1))*N.x))
	)
//
macro Drag(nu,u1,u2,p)   
	(
	int1d(th,2,21,22,23)(2*p*N.x)
	+int1d(th,2,21,22,23)( -2*nu*(2*dx(u1)*N.x+(dx(u2)+dy(u1))*N.y))
	)
//

real eps=1.e-7; 
       
       
real sigma1; // parameter sigma1 from Mantic-lugo et al ; should be zero for harmonic balance
//real A,dA ; // amplitude 


cout << " Choice of Re : " << endl;
cin >> Re; 
cout << " --> Re = " << Re << endl;
real nu=1/Re;

{
real Relu;
ifstream cbin(ffdatadir+"MeanFlow_guess.txt");
cbin >> ubx[] >> Relu;
if(Relu!=Re){ cout << "WARNING : Re not equal to that of the guess mean flow" << endl;};
cout << "Drag of guess mean flow : " << Drag(1/Re,ubx,uby,ubp) << endl;
}

{
cout << "starting  from mode in file SelfConsistentMode_guess.txt" << endl;
ifstream cbin(ffdatadir+"SelfConsistentMode_guess.txt");
cbin >> u1x[] >> ReM >> sigmaM >> omegaM; 
cout << " 			omega of the starting field = " << omegaM<< endl;
cout << "           Cy of the starting field : " << Lift(1/Re,u1x,u1y,u1p) << endl;	 
cout << "   		Energy of perturbation A of starting field " << sqrt( 2* int2d(th)(abs(u1x)^2+abs(u1y)^2) ) << endl << endl;
}

cout << " Guess for omega ? [-1 -> the one read in the guess file] " << endl; 
cin >> omega ;
if(omega==-1){omega = omegaM;};
cout << " -->  omegaguess = " << omega << endl;


cout << " Choice of sigma1 : [0 for Harmonic balance ; not zero for self-consistent] " << endl; 
cin >> sigma1 ;
cout << " --> sigma1 = " << sigma1 << endl;

string normalisation;
cout << " Normalisation choice ?  [none, L or E]" << endl;
cin >> normalisation ;
cout << " --> " << normalisation << endl;


if(normalisation=="none")
	{ cout << " -> No normalization for the mode " << endl;}
else if(normalisation=="L")
	{
		real Liftguess;
		cout << "Value of Lift coefficient Cy for renormalisation ?"<< endl;
		cin >> Liftguess;
		cout << "  -> Cy = " << Liftguess  << endl;

		cout << "Cy before renormalisation : " << Lift(1/Re,u1x,u1y,u1p) << endl;
		complex modenorm = Lift(1/Re,u1x,u1y,u1p);
		u1x[] = Liftguess/modenorm*u1x[]; // normalize so that lift is 0.5
			cout << "Cy after renarmalisation : " << Lift(1/Re,u1x,u1y,u1p) << endl;
		    cout << "   ### Energy of perturbation A = " << sqrt( 2* int2d(th)(abs(u1x)^2+abs(u1y)^2) ) << endl << endl;	
	
	}	
else if(normalisation=="E")
		{
		real Eguess;
		cout << "Value of ENERGY for renormalisation ?"<< endl;
		cin >> Eguess;
		cout << "  -> Energy = " << Eguess << endl;

		cout << "Energy before renormalisation : " << 2*sqrt(2*int2d(th)(abs(u1x)^2+abs(u1y)^2)) << endl;
		complex modenorm = Lift(1/Re,u1x,u1y,u1p);
		u1x[] = 1/modenorm*u1x[]; // first normalize so that imag part of lift is zero
		modenorm = 2*sqrt(2*int2d(th)(abs(u1x)^2+abs(u1y)^2));
		u1x[] = Eguess/modenorm*u1x[]; // then normalize so that || ums ||_L2 = 1/sqrt(2)
		cout << "Energy after renarmalisation : " << 2*sqrt(2*int2d(th)(abs(u1x)^2+abs(u1y)^2)) << endl;	
		cout << "Cy after renarmalisation : " << Lift(1/Re,u1x,u1y,u1p) << endl;
		};

[u0x,u0y,u0p] = [ubx,uby,ubp]; 
[u1rx,u1ry,u1rp] = [real(u1x), real(u1y), real(u1p)]; 
[u1ix,u1iy,u1ip] = [imag(u1x), imag(u1y), imag(u1p)]; 



////////////////////////////////////////////////////////////////////////////////
//
// In description, the blocks are called NxM, where N is the numering of the equation and M that of the unknown
// N = 1 steady NS for MEAN flow ; N=2 real part of linear equation for eigenmode ; N = 3 imaginary part; N = 4 phase 
// M = 1 MEAN-flow, M=2 eigenmode-real ; M = 3 eigenmode-imag ; M = 4 domega 
//
/////////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////////
//////// varf for RHS 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for nonlinear term..." << endl;


varf NLOpF1([du0x,du0y,du0p],[vx,vy,vp]) =
// block 1 : NS for base flow
   int2d(th)( NS(nu,u0,v) )
 	+ Boundaryconditions(du0x,du0y,vx,vy,"S") 			
    +int2d(th)( - Conv(u1r,u1r,v) - Conv(u1i,u1i,v) )
 	;
 			
// block 2 : base-flow effect on real part of eigenmode			
varf NLOpF2([du1rx,du1ry,du1rp],[vx,vy,vp]) =
	 int2d(th)( NSL(nu,u0,u1r,v) )
	- int2d(th) ( sigma1 * (u1rx*vx+u1ry*vy) )
	+ int2d(th) ( omega * (u1ix*vx+u1iy*vy ) ) 
    + Boundaryconditions(du1rx,du1ry,vx,vy,"A")			
	;
	
// block 3 : base-flow effect on imag part of eigenmode			
varf NLOpF3([du1ix,du1iy,du1ip],[vx,vy,vp]) =
	 int2d(th)( NSL(nu,u0,u1i,v)  )              
    + Boundaryconditions(du1ix,du1iy,vx,vy,"A")			
	- int2d(th) ( sigma1 * (u1ix*vx+u1iy*vy) )
	- int2d(th) ( omega * (u1rx*vx+u1ry*vy ) ) 
	;

// blocks 4 : fix the phase with imag(lift)
// this is constructed directly when assemblying the matrix
cout << " defining operators for nonlinear term... done" << endl;

	



/////////////////////////////////////////////////////////////////////////////////
//////// varf for Linear part 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for linear term..." << endl;

// block 1-1 : NS for base flow
varf LinOp11([du0x,du0y,du0p],[vx,vy,vp]) =
   	int2d(th)( NSL(nu,u0,du0,v) )        
 	+ Boundaryconditions(du0x,du0y,vx,vy,"S");

// block 1-2 : nonlinear term (real parts)
varf LinOp12([du1rx,du1ry,du1rp],[vx,vy,vp]) =
      int2d(th)( -2*Conv(u1r,du1r,v) );

// block 1-3 : nonlinear term (real parts)
varf LinOp13([du1ix,du1iy,du1ip],[vx,vy,vp]) =
      int2d(th)( -2*Conv(u1i,du1i,v) );
 			

 			
// block 2-1 : base-flow effect on real part of eigenmode			
varf LinOp21([du0x,du0y,du0p],[vx,vy,vp]) =
	 int2d(th)( - Conv(du0,u1r,v) );
             
// block 2-2 : Stokes operator on real part of eigenmode             
varf LinOp22([du1rx,du1ry,du1rp],[vx,vy,vp]) =
             int2d(th)( NSL(nu,u0,du1r,v) )
            - int2d(th)( sigma1*(du1rx*vx+du1ry*vy) )
 			+ Boundaryconditions(du1rx,du1ry,vx,vy,"A");
 			
// block 2-3 : effect of omega on real part of equation for eigenmode
varf LinOp23([du1ix,du1iy,du1ip],[vx,vy,vp]) =
			 int2d(th)(omega*(du1ix*vx+du1iy*vy));

// block 2-4 : effect of domega on eigenmode-real equations
varf LinOp24([du0x,du0y,du0p],[vx,vy,vp])
	=  int2d(th)(u1ix*vx+u1iy*vy); // this is to be multiplied by domega



// block 3-1 : base-flow effect on imag part of eigenmode			
varf LinOp31([du0x,du0y,du0p],[vx,vy,vp]) =
	 int2d(th)( - Conv(du0,u1i,v) );  
	             
// block 3-2 : effect of omega on imag part of equation for eigenmode
varf LinOp32([du1rx,du1ry,du1rp],[vx,vy,vp]) =
			 int2d(th)(-omega*(du1rx*vx+du1ry*vy));
			 			
// block 3-3 : Stokes operator on real part of eigenmode             
varf LinOp33([du1ix,du1iy,du1ip],[vx,vy,vp]) =
             int2d(th)( NSL(nu,u0,du1i,v) )
           - int2d(th) ( sigma1*(du1ix*vx+du1iy*vy) )
 		   + Boundaryconditions(du1ix,du1iy,vx,vy,"A");
 			;

// block 3-4 : effect of domega on eigenmode-imag equations
varf LinOp34([du0x,du0y,du0p],[vx,vy,vp])
	= int2d(th)(-(u1rx*vx+u1ry*vy));


// bloc 4-3 : to fix the phase by imposing Lift(u1i) = 0
varf LinOp43([vx,vy,vp],[du1ix,du1iy,du1ip])	
	= Lift(1/Re,du1ix,du1iy,du1ip);


cout << " defining operators for linear term... done" << endl << endl;




///// BEGINING OF NEWTON LOOP
real dXX = 1;
domega = 1;
int iter=1;
while(abs(domega)>1e-8&&abs(domega)<1000&&iter<100)
	{ 
	cout << endl << "Newton loop step " << iter << endl;

	cout << "constructing rhs... " << endl;

	real[int] RHSF1(u0x[].n), RHSF2(u0x[].n), RHSF3(u0x[].n); 
	RHSF1 = NLOpF1(0,XXMh);
	RHSF2 = NLOpF2(0,XXMh);
	RHSF3 = NLOpF3(0,XXMh);	
	real RHSF4 = Lift(1/Re,u1ix,u1iy,u1ip); 	
	
	real[int] RHS = [RHSF1, RHSF2, RHSF3, RHSF4];		
//	cout <<  " max RHS : " << RHSF1.l2 <<  ", " << RHSF2.l2 <<  ", " << RHSF3.l2 <<  ", " << RHSF4 << endl;


	
	cout << " Assembling matrix..." << endl;
	
matrix matLinOp11 = LinOp11(XXMh,XXMh);
matrix matLinOp12 = LinOp12(XXMh,XXMh);
matrix matLinOp13 = LinOp13(XXMh,XXMh);

matrix matLinOp21 = LinOp21(XXMh,XXMh);
matrix matLinOp22 = LinOp22(XXMh,XXMh);
matrix matLinOp23 = LinOp23(XXMh,XXMh);
real[int] matLinOp24 = LinOp24(0,XXMh);


matrix matLinOp31 = LinOp31(XXMh,XXMh);
matrix matLinOp32 = LinOp32(XXMh,XXMh);
matrix matLinOp33 = LinOp33(XXMh,XXMh);
real[int] matLinOp34 = LinOp34(0,XXMh);

real[int] matLinOp43 = LinOp43(0,XXMh);

matrix LinOp = [	[matLinOp11, matLinOp12, matLinOp13, 	0 ],
					[matLinOp21,matLinOp22,  matLinOp23,	matLinOp24 ],
					[matLinOp31,matLinOp32, matLinOp33,		matLinOp34 ],
					[	0	   ,0 	, 		matLinOp43',	0 		 ]
			   ];
				
cout << " Assembling matrix... done" << endl;


cout << " LU-ing matrix..." << endl;
set(LinOp,solver=sparsesolver);
cout << " LU-ing matrix... done" << endl;

	

	cout << " solving BIG problem..." << endl;
	real[int] dX(LinOp.n);
	dX = LinOp^-1*RHS;
	[du0x[], du1rx[], du1ix[], domega] = dX;
	
	u0x[] -= du0x[];
	u1rx[] -= du1rx[];
	u1ix[] -= du1ix[];
	omega -= domega;




	cout << endl << "   ### ||du0||, ||du1,r||, ||du1,i||, domega : " << du0x[].l2 
			<< " " << du1rx[].l2 << " " << du1ix[].l2 << " " << -domega << endl;
	dXX = du0x[].l2+du1rx[].l2+du1ix[].l2+abs(domega);
	
	cout << "   ### ||u0||, ||u1,r||, ||u1,i|| : " << u0x[].l2 
			<< " " << u1rx[].l2 << " " << u1ix[].l2  << endl;

	
	cout <<  "   ### omega = " << omega << endl;
	cout << "   ### Energy of perturbation A = " << sqrt( 2* int2d(th)(abs(u1rx)^2+abs(u1ry)^2+abs(u1ix)^2+abs(u1iy)^2) )  << endl;	
	cout << " 	### Cy = " << Lift(1/Re,u1rx,u1ry,u1rp) << endl ; 
	//plot(u0x,cmm="mean flow approximation iteration "+iter, fill=1,value=1,wait=0);

	iter++;
	if(u1rx[].l2<1e-6){dXX = 1e30; };
	};
	
	if(abs(dXX)>1000) 
	{
	SFWriteBaseFlow(ffdatadir+"MeanFlow.ff2m",ub,"MeanFlow",-1);
	SFWriteMode(ffdatadir+"SelfConsistentMode.ff2m",u1,1i*omega+sigma1,1i*omegaM+sigma1,"HarmonicMode",-1);
	cout << " Newton Loop DIVERGED " << endl;	
	}
	
	else
	{
	cout << " HB MODEL : Newton Loop converged in " << iter << " iterations " << endl;
	cout << " >>> Omegac = " << omega << endl;	
	
/// GENERATES OUTPUT FILES

{
	ofstream file(ffdatadir+"MeanFlow.txt");
	file << u0x[]; 
	file << endl << endl << Re;
}; 

SFWriteBaseFlow(ffdatadir+"MeanFlow.ff2m",u0,"MeanFlow",iter);

    [u1x,u1y,u1p] = [u1rx+1i*u1ix,u1ry+1i*u1iy,u1rp+1i*u1ip]; 

{
 	ofstream file(ffdatadir+"SelfConsistentMode.txt");
   	file << u1x[] ;	
   	file << endl << endl << Re << endl
   	<< endl << sigma1 << "   " << omega  << endl;
};



SFWriteMode(ffdatadir+"SelfConsistentMode.ff2m",u1,1i*omega+sigma1,1i*omega+sigma1,"HarmonicMode",iter);

	}

