


/// DECLARATIONS FORMELLES

	mesh th=readmesh("mesh.msh");
 	fespace p2xp2xp1(th,[P2,P2,P1]);	
 	fespace p2xp2xp2xp1(th,[P2,P2,P2,P1]);
	p2xp2xp1 [urp,uzp,pp];
        p2xp2xp2xp1 [ur,ut,uz,p],[vr,vt,vz,q];
	int m=1; 
	real nu;
	real epsilonPQ = 1e-6; // terme de desingularisation

	varf AMSBDm1([ur,ut,uz,p],[vr,vt,vz,q]) = // for the direct computation (m=1)
	int2d(th)(
	- y*vz*(uzp*dx(uz)+uz*dx(uzp)+urp*dy(uz)+ur*dy(uzp) )
	- y*vr*(uzp*dx(ur)+uz*dx(urp)+urp*dy(ur)+ur*dy(urp) )
	- y*vt*(uzp*dx(ut)+urp*dy(ut) )-urp*ut*vt
	- nu*(y*dx(uz)*dx(vz)+y*dy(uz)*dy(vz)+m^2/y*uz*vz  
	+ y*dx(ut)*dx(vt)+y*dy(ut)*dy(vt)+(m^2+1)/y*ut*vt  
	+ y*dx(ur)*dx(vr)+y*dy(ur)*dy(vr)+(m^2+1)/y*ur*vr  
	+ 2i*m*vr*ut/y-2i*m*vt*ur/y)  
	+ p*(y*dx(vz)+vr+y*dy(vr)-1i*m*vt)
	- q*(y*dx(uz)+ur+y*dy(ur)+1i*m*ut)
	- y*1e-30*(ur*vr+ut*vt+uz*vz)+y*epsilonPQ*p*q
	)
  	+ on(1,uz=0.,ur=0.,ut=0.)
  	+ on(21,22,23,uz=0.,ur=0.,ut=0.)	
	+ on(4,ur=0.)
	//+ on(6,ur=0.); //for m=0
	+ on(6,uz=0.); //for m=1
	//+ on(6,ur=0.,ut=0.,uz=0.); //for m=2
	cout << "declaration operateur m=1" << endl;
	
	varf AMSBDm0([ur,ut,uz,p],[vr,vt,vz,q]) = // for the direct computation (m=0)
	int2d(th)(
	- y*vz*(uzp*dx(uz)+uz*dx(uzp)+urp*dy(uz)+ur*dy(uzp) )
	- y*vr*(uzp*dx(ur)+uz*dx(urp)+urp*dy(ur)+ur*dy(urp) )
	- y*vt*(uzp*dx(ut)+urp*dy(ut) )-urp*ut*vt
	- nu*(y*dx(uz)*dx(vz)+y*dy(uz)*dy(vz)+m^2/y*uz*vz  
	+ y*dx(ut)*dx(vt)+y*dy(ut)*dy(vt)+(m^2+1)/y*ut*vt  
	+ y*dx(ur)*dx(vr)+y*dy(ur)*dy(vr)+(m^2+1)/y*ur*vr  
	+ 2i*m*vr*ut/y-2i*m*vt*ur/y)  
	+ p*(y*dx(vz)+vr+y*dy(vr)-1i*m*vt)
	- q*(y*dx(uz)+ur+y*dy(ur)+1i*m*ut)
	- y*1e-30*(ur*vr+ut*vt+uz*vz)+y*epsilonPQ*p*q
	)
  	+ on(1,uz=0.,ur=0.,ut=0.)
  	+ on(21,22,23,uz=0.,ur=0.,ut=0.)	
	+ on(4,ur=0.)
	+ on(6,ur=0.,ut=0.); //for m=0
	//+ on(6,uz=0.); //for m=1
	//+ on(6,ur=0.,ut=0.,uz=0.); //for m=2
	cout << "declaration operateur m=0" << endl;
	
	varf AMSBDm2([ur,ut,uz,p],[vr,vt,vz,q]) = // for the direct computation (m=2 or larger)
	int2d(th)(
	- y*vz*(uzp*dx(uz)+uz*dx(uzp)+urp*dy(uz)+ur*dy(uzp) )
	- y*vr*(uzp*dx(ur)+uz*dx(urp)+urp*dy(ur)+ur*dy(urp) )
	- y*vt*(uzp*dx(ut)+urp*dy(ut) )-urp*ut*vt
	- nu*(y*dx(uz)*dx(vz)+y*dy(uz)*dy(vz)+m^2/y*uz*vz  
	+ y*dx(ut)*dx(vt)+y*dy(ut)*dy(vt)+(m^2+1)/y*ut*vt  
	+ y*dx(ur)*dx(vr)+y*dy(ur)*dy(vr)+(m^2+1)/y*ur*vr  
	+ 2i*m*vr*ut/y-2i*m*vt*ur/y)  
	+ p*(y*dx(vz)+vr+y*dy(vr)-1i*m*vt)
	- q*(y*dx(uz)+ur+y*dy(ur)+1i*m*ut)
	- y*1e-30*(ur*vr+ut*vt+uz*vz)+y*epsilonPQ*p*q
	)
  	+ on(1,uz=0.,ur=0.,ut=0.)
  	+ on(21,22,23,uz=0.,ur=0.,ut=0.)	
	+ on(4,ur=0.)
	//+ on(6,ur=0.); //for m=0
	//+ on(6,uz=0.); //for m=1
	+ on(6,ur=0.,ut=0.,uz=0.); //for m=2
	cout << "declaration operateur m=2" << endl;


	real Remin,Remax,dRe,si, lecture;
	
	string nomfile;
	int nev=15;

	string ff ="/usr/local/bin/FreeFem++";

	int   testCB;

// ENTREE DES PARAMETRES DE LA BOUCLE :

	real Re,Re1,Re2,ReS;

	cout << " SCAN ECOULEMENT AUTOUR D'UN OBJET AXI : entrez Re1,Re2,ReS" << endl;
	cin >> Re1 >> Re2 >> ReS ;
	
	real sigmar,sigmai;
	cout << " Entrez le Shift : " << endl;
	cin >> sigmar >> sigmai ;
	complex sigma = sigmar +1i*sigmai;
	
	int Npas =(Re2-Re1)/ReS;
	
	ofstream fileEV("Re_eigenval.txt");

// BOUCLE sur RE
	
	for (int ii=0; ii<Npas+1; ii++)
	{
	Re = Re1+ii*ReS;
	cout << "BOUCLE : Re = "<< Re << endl;

	testCB = exec("ls CHBASE/cbn_Re"+Re+".txt");
	
	if (testCB==0)
		{
		cout << "Fichier Chbase existant : on le copie" << endl;
		exec("cp CHBASE/cbn_Re"+Re+".txt chbase.txt ");
		} 
		else
		{
		cout << "Fichier Chbase inexistant : on le cree" << endl;
		exec("cp chbase.txt chbase_guess.txt");
    		exec("echo '"+Re+"' | "+ff+" -v 0 Newton_Axi.edp");
		exec(" mv cbn_Re"+Re+".txt CHBASE/");
		};	
	
	
	{
	ifstream cbin("chbase.txt");
	cbin >> urp[];
	cbin >> Re;
//	ifstream file1("m.txt");
//	file1 >> m;
	};
	
	
	cout << "### Construction of matrices A (complex) and B (COMPLEX AS WELL) for Axi problem" << endl;
	cout << "### Re = " << Re << endl; 
	cout << "### m = " << m << endl; 


	nu=1./Re;
 
    	
	matrix<complex> Acomp;
	
	if(m==0) {Acomp = AMSBDm0(p2xp2xp2xp1,p2xp2xp2xp1,solver=UMFPACK);}
	else if(abs(m)==1) {Acomp = AMSBDm1(p2xp2xp2xp1,p2xp2xp2xp1,solver=UMFPACK);}
	else {Acomp = AMSBDm2(p2xp2xp2xp1,p2xp2xp2xp1,solver=UMFPACK);}
	cout << "structure matrice A creee" << endl;


/* MATRICE B (COMPLEX) */	

	varf FBD([ur,ut,uz,p],[vr,vt,vz,q]) =
        int2d(th)(y*(ur*vr+ut*vt+uz*vz+1e-30*p*q));	
	matrix<complex> Bcomp=FBD(p2xp2xp2xp1,p2xp2xp2xp1,solver=CG);
       	cout << "structure matrice B creee" << endl;

/* EIGENVALUE COMPUTATION (without SLEPC) */

	complex[int] ev(nev); // to store nev eigein value
	int k=EigenValue(Acomp,Bcomp,sigma=sigma,value=ev,tol=1e-10,maxit=0,ncv=0);


/* DISPLAY AND OUTPUT RESULTS */

	for (int i=0;i<nev;i++)
	{
              fileEV << Re << " " << real(ev[i]) << " " << imag(ev[i]) << endl;
	  	cout << " valeur propre : " << i << "  : " << ev[i] << endl;
	}; 	
	

	
//// FIN BOUCLE RE
};





