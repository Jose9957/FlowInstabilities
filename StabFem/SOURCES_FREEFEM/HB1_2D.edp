//
//  PROGRAM HB1_2D.edp
//	
//	Solves directly the Order 1 Hamonic Balance (or Self-Consistent) equations to decribe the limit cycle with a mean flow and a quasi-linear mode (Mantic-lugo et al)
//   
//  The flow is assumed as an expansion in the form : 	u = u_0 + [ u_{1,c} cos (omega t) + u_{1,s} sin (omega t) ] e^{lambda t}
//  This expansion is equivalent to Mantic-Lugo et al : u = u_0 + A [U_1 e^{i omega t + i sigma t + cc] where u_1 is the complex self-consistent mode.
// 	The connection between both parametrizations is u_{1,c} - i u_{1,s} = 2 A u_1 where u_1 is normalised with ||u_1|| = 1/sqrt(2). 
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	Re , omega_guess, sigma (for SC a la Mantic Lugo), Amp(complex), symmetry ('A', 'S' or 'N')
//
//       the "sigma" parameter is the amplification rate in the SC model of Mantic-Lugo ; if zero it is a simple HB1 expansion	
//	     "Amp" is an initial amplitude; if Amp is not equal to 1, then the guess HBmode1 will be rescaled by multiplying by Amp 
//			(significance of Amp thus depends on normalization ; use this parameter when starting with an eigenmode , put it to 1 when starting from a WNL guess) 
//
//	INPUT FILES :
//		MeanFlow_guess.txt				-> starting field for mean-flow (real) 
//      HBMode1_guess.txt 	-> starting field for self-consistent mode (stored as COMPLEX ; real and imaginary parts are u1,c and -u1,s)
// 		mesh.msh 						->  mesh in Freefem format
//  OUTPUT FILES :
//		MeanFlow.txt					-> Converged mean flow (real)
//		MeanFlow.ff2m					
//      HBMode1.txt			-> Converged self-consistent mode (stored as COMPLEX with same convention) 
//      HBMode1.ff2m 
//
// 	ERROR MANAGEMENT : 
//      if Newton iteration diverges, SelfConsistentMode.txt is not generated and "iter" parameter in Eigenmode.ff2m is -1.
//
// 	TODO : Redesign using modern macros as done in FindThreshold_2D (version of 8 october)

include "StabFem.idp";

IFMACRO(!Pk) 
macro Pk [P2,P2,P1] //FEspace for pressure 
macro Pkstring() "P2P2P1" //
ENDIFMACRO
int sym = -1;

string copyfile = "no"; // set to "yes" to copy the output files into the "guess". Better to disable when using in Matlbab driver mode.


/////////////////////////////////////////////////////////////////////////////////


mesh th=readmesh(ffdatadir+"mesh.msh");                    ///// Read mesh
int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6; // no longer is Customization file ; consider removing it completely

/////////////////////////////////////////////////////////////////////////////////

fespace Xh(th,P2);             ////// f.e. space for vel.
fespace Mh(th,P1);            ////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1]); ////// f.e. space for triplet [u,v,p]
//fespace BIGSPACE(th,[P2,P2,P1,P2,P2,P1,P2,P2,P1]); NOT USED HERE

XXMh [ubx,uby,ubp]; // base flow (start) 
XXMh<complex> [u1x,u1y,u1p];    //eigenmode (start)      
Mh dumb; // to construct the rhs's

XXMh [u0x,u0y,u0p],[u1cx,u1cy,u1cp],[u1sx,u1sy,u1sp]; // components 0 (mean flow) and 1 (fundamental, re and im) of HB  
XXMh [du0x,du0y,du0p],[du1cx,du1cy,du1cp],[du1sx,du1sy,du1sp]; // Increments in Newton
XXMh [vx,vy,vp]; // test functions

real Re, ReM;
real Omegax;
real omega, omegaM, sigmaM, domega;
string symmetry, symmetryBaseFlow, symmetryODD, symmetryEVEN ;
     
////////////////////////////////////////////////////////////////////////////////

macro div(u) (dx(u#x)+dy(u#y))//EOM macro for divergence 
macro Conv(ua,ub,v) ( 
              ((ua#x*dx(ub#x)+ua#y*dy(ub#x))+(ub#x*dx(ua#x)+ub#y*dy(ua#x)))*v#x 
            + ((ua#x*dx(ub#y)+ua#y*dy(ub#y))+(ub#x*dx(ua#y)+ub#y*dy(ua#y)))*v#y 
                    ) //EOM macro for mutual convection operator
macro D(u) [[dx(u#x), .5*(dx(u#y)+dy(u#x))], [.5*(dx(u#y)+dy(u#x)), dy(u#y)]] 
//EOM macro for rate-of-deformation tensor

macro NS(nu,u,v) 
		(
		 -2*nu*(D(u):D(v))
        + u#p*div(v)
        + v#p*div(u)
        - .5*Conv(u,u,v)
        )
//EOM
     
macro NSL(nu,U,u,v) 
		(
		-2*nu*(D(u):D(v))
        + u#p*div(v)
        + div(u)*v#p
        - Conv(U,u,v)
        )
//EOM
macro BoundaryconditionsMF(u1,u2,v1,v2,symmetry)
	           on(bcinlet,u1=0.0,u2=0.0) 
             + on(bcwall,u1=u0x-Omegax*y/0.5,u2=u0y+Omegax*x/0.5)
             + int1d(th,bcaxis)(u1*v1*1e30*(symmetry=="A")+u2*v2*1e30*(symmetry=="S"))
//        
macro Boundaryconditions(u1,u2,v1,v2,symmetry)
	           on(bcinlet,u1=0.0,u2=0.0) 
             + on(bcwall,u1=0.0,u2=0.0)
             + int1d(th,bcaxis)(u1*v1*1e30*(symmetry=="A")+u2*v2*1e30*(symmetry=="S"))
// 

macro Lift(nu,u1,u2,p)   
	(
	int1d(th,2,21,22,23)((1.0+1.0*(symmetry=="A"))*p*N.y)
	+int1d(th,2,21,22,23)( -(1.0+1.0*(symmetry=="A"))*nu*(2*dy(u2)*N.y+(dx(u2)+dy(u1))*N.x))
	)
// WARNING : HERE IT IS Lift FORCE
macro Drag(nu,u1,u2,p)   
	(
	int1d(th,2,21,22,23)((1.0+1.0*(symmetry=="S"))*p*N.x)
	+int1d(th,2,21,22,23)( -(1.0+1.0*(symmetry=="S"))*nu*(2*dx(u1)*N.x+(dx(u2)+dy(u1))*N.y))
	)
// Drag FORCE

macro EnergyNorm(u) sqrt( (1.0+1.0*(symmetry!="N"))*int2d(th)(abs(u#x)^2+abs(u#y)^2) )
// "Energy" norm for a real or complex field (factor 2 is because the whole domain is two halves)

macro EnergyNormCS(uc,us) sqrt( (1.0+1.0*(symmetry!="N"))*.5* int2d(th)(abs(uc#x)^2+abs(uc#y)^2+abs(us#x)^2+abs(us#y)^2) )
// "Energy" norm for a field defined by "cos" and "sin" components (factor 2 because half-domain ; factor .5 because of time-average)

real eps=1.e-7; 
       
       
real sigma1; // parameter sigma1 from Mantic-lugo et al ; should be zero for harmonic balance
//real A,dA ; // amplitude 


cout << " Choice of Re : " << endl;
cin >> Re; 
cout << " --> Re = " << Re << endl;
cout << " Choice of Omegax : " << endl;
cin >> Omegax; 
cout << " --> Omegax = " << Omegax << endl;

real nu=1/Re;

{
real Relu;
cout << "starting  from mean flow in file MeanFlow_guess.txt" << endl;
ifstream cbin(ffdatadir+"MeanFlow_guess.txt");
cbin >> ubx[] ; // David : removing >> Relu;
//if(Relu!=Re){ cout << "WARNING : Re not equal to that of the guess mean flow" << endl;};
}


{
cout << "starting  from mode in file HBMode1_guess.txt" << endl;
ifstream cbin(ffdatadir+"HBMode1_guess.txt");
cbin >> u1x[]  >> sigmaM >> omegaM; 
[u1cx,u1cy,u1cp] = [real(u1x), real(u1y), real(u1p)]; 
[u1sx,u1sy,u1sp] = [-imag(u1x), -imag(u1y), -imag(u1p)];  
}

cout << " Guess for omega ? [-1 -> the one read in the guess file] " << endl; 
cin >> omega ;
if(omega==-1){omega = omegaM;};
cout << " -->  omegaguess = " << omega << endl;


cout << " Choice of sigma1 : [0 for Harmonic balance ; not zero for self-consistent] " << endl; 
cin >> sigma1 ;
cout << " --> sigma1 = " << sigma1 << endl;

		complex Amp; 
		real Ampr, Ampi;
		cout << "Value of Amp for rescaling ? (complex parameter) " << endl;
		cin >> Ampr >> Ampi;
		Amp = Ampr + 1i*Ampi;

cout << " Symmetry of the base flow : " << endl; 
cin >> symmetryBaseFlow ;
cout << " -->  Symmetry of the base flow = " << symmetryBaseFlow << endl;	

cout << " Symmetry of the mode : " << endl; 
cin >> symmetry ;
cout << " -->  Symmetry of the mode = " << symmetry << endl;	
if(symmetry=="A") { symmetryODD="A" ; symmetryEVEN = "S";};
if(symmetry=="S") { symmetryODD="S" ; symmetryEVEN = "S";};
if(symmetry=="N") { symmetryODD="N" ; symmetryEVEN = "N";};


// OUTPUT
cout << "Drag force of guess mean flow : " << Drag(1/Re,ubx,uby,ubp) << endl;
cout << " 			omega of the starting field = " << omegaM<< endl;
cout << "           Fy of the starting field : " << Lift(1/Re,u1x,u1y,u1p) << endl;
cout << "   		Energy-Norm (A) of starting field (complex macro) : " << EnergyNorm(u1)/sqrt(2) << endl;	
cout << "   		Energy-Norm (A) of starting field (real macro) : " << EnergyNormCS(u1c,u1s) << endl << endl;
cout << "  -> Amp = " << Amp  << endl;
cout << "Fy before rescaling : " << Lift(1/Re,u1x,u1y,u1p) << endl;
cout << "Energy-norm before rescaling : " << EnergyNorm(u1)/sqrt(2) << endl;
u1x[] = Amp*u1x[]; // normalize so that lift is 0.5 and Cy 1
cout << "Fy after rescaling : " << Lift(1/Re,u1x,u1y,u1p) << endl;
cout << "   ### Energy-norm A = " << EnergyNorm(u1)/sqrt(2) << endl << endl;	


[u0x,u0y,u0p] = [ubx,uby,ubp]; 
[u1cx,u1cy,u1cp] = [real(u1x), real(u1y), real(u1p)]; 
[u1sx,u1sy,u1sp] = [-imag(u1x), -imag(u1y), -imag(u1p)]; 
cout << "   		Energy-Norm (A) of starting field (real macro) : " << EnergyNormCS(u1c,u1s) << endl << endl;


////////////////////////////////////////////////////////////////////////////////
//
// In description, the blocks are called NxM, where N is the numering of the equation and M that of the unknown
// N = 1 steady NS for MEAN flow ; N=2 real part of linear equation for eigenmode ; N = 3 imaginary part; N = 4 phase 
// M = 1 MEAN-flow, M=2 eigenmode-real ; M = 3 eigenmode-imag ; M = 4 domega 
//
/////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////
//////// varf for RHS 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for nonlinear term..." << endl;


varf NLOpF1([du0x,du0y,du0p],[vx,vy,vp]) =
// block 1 : NS for base flow
   int2d(th)( NS(nu,u0,v) )
 	+ BoundaryconditionsMF(du0x,du0y,vx,vy,"S") 			
    +int2d(th)( - .25*Conv(u1c,u1c,v) - .25*Conv(u1s,u1s,v) )
 	;
 			
// block 2 : base-flow effect on real part of eigenmode			
varf NLOpF2([du1cx,du1cy,du1cp],[vx,vy,vp]) =
	 int2d(th)( NSL(nu,u0,u1c,v) )
	- int2d(th) ( sigma1 * (u1cx*vx+u1cy*vy) )
	- int2d(th) ( omega * (u1sx*vx+u1sy*vy ) ) 
    + Boundaryconditions(du1cx,du1cy,vx,vy,"A")			
	;
	
// block 3 : base-flow effect on imag part of eigenmode			
varf NLOpF3([du1sx,du1sy,du1sp],[vx,vy,vp]) =
	 int2d(th)( NSL(nu,u0,u1s,v)  )              
    + Boundaryconditions(du1sx,du1sy,vx,vy,"A")			
	- int2d(th) ( sigma1 * (u1sx*vx+u1sy*vy) )
	+ int2d(th) ( omega * (u1cx*vx+u1cy*vy ) ) 
	;

// blocks 4 : fix the phase with imag(lift)
// this is constructed directly when assemblying the matrix
cout << " defining operators for nonlinear term... done" << endl;

	



/////////////////////////////////////////////////////////////////////////////////
//////// varf for Linear part 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for linear term..." << endl;

// block 1-1 : NS for base flow
varf LinOp11([du0x,du0y,du0p],[vx,vy,vp]) =
   	int2d(th)( NSL(nu,u0,du0,v) )        
 	+ BoundaryconditionsMF(du0x,du0y,vx,vy,"S");

// block 1-2 : nonlinear term (real parts)
varf LinOp12([du1cx,du1cy,du1cp],[vx,vy,vp]) =
      int2d(th)( -.5*Conv(u1c,du1c,v) );

// block 1-3 : nonlinear term (real parts)
varf LinOp13([du1sx,du1sy,du1sp],[vx,vy,vp]) =
      int2d(th)( -.5*Conv(u1s,du1s,v) );
 			

 			
// block 2-1 : base-flow effect on real part of eigenmode			
varf LinOp21([du0x,du0y,du0p],[vx,vy,vp]) =
	 int2d(th)( - Conv(du0,u1c,v) );
             
// block 2-2 : Stokes operator on real part of eigenmode             
varf LinOp22([du1cx,du1cy,du1cp],[vx,vy,vp]) =
             int2d(th)( NSL(nu,u0,du1c,v) )
            - int2d(th)( sigma1*(du1cx*vx+du1cy*vy) )
 			+ Boundaryconditions(du1cx,du1cy,vx,vy,"A");
 			
// block 2-3 : effect of omega on real part of equation for eigenmode
varf LinOp23([du1sx,du1sy,du1sp],[vx,vy,vp]) =
			 int2d(th)(-omega*(du1sx*vx+du1sy*vy));

// block 2-4 : effect of domega on eigenmode-real equations
varf LinOp24([du0x,du0y,du0p],[vx,vy,vp])
	=  int2d(th)(-(u1sx*vx+u1sy*vy)); // this is to be multiplied by domega



// block 3-1 : base-flow effect on imag part of eigenmode			
varf LinOp31([du0x,du0y,du0p],[vx,vy,vp]) =
	 int2d(th)( - Conv(du0,u1s,v) );  
	             
// block 3-2 : effect of omega on imag part of equation for eigenmode
varf LinOp32([du1cx,du1cy,du1cp],[vx,vy,vp]) =
			 int2d(th)(omega*(du1cx*vx+du1cy*vy));
			 			
// block 3-3 : Stokes operator on real part of eigenmode             
varf LinOp33([du1sx,du1sy,du1sp],[vx,vy,vp]) =
             int2d(th)( NSL(nu,u0,du1s,v) )
           - int2d(th) ( sigma1*(du1sx*vx+du1sy*vy) )
 		   + Boundaryconditions(du1sx,du1sy,vx,vy,"A");
 			;

// block 3-4 : effect of domega on eigenmode-imag equations
varf LinOp34([du0x,du0y,du0p],[vx,vy,vp])
	= int2d(th)((u1cx*vx+u1cy*vy));


// bloc 4-3 : to fix the phase by imposing Lift(u1s) = 0
varf LinOp43([vx,vy,vp],[du1sx,du1sy,du1sp])	
	= Lift(1/Re,du1sx,du1sy,du1sp);


cout << " defining operators for linear term... done" << endl << endl;


real tol = 1e-6;

///// BEGINING OF NEWTON LOOP
real dXX = 1;
int iter=1;
while(abs(dXX)>tol&&abs(dXX)<1000&&iter<100)
	{ 
	cout << endl << "Newton loop step " << iter << endl;

	cout << "constructing rhs... " << endl;

	real[int] RHSF1(u0x[].n), RHSF2(u0x[].n), RHSF3(u0x[].n); 
	RHSF1 = NLOpF1(0,XXMh);
	RHSF2 = NLOpF2(0,XXMh);
	RHSF3 = NLOpF3(0,XXMh);	
	real RHSF4 = Lift(1/Re,u1sx,u1sy,u1sp); 	
	
	real[int] RHS = [RHSF1, RHSF2, RHSF3, RHSF4];		
//	cout <<  " max RHS : " << RHSF1.l2 <<  ", " << RHSF2.l2 <<  ", " << RHSF3.l2 <<  ", " << RHSF4 << endl;


	
	cout << " Assembling matrix..." << endl;
	
matrix matLinOp11 = LinOp11(XXMh,XXMh);
matrix matLinOp12 = LinOp12(XXMh,XXMh);
matrix matLinOp13 = LinOp13(XXMh,XXMh);

matrix matLinOp21 = LinOp21(XXMh,XXMh);
matrix matLinOp22 = LinOp22(XXMh,XXMh);
matrix matLinOp23 = LinOp23(XXMh,XXMh);
real[int] matLinOp24 = LinOp24(0,XXMh);


matrix matLinOp31 = LinOp31(XXMh,XXMh);
matrix matLinOp32 = LinOp32(XXMh,XXMh);
matrix matLinOp33 = LinOp33(XXMh,XXMh);
real[int] matLinOp34 = LinOp34(0,XXMh);

real[int] matLinOp43 = LinOp43(0,XXMh);

matrix LinOp = [	[matLinOp11, matLinOp12, matLinOp13, 	0 ],
					[matLinOp21,matLinOp22,  matLinOp23,	matLinOp24 ],
					[matLinOp31,matLinOp32, matLinOp33,		matLinOp34 ],
					[	0	   ,0 	, 		matLinOp43',	0 		 ]
			   ];
				
cout << " Assembling matrix... done" << endl;


cout << " LU-ing matrix..." << endl;
set(LinOp,solver=sparsesolver);
cout << " LU-ing matrix... done" << endl;

	
	cout << " solving BIG problem..." << endl;
	real[int] dX(LinOp.n);
	dX = LinOp^-1*RHS;
	[du0x[], du1cx[], du1sx[], domega] = dX;
	
	u0x[] -= du0x[];
	u1cx[] -= du1cx[];
	u1sx[] -= du1sx[];
	omega -= domega;




	cout << endl << "   ### ||du0||, ||du1,r||, ||du1,i||, domega : " << du0x[].l2 
			<< " " << du1cx[].l2 << " " << du1sx[].l2 << " " << -domega << endl;
	dXX = du0x[].l2+du1cx[].l2+du1sx[].l2+abs(domega);
	
	cout << " ### domega, dFx0, dFy1c, dFY1s : " << -domega << " " << -Drag(1/Re,du0x,du0y,du0p) << " " 
	     << -Lift(1/Re,du1cx,du1cy,du1cp) << " " << -Lift(1/Re,du1sx,du1sy,du1sp) << endl;
	
	cout << "   ### ||u0||, ||u1,r||, ||u1,i|| : " << u0x[].l2 
			<< " " << u1cx[].l2 << " " << u1sx[].l2  << endl;

	
	cout <<  "   ### omega = " << omega << endl;
	cout << "   ### Energy-norm of perturbation A = " << EnergyNormCS(u1c,u1s)  << endl;	
	cout << " 	### Fy = " << Lift(1/Re,u1cx,u1cy,u1cp) << endl ; 
	IFMACRO(FREEFEMPLOTS,YES)
	plot(u0x,cmm="mean flow approximation iteration "+iter, fill=1,value=1,wait=0);
	plot(u1cx,cmm="c1 component approximation iteration "+iter, fill=1,value=1,wait=0);
	plot(u1sx,cmm="s1 component approximation iteration "+iter, fill=1,value=1,wait=0);
	ENDIFMACRO

	iter++;
	if(u1cx[].l2<1e-6){dXX = 1e30; };
	};
	
	if(abs(dXX)>1000) 
	{
	SFWriteBaseFlow(ffdatadir+"MeanFlow.ff2m",ub,"MeanFlow",-1);
	SFWriteMode(ffdatadir+"SelfConsistentMode.ff2m",u1,1i*omega+sigma1,1i*omegaM+sigma1,"HarmonicMode",-1);
	cout << endl << endl << "#####################################################################@" << endl << endl;
	cout << " Newton Loop DIVERGED " << endl;
	exit(1);	
	}
	
	else
	{
	cout << endl << endl << "#####################################################################@" << endl << endl
	     << "HB MODEL : Newton Loop converged in " << iter << " iterations " << endl;
	cout << " >>> Omegac = " << omega << endl;	
	cout << " >>> Energy of perturbation A = " << EnergyNormCS(u1c,u1s)  << endl;	
	cout << " >>> Fy = " << Lift(1/Re,u1cx,u1cy,u1cp) << endl ; 
	
/// GENERATES OUTPUT FILES

{
	ofstream file(ffdatadir+"MeanFlow.txt");
	file << u0x[]; 
	file << endl << endl << Re;
}; 

SFWriteBaseFlow(ffdatadir+"MeanFlow.ff2m",u0,"MeanFlow",iter);

    [u1x,u1y,u1p] = [u1cx-1i*u1sx,u1cy-1i*u1sy,u1cp-1i*u1sp]; 

{
 	ofstream file(ffdatadir+"HBMode1.txt");
   	file << u1x[] ;	
   	file << endl << endl << sigmaM << endl << omega << endl; /* david : removed << omega*(1+0i)  << endl; */ 
};


SFWriteHBMode(ffdatadir+"HBMode1.ff2m",u1,1i*omega+sigma1,1,symmetryODD,iter);

//if(copyfile=="yes")
//{
//cout << " COPYING Output into guess for next calculation..." << endl; 
//{
//	ofstream file(ffdatadir+"MeanFlow_guess.txt");
//	file << u0x[]; 
//	file << endl << endl << Re;
//};
//{
// 	ofstream file(ffdatadir+"HBMode1_guess.txt");
//   	file << u1x[] ;	
//   	file << endl << endl << sigma1 << endl << omega  << endl;
//};
//};
//
};

if(EnergyNormCS(u1c,u1s)<1e-5)
	{
		cout << "$$ WARNING : Energy-norm is very small ; most likely converged to steady solution" << endl;
		cout << "$$ (return code is 2)" << endl;
		exit(2);
	}
	else
	{
		cout << "$$ Leaving SF_HB2 , correctly converged " << endl;
		cout << "$$ (return code is 0)"  << endl;
		exit(0);
	};

	
// END PROGRAM

