//
	verbosity = 0;
	include "SOURCES_FREEFEM/Params_BirdCall.edp";
	
//	include "SF_Geom.edp";
//		include "StabFem.idp";
	
	
	mesh Th;

	//revolution axis
		border axis(t=-Lup,Ltotcav+Ldown) {x=t;y=0.;label=6;};


	//upstream
		//inlet
		border inlet(t=Rin,0) {x=-Lup; y=t; label=11;};	
		//non-solid boundaries
		border upstreamUP(t=Xup + Rup*cos(Tmaxup),-Lup) {x=t;y=Rin; label=7;};


	//downstream
		//outlet
		border outlet(t=0,Rout) {x=(Ltotcav+Ldown); y=t; label=3;};
		//non-solid boundaries
		border downstreamUP(t=Ltotcav+Ldown,Xdown+Rdown*cos(Tmaxdown)+Thick) {x=t;y=Rout; label=3;};


	//cavity
		//uptream wall
		border externwall11(t=Tminup,Tmaxup) {x=Xup + Rup*cos(t) ;y=Rup*sin(t);label=2;};
		border externwall12(t=Rcav,Rin) {x=Xup + Rup*cos(Tmaxup);y=t;label=2;};
		border edge1(t=Thick,0.) {x=Xup + Rup*cos(Tminup)+t;y=Rhole;label=2;};
		border internwall1(t=Tmaxup,Tminup) {x=Xup + Rup*cos(t) +Thick;y=Rup*sin(t);label=2;};
		//downstream wall
		border externwall21(t=Tmaxdown,Tmindown) {x=Xdown +Rdown*cos(t)+Thick;y=Rdown*sin(t);label=2;};
		border externwall22(t=Rout,Rcav) {x=Xdown+Rdown*cos(Tmaxdown)+Thick;y=t;label=2;};
		border edge2(t=Thick,0.) {x=t+Xdown +Rdown*cos(Tmindown);y=Rhole;label=2;};
		border internwall2(t=Tmindown,Tmaxdown) {x=Xdown +Rdown*cos(t);y=Rdown*sin(t);label=2;};
		//top of the cavity
		border cavityUP(t=Xdown +Rdown*cos(Tmaxdown),Xup + Rup*cos(Tmaxup) +Thick){x=t;y=Rcav;label=21;};		
		//border cavityUP(t=Tmaxdown,pi-Tmaxdown){x=Xdown +Rdown*cos(t);y=Rdown*sin(t);label=21;};
		
	plot(	axis(Ninit*(Lup+Ltotcav+Ldown))
		+inlet(Ninit*Rin)+upstreamUP(Ninit*Lup)
		+outlet(Ninit*Rout)+downstreamUP(Ninit*Ldown)
		+externwall11(Ninit*(Rcav-Rhole))+externwall12(Ninit*(Rin-Rcav))+edge1(4*Ninit*Thick)+internwall1(Ninit*(Rcav-Rhole))
		+externwall21(Ninit*(Rcav-Rhole))+externwall22(Ninit*(Rout-Rcav))+edge2(4*Ninit*Thick)+internwall2(Ninit*(Rcav-Rhole))+cavityUP(2*Ninit*Hcav)

	     ,wait=debug);


	Th = buildmesh( axis(Ninit*(Lup+Ltotcav+Ldown))
		+inlet(Ninit*Rin)+upstreamUP(Ninit*Lup)
		+outlet(Ninit*Rout)+downstreamUP(Ninit*Ldown)
		+externwall11(Ninit*(Rcav-Rhole))+externwall12(Ninit*(Rin-Rcav))+edge1(4*Ninit*Thick)+internwall1(Ninit*(Rcav-Rhole))
		+externwall21(Ninit*(Rcav-Rhole))+externwall22(Ninit*(Rout-Rcav))+edge2(4*Ninit*Thick)+internwall2(Ninit*(Rcav-Rhole))
		+cavityUP(Ninit*(Xdown +Rdown*cos(Tmaxdown)-Xup - Rup*cos(Tmaxup) -Thick))
			);

	plot(Th, wait=debug);

	savemesh(Th,"mesh.msh");


  {
			ofstream file("mesh.mshinfo"); 
			file << "Mesh for a	 bird-call (cas de  Benjamin FRY)" << endl;
			file << "PROBLEM TYPE :" << endl;
			file << "AxiXR" << endl;
			file << "PARAMETERS : " << endl;
			file << "Rhole Thick Hcav Ltotcav Rcav Ldown Lup Rout Rin" << endl;
			file << Rhole << endl << Thick << endl << Hcav << endl << Ltotcav << endl 
			<< Rcav << endl << Ldown << endl << Lup << endl << Rout << endl << Rin << endl;			
		}
        
        fespace femp1(Th,P1);
        fespace femp2xfemp2xfemp1(Th,[P2,P2,P1]);
        femp2xfemp2xfemp1 [urp,uzp,pp]=[0,0,0];
	    ofstream file("BaseFlow_guess.txt");
	    file << urp[] << endl;
	    file <<  endl << 0 << endl;
		//exec("cp BaseFlow_guess.txt BaseFlow.txt");
	
	
	femp1 ut,vt,pt,vort;
	femp1 yy,xx;
	yy = y; xx= x;
	ut=uzp;
	vt=urp;
	pt=pp;
	vort=dx(vt)-dy(ut);


//// EXPORTATION DU CHAMP DE BASE AUX FORMATS TECPLOT ET MATLAB
{
	ofstream file("BaseFlow.ff2m");
	real Rpipe = yy[].max;
	    file << "### Data generated by Freefem++ ; " << endl;
    file << "Base flow for a disk or radius 0.5 and thickness Hdisk in a pipe of radius Rpipe" << endl;
    file << "Format : " << endl;	
	file << "real Re P1 u0 P1 v0 P1 p0 P1 vort0" << endl << endl ; 
	file << 0 << endl;	
			{
			for (int j=0;j<ut[].n ; j++) file << ut[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << vt[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << pt[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << vort[][j] << endl;
		}; 
}


	    


		cout << "............................................" << endl;
		cout << "............................................" << endl;
		cout << "Maillage termine " << endl << "..." << endl;
//		cout << "nombre de sommets: "+Th.nv << endl;
		cout << "............................................" << endl;
		cout << "............................................" << endl;


	
