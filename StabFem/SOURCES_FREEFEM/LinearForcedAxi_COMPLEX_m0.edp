//
//  PROGRAM LinearForcedAxi_COMPLEX_m0.edp
//  computation of a linear harmonically forced problem for a single or multiple choices of omega
//
//	This solver uses the complex mapping ; 
//  The parameters of the complex mapping (ParamMap###) are defined in a file "Param_Mapping.edp" 
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	typecalc -> 'single', 'range', or 'array'
//	 	'single' -> omega (real) (in this case a structure field is produced)
//		'range' -> omegamin, omegastep, omegamax (real)
//		'array' -> user-defined range (complex) (N, omega1, sigma1, omega2, sigma2, ....)
//
//	INPUT FILES :
//		BaseFlow.txt		-> base flow 
// 		mesh.msh 			->  mesh in Freefem format
//
//  OUTPUT FILES :
//		Impedance.ff2m -> formatted file, structure defined in macro
//		Impedance_Chi##_Re###.txt 
//
// 	ERROR MANAGEMENT : 
//
//  First version : sometime around 2014 ; Redesigned and incorporated in the project in september 2018.

cout << "$$$$ ENTERING LinearForcedAxi_COMPLEX_m0.edp " << endl << "$$" << endl; 


include "SF_Geom.edp";
include "Param_Mapping.edp";
include "StabFem.idp";

load "MUMPS"


 
int NNN = 10000;	
string typecalc; 
int Nomega;
complex[int] omegaarray(NNN);
	
cout << "$$ ENTERING Function LinearForcedAxiCOMPLEX_m0.edp" << endl;
cout << "$$ Selection of parameters : " << endl;
cout << "$$ Enter type  (single, range, array)  >> " ;
cin >> typecalc;
cout << typecalc << endl;
if(typecalc=="single")
	{
		cout << "$$ Enter omega  >> " ;
		cin >> omegaarray(0)  ;
		cout <<  omegaarray(0) << endl;	
		Nomega = 1;
	}
	else if(typecalc=="range")
	{
		real omegamin,omegamax,omegastep;
		cout << "$$ Enter omegamin, omegastep,  omegamax  >> " ;
		cin >> omegamin >> omegastep >> omegamax ;
		cout <<  omegamin << " , " << omegastep << " , " << omegamax << endl;
		Nomega = (omegamax-omegamin)/omegastep+1;
		for(int kk=0;kk<Nomega;kk++){omegaarray(kk) = omegamin+kk*omegastep;};
	}
	else if(typecalc=="array")
	{
		real omegar,omegai;
		cout << "$$ Enter Number of omega values N >> " ;
		cin >> Nomega;
		cout << Nomega << endl;
		cout << "$$ Enter successively omega1, sigma1, omega2, sigma2, (...) omegaN, sigmaN  >> " ;
		for(int kk=0;kk<Nomega;kk++)
		{
			cin >> omegar >> omegai; 
			omegaarray(kk) = omegar+1i*omegai;
		};
		cout << endl << "$$ (successfully read " << Nomega << " complex values " << endl;
	}
	else
	{
		cout << " Error : typecalc = " << typecalc << " is not a valid value !" << endl;
		exit(10); 
	};


	mesh th=readmesh(ffdatadir+"mesh.msh");
 	fespace p2xp2xp1(th,[P2,P2,P1]);
 	fespace p2(th,P2);
	fespace p1(th,P1);	
 	fespace p2xp2xp2xp1(th,[P2,P2,P2,P1]);
	p2xp2xp1<complex> [uxp,urp,pp];
    p2xp2xp1<complex> [ux,ur,up],[vx,vr,q];
    p2xp2xp1 [urr,uzr,pr],[uri,uzi,pii];
    
	int m=0; 
	real Re;
//	real epsilonPQ = 0*1e-20; // terme de desingularisation
	complex omega;

	{
	ifstream cbin(ffdatadir+"BaseFlow.txt");
	cbin >> uxp[];
	cbin >> Re;
	};
	cout << " Lecture BaseFlow : Re = " << Re << endl;
    real nu = 1/Re;  
    // If Nu is something else than 1/Re define a macro CUSTOMnu in your StabFem.idp file
    IFMACRO(CUSTOMnu)
    nu = CUSTOMnu;
    ENDIFMACRO	cout << "nu = " << nu << endl;
	



macro UinForced .5/int1d(th,1)(y) //EOM

IFMACRO(!BoundaryConditionsForcedProblem)	
macro BoundaryConditionsForcedProblem(u,v)
	on(1,u#x=UinForced,u#r=0.)
  	+ on(2,u#x=0.,u#r=0.)	
	+ on(6,7,u#r=0.) 
	//EOM 
ENDIFMACRO

IFMACRO(!ForcedLinearStatisticsINIT)	
macro ForcedLinearStatisticsINIT(namefile)
{
	ofstream fileforces(namefile+".txt");	
    ofstream file(namefile+".ff2m");
    file << "### Data generated by Freefem++ ; " << endl;
    file << "Impedance of a whistling jet" << endl;
    file << "datatype FrequencyStatistics datastoragemode columns datadescriptors ind,omega_r,omega_i,Z_r,Z_i" << endl;
}
//EOM
ENDIFMACRO

IFMACRO(!ForcedLinearStatistics)
macro ForcedLinearStatistics(namefile)
{
	
	complex Rate = 2*pi*int1d(th,1)(ux*y);
	complex pin = int1d(th,1)(y*up)/int1d(th,1)(y); 
	/*real Energy = int2d(th)(y/abs(Hy(y,ParamMap)*Hx(x,ParamMap))*(abs(ux)^2+abs(ur)^2));*/
	complex Imp = (pin/Rate);
	cout << ">>>> JET PULSE :  omega = " << omega << endl;
	cout << ">>>> Debit Q = " << Rate << endl;
	cout << ">>>> DeltaP (= Pression  entree) = " << pin << endl;
	cout << ">>>> IMPEDANCE = P/Q = " << Imp << endl;
	cout << ">>>> Ux(1,0) = " << ux(1,0) << endl;
	ofstream fileforces(namefile+".txt",append);
	{
			ofstream fileforces(namefile+".txt",append);
				fileforces << ind << " " << real(omega) << " " << imag(omega) << " " << real(Imp) << " " << imag(Imp) << endl;					
	}
}
//EOM	
ENDIFMACRO	
	
IFMACRO(DEFMapping)
DEFMapping; // This macro computes the functions involved in complex mapping
ENDIFMACRO

macro rr 
	Rphys(x,y,ParamMap) 
//EOM
	
	problem ForcedLinear([ux,ur,up],[vx,vr,q],eps=1e-16) = 
	int2d(th)(
	(
	- vx*(
		(uxp*dX(ux)+ux*dX(uxp)+urp*dY(ux)+ur*dY(uxp))	
		  -1i*omega*ux )  				
	- vr*(
		(uxp*dX(ur)+ux*dX(urp)+urp*dY(ur)+ur*dY(urp))	
		-1i*omega*ur )	
	- nu*(dX(ux)*dX(vx)+dY(ux)*dY(vx)  
	+ dX(ur)*dX(vr)+dY(ur)*dY(vr)+1/rr*ur*vr  )  
	+ up*(dX(vx)+vr/rr+dY(vr))
	- q*(dX(ux)+ur/rr+dY(ur))
	)*JJJ
	)
	+ BoundaryConditionsForcedProblem(u,v); 

    varf ForcedLinearA([ux,ur,up],[vx,vr,q],eps=1e-16) = 
	int2d(th)(
	(
	- vx*(
		(uxp*dX(ux)+ux*dX(uxp)+urp*dY(ux)+ur*dY(uxp)) )  				
	- vr*(
		(uxp*dX(ur)+ux*dX(urp)+urp*dY(ur)+ur*dY(urp)) )	
	- nu*(dX(ux)*dX(vx)+dY(ux)*dY(vx)  
	+ dX(ur)*dX(vr)+dY(ur)*dY(vr)+1/rr*ur*vr  )  
	+ up*(dX(vx)+vr/rr+dY(vr))
	- q*(dX(ux)+ur/rr+dY(ur))
	)*JJJ
	)
    + BoundaryConditionsForcedProblem(u,v)
	;

 varf ForcedLinearB([ux,ur,up],[vx,vr,q],eps=1e-16) = 
	int2d(th)(  (vx*ux+vr*ur)*JJJ )	; 

varf ForcedLinearF([ux,ur,up],[vx,vr,q],eps=1e-16) = 
    BoundaryConditionsForcedProblem(u,v); 

cout << " Creating matrix operators... " ;
matrix<complex> matA = ForcedLinearA(p2xp2xp1,p2xp2xp1);
matrix<complex> matB = ForcedLinearB(p2xp2xp1,p2xp2xp1);
complex[int] vecF = ForcedLinearF(0,p2xp2xp1);
cout << " DONE " << endl;


// Initialisation of output files
string namefile = ffdatadir+"LinearForcedStatistics";

ForcedLinearStatisticsINIT(namefile);	


// Loop over omega
for(int ind = 0; ind<Nomega; ind++)
{
	omega  = omegaarray(ind);

	cout << "$$ Calcul d'un probleme lineaire force pour un trou ; Re    = " << Re << endl; 
	cout << "$$                                                    nu    = " << nu << endl;
	cout << "$$                                                    omega = " << omega << endl;	

//	ForcedLinear;
    matrix<complex> OP = matA+1i*omega*matB;
    set(OP,solver=sparsesolver);
    ux[] = OP^-1*vecF;

	ForcedLinearStatistics(namefile);
	
	
	

	plot(ux,cmm="Structure of forced flow for omega = "+omega,wait=1,fill=1);

	
	
	if(Nomega==1)
	{
    ofstream file(ffdatadir+"ForcedFlow.txt");
  	file << ux[] ;	
   	file << endl << endl << imag(omega) << "   " << -real(omega)  << endl;
	SFWriteForced(ffdatadir+"ForcedFlow.ff2m",u,1i*omega) // this macro is in SF_Custom.idp
	};

};
// end Loop



cout << "$$$$ LEAVING LoopImpedance.edp " << endl << "$$" << endl; 
	
	
