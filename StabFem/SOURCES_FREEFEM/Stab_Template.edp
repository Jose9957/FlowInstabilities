//  PROGRAM Stab_Template.edp
//  Template explaining the structure of a StabFem Eigenvalue (Stability) solver

include "StabFem.idp"

//		CHAPTER 1 : parameters
(...)
SFInputParametersStab;

//		CHAPTER 2 : read files
mesh th=readmesh(themeshfilename);                    ///// Read mesh
(...)
ifstream cbin(ffdatadir+"BaseFlow.txt");
cbin >> Ubx[] >> ReB;

//	CHAPTER 3 : Macros
(...)

//		CHAPTER 4 : Definition of operators
varf b([ux,uy,up],[vx,vy,q]) = int2d(th)( (ux*vx+uy*vy)*JJJ );
	// NB : JJJ is the metric term (1 for 2D; r for axi ; Jacobian for mapped coordinates)
matrix<complex> B= b(XXMh,XXMh,solver=CG);

varf   LNSE ([ux,uy,up],[vx,vy,q]) =
   int2d(th)(  (-2*nu*(D(u):D(v)) + up*q*(eps) + up*div(v) + div(u)*q - Conv(u,Ub,v))*JJJ )
 + int2d(th)( -shift*(ux*vx+uy*vy)*JJJ )
 + BoundaryconditionsStability(u,v,symmetry);
 	// NB : Here we define the SHIFTED operator (corresponding to matrix A - shift B )
matrix<complex> OP=LNSE(XXMh,XXMh,solver=sparsesolver);
shiftOP = shift;

//		CHAPTER 5 : Solve eigenvalue problem
(...)
SFEVSOLVE(k,nev,OP,B,shiftOP,ev,EigenVEC);

//		CHAPTER 6 : post-processing
(...)
ofstream fileVP1(ffdatadir+"Spectrum.txt");
{	ofstream file(ffdatadir+"Spectrum.ff2m");
 	file << "### Data generated by Freefem++ ; " << endl;
         file << "Spectrum for stability computation of a 2D incompressible flow" << endl;
         file << "datatype spectrum datastoragemode columns datadescriptors lambda_r,lambda_i,sym,shift_r,shift_i,isadj" << endl;
};
for (int i=0;i<min(nev,k);i++)
{
	 fileVP1 << real(ev[i]) << " " << imag(ev[i]) << endl;
	 ux[] = EigenVEC(:,i);
 	 ofstream fileMode(namefile+".txt");
 	 fileMode << ux[] << endl << real(ev[i]) << endl << imag(ev[i]) << endl;
 	 SFWriteMode(namefile+".ff2m",u,ev[i],shift,"EigenModeD",1);	   // Customizable macro
};
