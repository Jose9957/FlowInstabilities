

//
//  PROGRAM Stab_2D.edp
//	
//	Performs the linear stability analysis of a 2D flow
//   
//
//  INPUT PARAMETERS (from getARGV)
//   	Re , shift(Re,im) , Symmetry, Type, nev 
//
//   this solver will use either Arnoldi (if nev>1) or simple Shift-invert (if nev=1)
//
//	INPUT FILES :
//		BaseFlow.txt	-> base flow 
// 		mesh.msh 			->  mesh in Freefem format
//  OUTPUT FILES :
//  	Eigenmode##.txt   (txt format for FreeFem)
//      Eigenmode##.ff2m  (ff2m format for stabfem)
//		Spectrum.txt -> All computed Eigenvalues
//
// 
// 	ERROR MANAGEMENT : 
//      if shift-invert iteration diverges, return value is 202 (managed by macro)
//
// History :
// on 3/12/2019 Removed Sensitivity from here 

cout << "$$$$ ENTERING Stab2D.edp " << endl << "$$" << endl;    


include "StabFem.idp";

IFMACRO(!Pk) 
macro Pk [P2,P2,P1] //FEspace for pressure 
macro Pkstring() "P2P2P1" //
ENDIFMACRO


//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 1 : parameters		
//

IFMACRO(!SFInputParametersStab)
macro SFInputParametersStab()
    cout << "$$ PARAMETERS READ FROM GETARGV : " << endl << endl; 
	real Re = getARGV("-Re",0.);                  
	cout << "$$ Reynolds                 : " <<  Re << endl;
	real shiftr = getARGV("-shift_r",0.);
    real shifti = getARGV("-shift_i",0.);	
	cout << "$$ SHIFT (re,im)            :  " << shiftr << " " << shifti << endl;
	complex shift = 1i*shifti+shiftr;
	string symmetry=getARGV("-Symmetry","A");
	cout << "$$ Symmetry properties : " << symmetry << endl;
	string iadjoint = getARGV("-type","D");
	cout << "$$ Direct (D), Adjoint (A) : " <<  iadjoint << endl;
	int nev = getARGV("-nev",10);
    cout << "$$ nev     : " << nev << endl;
	
	cout << endl << "$$ ### PARAMETERS SELECTED : " << endl;
	cout << "$$ Re = " << Re<< endl;
	cout << "$$ shift = " << shift << endl;

	
	if (iadjoint =="D") {cout << "$$ DIRECT PROBLEM" << endl;}
	else if (iadjoint =="A") {cout << "$$ ADJOINT PROBLEM (discrete)" << endl;}
	else {cout << "$$ ERROR WHEN SELECTING PROBLEM TYPE" << endl;};
	
	cout << "$$ nev = " << nev << endl;
	//EOM
ENDIFMACRO

SFInputParametersStab;
	
//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 2 : read files		
//

mesh th=readmesh(ffdatadir+"mesh.msh");                    ///// Read mesh

fespace Xh(th,P2,periodic=MESHPERIODICITY);             ////// f.e. space for vel.
fespace Mh(th,P1,periodic=MESHPERIODICITY);            ////// f.e. space for pressure
fespace XXMh(th,Pk,periodic=MESHPERIODICITY); ////// f.e. space for triplet [u,v,p]
XXMh<complex> [ux,uy,up];                 ///////  -> unknown for the Navier-Stokes problem
XXMh [vx,vy,q];                 ///////  -> test for Navier-Stokes (should be defined as complex ???)
XXMh [Ubx,Uby,Ubp];          ///////  -> Base Flow
XXMh [uSolidx,uSolidy,uSolidp];          ///////  -> Solid velocity
[uSolidx,uSolidy,uSolidp] = [-cos(theta0),sin(theta0),0.0];

int sym;

if (symmetry =="N"||symmetry=="0"||int1d(th,6)(1)==0) {cout << "$$ No symmetry axis" << endl;sym=0;}	
else if (symmetry =="S"||symmetry=="1") {cout << "$$ Symmetric modes" << endl;sym=1;}
else if (symmetry =="A"||symmetry=="-1") {cout << "$$ Antiymmetric modes" << endl;sym=-1;};	

real ReB;
{
ifstream cbin(ffdatadir+"BaseFlow.txt");
cbin >> Ubx[] >> ReB;
}
if(Re!= ReB)
{ 
cout << "Warning : Re != ReB, is that really what you mean ???" << endl;
} 

	real nu=1./Re; 
	// If Nu is something else than 1/Re define a macro CUSTOMnu in your StabFem.idp file
    IFMACRO(CUSTOMnu)
    nu = CUSTOMnu;
    ENDIFMACRO


//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 3 : Customizable macros 	
//

// A. to disable complex mapping in case it is not needed
IFMACRO(!dX)
macro dX(a) dx(a) //EOM
macro dY(a) dy(a) //EOM
macro JJ   1. //EOM
ENDIFMACRO

IFMACRO(!Cm)
macro Cm(u)   
(
    -2*int1d(th,2,21,22,23)
    (
        u#p*(N.x*(y-ycg) - N.y*(x-xcg)) 
        + nu*( (x-xcg)*( 2*dy(u#y)*N.y + (dx(u#y)+dy(u#x))*N.x )  - (y-ycg)*(2*dx(u#x)*N.x + (dx(u#y) + dy(u#x))*N.y ) ) 
    )
)
//EOM
ENDIFMACRO

IFMACRO(!Cd)
macro Cd(u,thetaAngle)   
(
    -2*int1d(th,2,21,22,23)(-u#p*N.x*cos(thetaAngle) + u#p*N.y*sin(thetaAngle) + nu*((2*dx(u#x)*N.x+(dx(u#y)+dy(u#x))*N.y)*cos(thetaAngle)
                                - (2*dy(u#y)*N.y+(dx(u#y)+dy(u#x))*N.x)*sin(thetaAngle)) )
)
//EOM
ENDIFMACRO
  
IFMACRO(!Cl)
macro Cl(u,thetaAngle)   
(
    -2*int1d(th,2,21,22,23)(-u#p*N.x*sin(thetaAngle) - u#p*N.y*cos(thetaAngle) + nu*((2*dx(u#x)*N.x+(dx(u#y)+dy(u#x))*N.y)*sin(thetaAngle)
                              + (2*dy(u#y)*N.y+(dx(u#y)+dy(u#x))*N.x)*cos(thetaAngle))  )
)
//EOM
ENDIFMACRO

IFMACRO(!Cmvarf)
macro Cmvarf(u)   
int1d(th,2,21,22,23)
( 
    (-2/(mreduced*rtheta^2))*( u#p*(N.x*(y-ycg) - N.y*(x-xcg)) 
    + nu*( (x-xcg)*( 2*dy(u#y)*N.y + (dx(u#y)+dy(u#x))*N.x )  - (y-ycg)*(2*dx(u#x)*N.x + (dx(u#y) + dy(u#x))*N.y ) ) 
    )
)

//EOM
ENDIFMACRO


IFMACRO(!Clvarf)
macro Clvarf(u,thetaAngle)   
    int1d(th,2,21,22,23)( (-2/mreduced)*(-u#p*N.x*sin(thetaAngle) - u#p*N.y*cos(thetaAngle) 
                                    + nu*((2*dx(u#x)*N.x+(dx(u#y)+dy(u#x))*N.y)*sin(thetaAngle)
                                    + (2*dy(u#y)*N.y+(dx(u#y)+dy(u#x))*N.x)*cos(thetaAngle)))  )
//EOM
ENDIFMACRO

IFMACRO(!DClDtheta)
macro DClDtheta(u,thetaAngle)   
(
    -2*int1d(th,2,21,22,23)(-u#p*N.x*cos(thetaAngle) + u#p*N.y*sin(thetaAngle) 
                           + nu*((2*dx(u#x)*N.x+(dx(u#y)+dy(u#x))*N.y)*cos(thetaAngle)
                           - (2*dy(u#y)*N.y+(dx(u#y)+dy(u#x))*N.x)*sin(thetaAngle)) )
)
//EOM
ENDIFMACRO

IFMACRO(!theta)
macro theta(u,Ured,mred,rtheta)   
(
    Cm(u)*Ured^2/(mred*rtheta^2)
)
//EOM
ENDIFMACRO

//
// Note : this solver requires three macros BoundaryConditionsStability, SFWriteMode, NormalizeMode.
// Below are "default" values for these macros, to be used in the most basic cases. If you want to
// customize these macros don't modify them here but copy them to your StabFem.idp file.
//

IFMACRO(!BoundaryconditionsStability)
macro BoundaryconditionsStability(u,v,symmetry)
	           on(1,u#x=0,u#y=0.0) 		/* label 1 = inlet */
//EOM
ENDIFMACRO

IFMACRO(!SFWriteMode)
macro SFWriteMode(namefile,u,ev,shift,typeFlow,iter)
		 {
		 ofstream file(namefile);
   		 fespace p1forff2m(th,P1,periodic=MESHPERIODICITY); 
    	 p1forff2m<complex> vort1;  		 
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << "Eigenmode for a 2D-incompressible problem " << endl;
    	 file << "datatype " << typeFlow << " datastoragemode Cx" << Pkstring << " datadescriptors ux,uy,p" << endl;
    	 string descriptionFF="complex* eigenvalue int* sym complex shift int iter P1c vort"; 
    	 file << descriptionFF << endl << endl ; 
		 file << real(ev) << endl << imag(ev) << endl << sym << endl;
         file << real(shift) << endl << imag(shift) << endl << iter << endl << endl;
		 vort1=-dY(u#x)+dX(u#y);		
		for (int j=0;j<vort1[].n ; j++) file << real(vort1[][j]) << endl << imag(vort1[][j]) << endl;
		};
//EOM
ENDIFMACRO	

IFMACRO(!NormalizeMode)
macro NormalizeMode(u)
{
real NORM = sqrt(int2d(th)(abs(u#x)^2+abs(u#y)^2));
u#x[] = u#x[]/NORM;
}
//EOM
ENDIFMACRO


macro div(u) (dX(u#x)+dY(u#y))// macro for divergence 
macro Conv(ua,ub,v) ( 
              ((ua#x*dX(ub#x)+ua#y*dY(ub#x))+(ub#x*dX(ua#x)+ub#y*dY(ua#x)))*v#x 
            + ((ua#x*dX(ub#y)+ua#y*dY(ub#y))+(ub#x*dX(ua#y)+ub#y*dY(ua#y)))*v#y 
                    ) // macro for mutual convection operator
macro D(u) [[dX(u#x), .5*(dX(u#y)+dY(u#x))], [.5*(dX(u#y)+dY(u#x)), dY(u#y)]] // macro for rate-of-deformation tensor
macro Diffusion(nu,ux,uy,vx,vy)  (-nu*( dX(ux)*dX(vx)+dY(ux)*dY(vx)+dX(uy)*dX(vy)+dY(uy)*dY(vy))) // integration by parts of nu (v.Delta u) 

macro ConvSolid(ua,ub,v) ( 
              ((ua#x*dx(ub#x)+ua#y*dy(ub#x)))*v#x 
            + ((ua#x*dx(ub#y)+ua#y*dy(ub#y)))*v#y 
                    ) // macro for mutual convection operator


real eps = 1e-12; // desingularisation term for matrix B, useful with some solvers


//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 4 : Definition of operators
//



/////////////////////////////////////////////////////////////////////////////////
////////    ---> varf for generalized eigenvalue problem: 		<--- //////////
////////////////////////////////////////////////////////////////////////////////////




varf   vJff ([ux,uy,up],[vx,vy,q]) =
   int2d(th)( 
   			(-2*nu*(D(u):D(v))
             + up*q*(eps) 
             + up*div(v)
             + div(u)*q
             - Conv(u,Ub,v)
             + ConvSolid(uSolid,u,v)
             )
             )
 + int2d(th)( -shift*(ux*vx+uy*vy) )
 + BoundaryconditionsStability(u,v,symmetry)
 + int1d(th,2)( (ux*vx+uy*vy)*1e30 );


varf   vJfuh ([ux,uy,up],[vx,vy,q]) = int2d(th)(  ((sin(theta0)*dx(Ubx)+cos(theta0)*dy(Ubx)))*vx 
            + ((sin(theta0)*dx(Uby)+cos(theta0)*dy(Uby)))*vy ) - int1d(th,2)( (sin(theta0)*vx + cos(theta0)*vy)*1e30 );
varf   vJfutheta ([ux,uy,up],[vx,vy,q]) = int2d(th)(  (Uby*vx - Ubx*vy) +  ((-y*dx(Ubx)+x*dy(Ubx)) )*vx 
            + ((-y*dx(Uby)+x*dy(Uby)))*vy  ) - int1d(th,2)( (-y*vx + x*vy)*1e30 );
varf   vJftheta ([ux,uy,up],[vx,vy,q]) = int2d(th)( ((sin(theta0)*dx(Ubx)+cos(theta0)*dy(Ubx)))*vx 
            + ((sin(theta0)*dx(Uby)+cos(theta0)*dy(Uby)))*vy  )  - int1d(th,2)( (sin(theta0)*vx + cos(theta0)*vy)*1e30 );

/*
varf   vJitheta ([ux,uy,up],[vx,vy,q]) = int1d(th,2)( (sin(theta0)*vx + cos(theta0)*vy)*1e30 );
varf   vJiutheta ([ux,uy,up],[vx,vy,q]) = int1d(th,2)( (sin(theta0)*vx + cos(theta0)*vy)*1e30 );
varf   vJiuh ([ux,uy,up],[vx,vy,q]) = int1d(th,2)( (-x*vx + y*vy)*1e30 );
varf   vJif ([ux,uy,up],[vx,vy,q]) = int1d(th,2)( (ux*vx+uy*vy)*1e30 );
*/

varf   vJuhf ([vx,vy,q],[ux,uy,up]) =  Clvarf(u,theta0) ;
varf   vJuthetaf ([vx,vy,q],[ux,uy,up]) =  Cmvarf(u) ;

real auhh = -(Omegareduced/Ureduced)^2;
real auhtheta = -(1.0/mreduced)*DClDtheta(Ub,theta0);
real auhuh = -2*dampingh*Omegareduced/Ureduced;
real authetatheta = -1.0/Ureduced^2;
real authetautheta = -2*dampingtheta/Ureduced;




matrix<complex> Aff = vJff(XXMh,XXMh);
complex[int]  Afutheta = vJfutheta(0,XXMh);
complex[int] Afuh = vJfuh(0,XXMh);
complex[int] Aftheta = vJftheta(0,XXMh);
complex[int]  Auhf = vJuhf(0,XXMh);
complex[int]  Authetaf = vJuthetaf(0,XXMh);

/*
complex[int] Aitheta = vJitheta(0,XXMh);
complex[int] Aiutheta = vJiutheta(0,XXMh);
complex[int] Aiuh = vJiuh(0,XXMh);
matrix<complex>Aif = vJif(XXMh,XXMh);
*/


////// BUILD B-MATRIX 
varf b([ux,uy,up],[vx,vy,q]) = int2d(th)( (ux*vx+uy*vy) );
matrix<complex> Bff= b(XXMh,XXMh,solver=CG);  //////// see freefem++doc.pdf for the solver 

matrix<complex> OP,OPA,B;
complex shiftOP,shiftOPA;
shiftOP = shift;

//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 5 : solves the problem 
//
string modeEig;

////// BUILD OP-MATRIX=A-lambda*B 
OP =     [
        [-shiftOP, 0, 1.0, 0, 0],
        [   0, -shiftOP, 0, 1.0, 0],
        [auhh, auhtheta, auhuh-shiftOP, 0, Auhf'],
        [0, authetatheta, 0, authetautheta -shiftOP, Authetaf'],
        [0, Aftheta , Afuh , Afutheta , Aff]
    ];
B = [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, Bff]];
///////////////////// CALL TO EIGENVALUE SOLVER 
 
int k;
complex[int] ev(nev); // to store nev eigein values
complex[int,int] EigenVEC(OP.n,nev);

SFEVSOLVE(k,nev,OP,B,shiftOP,ev,EigenVEC);

complex[int] hVec(nev);
complex[int] thetaVec(nev);
complex[int] uhVec(nev);
complex[int] uthetaVec(nev);

int Nmodes = min(k,nev); // nb. de vecteurs propres à post-traiter
XXMh<complex> [int] [eux,euy,eup](nev);   
for (int i=0; i<Nmodes; i++)
{
    [hVec[i],thetaVec[i],uhVec[i],uthetaVec[i],eux[i][]] = EigenVEC(:,i);
    cout << " h " << hVec[i] << " theta " << thetaVec[i] << " uh " << uhVec[i] << " utheta " << uthetaVec[i] << endl;
};

//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 6 : post-processing 
//


	string namefile;
    namefile=ffdatadir+"Spectrum.txt";
    ofstream fileVP1(namefile); 
	
	for (int i=0;i<nev;i++)
	{
       fileVP1 << real(ev[i]) << " " << imag(ev[i]) << " " << Re << " " << 0 << " " << real(shift) << " " << imag(shift) << endl;
       	cout << "$$ Valeur propre : " << i+1 << "  : " << ev[i] << endl;
        namefile=ffdatadir+"Eigenmode"+(i+1);
 		 ux[] = eux[i][];
 		 NormalizeMode(u); 
 		  {
 		  ofstream fileMode(namefile+".txt");
 		  fileMode << ux[]; 
 		  fileMode << endl << real(ev[i]) << endl << imag(ev[i])  << endl;
 		  }
 		 cout << "$$ Writing eigenmode in file " << namefile << endl;
 		 SFWriteMode(namefile+".ff2m",u,ev[i],shift,"D",1);	 // MACRO DEFINED in StabFem_Macros.edp
 		 
 	};





cout << "$$$$ SUCCESSFULLY LEAVING Stab2D.edp " << endl ;

