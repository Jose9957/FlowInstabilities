//
//  PROGRAM Harmonic_Acoustic.edp
//  computation of a linear harmonically forced problem for a single or multiple choices of omega
//
//	This solver uses the complex mapping ; 
//  The parameters of the complex mapping (ParamMap###) are defined in a file "Param_Mapping.edp" 
//
//  INPUT PARAMETERS (now managed using getARGV)
//      'CM' -> boundary condition ("SOMMERFELD" or "CM")
//   	'typecalc' -> 'single', 'range', 'rangelog' or 'array'
//          'single' -> computation for a single frequenct (in this case a structure field is produced)
//          'range' -> loop over a range of (real) frequencies
//          'rangelog' -> loop, with log spacing
//          'array' -> user-defined range (possibly complex) (omega1, sigma1, omega2, sigma2, ....)
//  if 'single' the next parameters are:
//       'omega' -> real part of frequency 
//       'sigma' -> imaginary part of frequency 
//  if 'range' or 'logrange' the next parameters are:
//       'omegamin' -> start of loop
//       'omegamax' -> end of loop
//       'Nomega' -> number of points in loop
//  if 'array', you must specify 'N', and then N couples of values (real/imag) 
//
//	INPUT FILES :
//		BaseFlow.txt		-> base flow 
// 		mesh.msh 			->  mesh in Freefem format
//
//  OUTPUT FILES :
//		Impedance.ff2m -> formatted file, structure defined in macro
//		Impedance_Chi##_Re###.txt 
//
// 	ERROR MANAGEMENT : 
//
//  First version : sometime around 2014 ; Redesigned and incorporated in the project in september 2018.

// Note : this version was simplified on feb. 2020 and works only with sommerfeld.
// For other treatments of BC please use 

cout << "$$$$ ENTERING LoopImpedance.edp " << endl << "$$" << endl; 

include "StabFem.idp";

int NNN = 10000;	
string typecalc; 
int Nomega;
complex[int] omegaarray(NNN);
string boundaryCondition ; 

	
cout << "$$ ENTERING Function LinearForcedAcoustic.edp" << endl;
cout << "$$ Selection of parameters : " << endl;

cout << "Type of boundary condition (SOMMERFELD,CM,PML) : " << endl;
boundaryCondition= getARGV("-CM","SOMMERFELD");
cout << "value detected by getARGV : " << boundaryCondition << endl;

//cout << "$$ Type  (single, range, array)  >> " ;
Nomega = getARGV("-Nomega",1);
typecalc = getARGV("-typecalc","range");
if (Nomega==1){ typecalc = "single";};

if(typecalc=="single")
  {
    real omega0 = getARGV("-omega",1.);
    real sigma0 = getARGV("-sigma",0.);
    omegaarray(0)  = omega0+1i*sigma0;
	cout <<  "(omega , sigma) = " << omegaarray(0) << endl;
    Nomega = 1;
  }
	else if(typecalc=="range")
	{
		real omegamin = getARGV("-omegamin",1);
        real omegamax = getARGV("-omegamax",10);
        real omegastep = (omegamax-omegamin)/(Nomega-1);
		cout << "omegamin, omegastep, omegamax : " << omegamin << " , " << omegastep << " , " << omegamax << endl;
		for(int kk=0;kk<Nomega;kk++){omegaarray(kk) = omegamin+kk*omegastep;};
	}
else if(typecalc=="rangelog")
	{
		real omegamin = getARGV("-omegamin",1);
        real omegamax = getARGV("-omegamax",10);
		
		cout << "omegamin, omegamax : " << omegamin << " , " << omegamax << endl;
		for(int kk=0;kk<Nomega;kk++){omegaarray(kk) = omegamin*(omegamax/omegamin)^(kk/(Nomega-1));};
     }
	else if(typecalc=="array")
	{
		real omegar,omegai;
		cout << "$$ Enter successively omega1, sigma1, omega2, sigma2, (...) omegaN, sigmaN  >> " ;
		for(int kk=0;kk<Nomega;kk++)
		{
			cin >> omegar >> omegai; 
			omegaarray(kk) = omegar+1i*omegai;
		};
		cout << endl << "$$ (successfully read " << Nomega << " complex values " << endl;
	}
	else
	{
		cout << " Error : typecalc = " << typecalc << " is not a valid value !" << endl;
		exit(10); 
	};

	mesh th= readmesh(ffdatadir+"mesh.msh");

	real rho = 1;
	real c = 1;
	real Sin = int1d(th,1)(2*pi*x); // surface d'entr??e
	real Z0 = rho*c/Sin;// impedance carateristique du tuyau

	complex Qin ;
	complex k; // nombre d'onde k=omega*c0
			    
	fespace VH(th,P2);
	VH<complex> f,f1,ftrace;
	VH fr,fi,ft,fabs;
	complex Zin, Pin;
    

IFMACRO(!ForcedLinearStatisticsINIT)
macro ForcedLinearStatisticsINIT(namefile)
{			
    ofstream file(namefile+".ff2m");
    file << "### Data generated by Freefem++ ; " << endl;
    file << "Impedance of a axisymmetric acoustic flow" << endl;
    file << "datatype ForcedLinear datastoragemode columns datadescriptors ind,omega_r,omega_i,Z_r,Z_i,R" << endl;
    ofstream fileforces(namefile+".txt");
}
//EOM
ENDIFMACRO

IFMACRO(!ForcedLinearStatistics)
macro ForcedLinearStatistics(namefile)
{
	
	complex Rate = int1d(th,1)(-2*pi*x*dy(f));
	complex pin = -rho*c*1i*k*int1d(th,1)(2*pi*x*f)/Sin;
	/*real Energy = int2d(th)(Rphys(x,y,ParamMap)/abs(Hy(y,ParamMap)*Hx(x,ParamMap))*(abs(ux)^2+abs(ur)^2));*/
	complex Imp = (pin/Rate);
	real reflection = abs((Imp-Z0)/(Imp+Z0))^2;
	cout << ">>>> FORCED ACOUSTIC PROBLEM :  k = " << k << endl;
	cout << ">>>> Debit Q = " << Rate << endl;
	cout << ">>>> DeltaP (= Pression  entree) = " << pin << endl;
	cout << ">>>> IMPEDANCE = P/Q = " << Imp << endl;
	ofstream fileforces(namefile+".txt",append);
	fileforces << ind << " " << real(k) << " " << imag(k) << " " << real(Imp) << " " << imag(Imp)  << " " <<  reflection << endl;	
}
//EOM	
ENDIFMACRO


IFMACRO(!SFWriteForced)
macro SFWriteForced(namefile,f,ev) /* change ev to k after TP UPS */
         {
         ofstream file(namefile);
         file << "### Data generated by Freefem++ ; " << endl;
         file << "FORCED LINEAR RESPONSE for an axisymmetric acoustic problem" << endl;
         file << "datatype " << "ForcedFlow" << " datastoragemode CxP2 datadescriptors Phi " << endl;
         string descriptionFF;
         descriptionFF="complex Lambda complex Z "; 
         file << descriptionFF << endl << endl ;
         file << real(ev) << endl << imag(ev) << endl << endl;   
         complex Rate = 2*pi*int1d(th,1)(dy(f)*x);
         complex Force = 2*pi*int1d(th,1)(x*1i*ev*f);
         complex pin = Force/(2*pi*int1d(th,1)(x)); 
         complex ZZ = (pin/Rate);
         file << real(ZZ) << endl << imag(ZZ) << endl;  
         }
//EOM   
ENDIFMACRO

problem HelmholtzSOMMERFELD(f,f1) =
         int2d(th)( (-(dx(f)*dx(f1)+dy(f)*dy(f1))+k^2*f*f1)*2*pi*x ) // - grad (phi) * grad(phi1) dV 
       - int1d(th,1)(f1*2*pi*x)  // condition d'entr?e
	   + int1d(th,3)((1i*k-1/sqrt(x^2+y^2))*f*f1*2*pi*x) // condition de sortie de Sommerfeld (open domain) 
	   + int1d(th,31)((1i*k)*f*f1*2*pi*x) // condition de sortie de Sommerfeld (1D pipe) 

		  ;


// Initialisation of output files
string namefile = ffdatadir+"LinearForcedStatistics";
ForcedLinearStatisticsINIT(namefile);	


// Loop over omega/k
for(int ind = 0; ind<Nomega; ind++)
{
	k  = omegaarray(ind);

	cout << "$$ Computation of a acoustic forced linear problem  ; " << endl;
	cout << "$$                      wavenumber: k = " << k << endl;	

	
	HelmholtzSOMMERFELD;
	ForcedLinearStatistics(namefile);
	
	
	
	IFMACRO(FREEFEMPLOTS,YES)
	plot(f,cmm="Structure of forced flow for k = "+k,wait=1,fill=1);
	ENDIFMACRO
	
	complex Rate = int1d(th,1)(-2*pi*x*dy(f));
	complex pin = -rho*c*1i*k*int1d(th,1)(2*pi*x*f)/Sin;
	real reflection = abs((Zin-Z0)/(Zin+Z0))^2;
	/*real Energy = int2d(th)(Rphys(x,y,ParamMap)/abs(Hy(y,ParamMap)*Hx(x,ParamMap))*(abs(ux)^2+abs(ur)^2));*/
	complex Imp = (pin/Rate);
	if(Nomega==1)
	{
    ofstream fileout("Champs_P_U_Axe.txt");
    VH yy = y;
    VH<complex> pp = 1i*k*f;
    VH<complex> u = dy(f);
    for(real zz=yy[].min; zz<yy[].max; zz=zz+ (yy[].max-yy[].min)/500)
        {
        fileout << zz << " " << real(pp(0,zz)) << " " << imag(pp(0,zz))  
                     << " " << real(u(0,zz)) << " " << imag(u(0,zz)) << endl; 
        }
    
    ofstream file(ffdatadir+"ForcedFlow.txt");
  	file << f[] ;	
   	file << endl << endl << imag(k) << "   " << -real(k)  << endl;
	SFWriteForced(ffdatadir+"ForcedFlow.ff2m",f,k)
	};

};
// end Loop



cout << "$$$$ LEAVING LoopImpedance.edp " << endl << "$$" << endl; 
	
	
