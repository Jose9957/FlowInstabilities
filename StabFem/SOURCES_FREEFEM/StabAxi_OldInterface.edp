//   
//  PROGRAM Stab_Axi.edp
//	
//	Performs the linear stability analysis of an Axisymmetric flow
//   
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	Re , shift(Re,im) , Symmetry, Type, nev 
//
//   this solver will use either Arnoldi (if nev>1) or simple Shift-invert (if nev=1)
//
//	INPUT FILES :
//		BaseFlow.txt	-> base flow 
// 		mesh.msh 			->  mesh in Freefem format
//  OUTPUT FILES :
//	single-mode calculation :
//		Eigenmode.txt   (txt format for FreeFem)
//      Eigenmode.ff2m  (ff2m format for stabfem)
// 		EigenmodeA.txt  ADJOINT  (txt format for FreeFem)
//      EigenmodeA.ff2m ADJOINT  (ff2m format for stabfem)
//      Sensitivity.txt 
//		Sensitivity.ff2m
//
// multiple-mode calculation :
//  	Eigenmode##.txt   (txt format for FreeFem)
//      Eigenmode##.ff2m  (ff2m format for stabfem)
//
// in all modes :
//		Spectrum.txt -> All computed Eigenvalues
//
// 
// 	ERROR MANAGEMENT : 
//      if shift-invert iteration diverges, Error code is 202.
//

include "StabFem.idp";

include "Param_Mapping.edp";

////////////////////////////////////////////////////////////////////
//
//		CHAPTER 1 : selection of parameters		
//

	cout << "$$ ENTERING StabAxi.edp " << endl << "$$" << endl; 
	
	real ReARGV = getARGV("-Re",-1);
	if(ReARGV!=-1)
		{ cout << "detected optional argument : Re = "<< ReARGV << endl; }
		 
	real Re;                  
    complex shift;
    int m;
    string iadjoint; 
    int nev;

IFMACRO(!SFInputParametersStab)
//TODO : remove Re from this macro
macro SFInputParametersStab() 
	cout << "$$ Enter Reynolds >> "; 
	cin  >> Re;
	cout << Re << endl;   
	cout << "$$ Enter SHIFT (re,im) :   " << endl; 
	real shiftr,shifti;	
	cin  >> shiftr >> shifti;
	shift = 1i*shifti+shiftr;
	cout << "$$ Wavenumber ? " << endl;
	cin >> m;
	cout << " Direct (D), Adjoint (A), or both+sensitivity (S) ?" << endl;
	cin >> iadjoint;	
	cout << "$$ Enter nev ? (will use simple shift-invert if nev = 1)" << endl;
    cin >> nev ;
//EOM
ENDIFMACRO
SFInputParametersStab;
    
	cout << "$$ ### PARAMETERS SELECTED : " << endl;
	cout << "$$ Re = " << Re<< endl;
	cout << "$$ shift = " << shift << endl;
	cout << "$$ wavenumber m = " << m << endl;

	
	
if (iadjoint =="D") {cout << "$$ DIRECT PROBLEM" << endl;}
	else if (iadjoint =="A") {cout << "$$ ADJOINT PROBLEM" << endl;}
	else if (iadjoint =="S"||iadjoint =="E") {cout << "$$ DIRECT+ADJOINT PROBLEM INCLUDING SENSITIVITY/ENDOGENEITY" << endl;}
	else {cout << "$$ ERROR WHEN SELECTING PROBLEM TYPE" << endl;};

cout << "$$ nev = " << nev << endl;

	
////////////////////////////////////////////////////////////////////
//
//		CHAPTER 2 : read input files	
//

// 
// First read mesh
//

mesh th=readmesh(ffdatadir+"mesh.msh");                    ///// Read mesh

//
// Declare FEspaces
//

IFMACRO(!MESHPERIODICITY)
macro MESHPERIODICITY() [[41,y],[42,y]] //EOM
ENDIFMACRO
// In case there are boundaries labelled 41,42 they are handled as periodic ; otherwise this definition has no effect

fespace Xh(th,P2,periodic=MESHPERIODICITY);             ////// f.e. space for vel.
fespace Mh(th,P1,periodic=MESHPERIODICITY);            ////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1],periodic=MESHPERIODICITY); ////// f.e. space for triplet [u,v,p]
fespace XXXMh(th,[P2,P2,P2,P1],periodic=MESHPERIODICITY); ////// f.e. space for triplet [u,v,p]
XXXMh<complex> [ux,ur,uphi,up];                 ///////  -> unknown for the Navier-Stokes problem
XXXMh [vx,vr,vphi,vp];                 ///////  -> test for Navier-Stokes
XXXMh [Ubx,Ubr,Ubphi,Ubp];          ///////  -> Base Flow
XXMh [Ubaxix,Ubaxir,Ubaxip];          ///////  -> Base Flow (in case we start with a 2-component one)

//
//  Load baseflow   
//
int NdimUVP = Ubaxix[].n;
int NdimUVWP = Ubx[].n;
int NdimBaseFlow;
real Reans;
SFcheckfile("BaseFlow.txt",NdimBaseFlow)
if(NdimBaseFlow == NdimUVP) 
{
	cout << "$$ Ndim = " << NdimUVP << " : reading UVP baseflow " << endl;
	ifstream file(ffdatadir+"BaseFlow.txt");
	file >> Ubaxix[];
	[Ubx,Ubr,Ubphi,Ubp] = [Ubaxix,Ubaxir,0,Ubaxip];
	file >> Reans;
}
else if(NdimBaseFlow == NdimUVWP) 
{
	cout << "$$ Ndim = " << NdimUVWP << " : reading UVWP baseflow " << endl;
	ifstream file(ffdatadir+"BaseFlow.txt");
	file >> Ubx[]; 
	file >> Reans;
}
else 
{
	SFerror("Wrong dimension For BaseFlow.txt file");
	exit(7);
};
if(Reans!=Re) 
{
	SFwarning("Re differs from the one of the read base flow (Reans = " +Reans
	+" ); is that really what you mean ???");
};

real nu = 1/Re;  
    // If Nu is something else than 1/Re define a macro CUSTOMnu in your Macros_StabFem.idp file
    IFMACRO(CUSTOMnu)
    nu = CUSTOMnu;
    ENDIFMACRO	


//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 3 : Customizable macros 	
//

// A. (to disable coordinate mapping if not relevant)
IFMACRO(!dX)
macro dX(a) dx(a) //EOM
macro dY(a) dy(a) //EOM
macro JJJ   y //EOM
macro Yphys()  y //EOM
ENDIFMACRO

// B. Boundary conditions and normalization
IFMACRO(!BoundaryconditionsStability)
macro BoundaryconditionsStability(u,v,m)
	           on(1,2,21,22,23,u#x=0,u#r=0.0,u#phi=0.0)
	         + on(5,u#x=0.0)+on(4,u#r=0)
	         + int1d(th,6)(u#x*v#x*1e30*(abs(m)>0)+(u#r*v#r)*1e30*(abs(m)!=1))   
             + int1d(th,6)((u#phi*v#phi)*1e30*(abs(m)!=1)) 
//EOM
ENDIFMACRO

IFMACRO(!NormalizeMode)
macro NormalizeMode(u)
{
real NORM = int2d(th)((abs(u#x)^2+abs(u#r)^2+abs(u#phi)^2)*y);
u#x[] = u#x[]/(NORM+1e-12);
}
//EOM
ENDIFMACRO

// C. Postprocessing
IFMACRO(!SFWriteMode)	
macro SFWriteMode(namefile,u,ev,shift,m,typeFlow,iter)
		 {
		 ofstream file(namefile);
   		 fespace p1forff2m(th,P1); 
    	 p1forff2m<complex> vort1;  		 
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << " Eigenmode for Axisymmetric flow (written with generic macro)" << endl;
    	 file << "datatype " << typeFlow << "  datastoragemode CxP2P2P2P1.2 datadescriptors ux,ur,uphi,p,lambdar,lambdai" << endl;
    	 string descriptionFF;
    	 descriptionFF="real* Re int* m complex* eigenvalue complex shift int iter P1c vort1"; 
	     file << descriptionFF << endl << endl ; 
		 file << Re  << endl << m << endl << real(ev) << " " << imag(ev) << " " ; 
		 file << real(shift) << " " << imag(shift) << " " << iter << endl << endl;
		 vort1=-dY(u#x)+dX(u#r);
		 for (int j=0;j<vort1[].n ; j++) {file << real(vort1[][j]) << " " << imag(vort1[][j]) << endl;};		
		};
//EOM	
ENDIFMACRO



//real eps = 1e-12; // desingularisation term for matrix B, useful with some solvers

// WARNING : termes 1/y doivent Ãªtre 1/Yphys !

macro div(im,u) (dX(u#x)+dY(u#r)+u#r/y+im/y*u#phi)// macro for divergence 
macro Grad(im,u) [
			[dX(u#x), dY(u#x),  im/y*u#x ], 
			[dX(u#r), dY(u#r),  im/y*u#r-u#phi/y],
			[dX(u#phi),dY(u#phi), im/y*u#phi+u#r/y ]
			] // macro for vecocity gradient tensor
macro D(im,u) [	
				[dX(u#x), 				.5*(dX(u#r)+dY(u#x)),  .5*(im/y*u#x+dX(u#phi)) ], 
				[.5*(dX(u#r)+dY(u#x)), 	dY(u#r),				.5*(im/y*u#r-u#phi/y+dY(u#phi))],
				[.5*(im/y*u#x+dX(u#phi)),  .5*(im/y*u#r-u#phi/y+dY(u#phi)), im/y*u#phi+u#r/y]
				] // macro for rate-of-deformation tensor
macro Conv(ima,ua,imb,ub,v) ( 
              [v#x,v#r,v#phi]'*(Grad(ima,ua)*[ub#x,ub#r,ub#phi] + Grad(imb,ub)*[ua#x,ua#r,ua#phi])
              			) // macro for mutual convection operator // NB bug corrected : warning transpose conjugate !



//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 4 : declare the problems 	
//


// varf for generalized eigenvalue problem: 

varf   LNSE ([ux,ur,uphi,up],[vx,vr,vphi,vp]) =
   int2d(th)( 
   			(-2*nu*(D(1i*m,u):D(-1i*m,v))
             + up*div(-1i*m,v)
             + div(1i*m,u)*vp
             - Conv(1i*m,u,0,Ub,v)
             //+eps*vp*up
             )*JJJ
             )
 + int2d(th)( -shift*(ux*vx+ur*vr+uphi*vphi)*JJJ )
 + BoundaryconditionsStability(u,v,m);
 
varf   LNSEadjoint ([ux,ur,uphi,up],[vx,vr,vphi,vp]) =
   int2d(th)( 
   			(-2*nu*(D(1i*m,u):D(-1i*m,v))
             + up*div(-1i*m,v)
             + div(1i*m,u)*vp
             - Conv(-1i*m,v,0,Ub,u)
             //+eps*vp*up
             )*JJJ
             )
 + int2d(th)( -conj(shift)*(ux*vx+ur*vr+uphi*vphi)*JJJ ) // warning that shift/eigenvalues of adjoint are complex conjugates of direct !
 + BoundaryconditionsStability(u,v,m); 

////// BUILD B-MATRIX //////////////////////////////////////////////////////////////
varf b([ux,ur,uphi,up],[vx,vr,vphi,vp]) = int2d(th)( (ux*vx+ur*vr+uphi*vphi)*JJJ );
matrix<complex> B= b(XXXMh,XXXMh,solver=CG);  //////// see freefem++doc.pdf for the solver 
////////////////////////////////////////////////////////////////////////////////////

matrix<complex> OP,OPA;
complex shiftOP,shiftOPA;

//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 5 : solves the problem 
//

cout << "$$ Building matrices..." ;
////// BUILD OP  = A-lambda*B //////
if(iadjoint=="D")
{ OP=LNSE(XXXMh,XXXMh,solver=sparsesolver); shiftOP = shift; }
else if(iadjoint=="A")
{ OP=LNSEadjoint(XXXMh,XXXMh,solver=sparsesolver); shiftOP = conj(shift); }
else if(iadjoint=="S") 
{ cout << "$$ WARNING : in this program option S will not work any more" << endl; 
  OP=LNSE(XXXMh,XXXMh,solver=sparsesolver); shiftOP = shift;
  iadjoint=="D"; };
cout << "$$ ... done !" << endl;
////////////////////////////////////////////////////////////////////////////////////



int k;
complex[int] ev(nev); // to store nev eigein values
complex[int,int] EigenVEC(OP.n,nev);

SFEVSOLVE(k,nev,OP,B,shiftOP,ev,EigenVEC);

XXXMh<complex> [int] [eux,eur,euphi,eup](nev);
int Nmodes = min(k,nev);
for (int i=0; i<Nmodes; i++)
{
	eux[i][] = EigenVEC(:,i);
};


	string namefile;
    namefile=ffdatadir+"Spectrum.txt";
    ofstream fileVP1(namefile); 
	
	for (int i=0;i<Nmodes;i++)
	{
       fileVP1 << real(ev[i]) << " " << imag(ev[i]) << " " << Re << " " << 0 << " " << real(shift) << " " << imag(shift) << endl;
       	cout << "$$ valeur propre : " << i+1 << "  : " << ev[i] << endl;

 		 namefile=ffdatadir+"Eigenmode"+(i+1);
 		 {ofstream fileMode(namefile+".txt");
 		  ux[] = eux[i][];
 		  NormalizeMode(u);
 		  fileMode << ux[]; 
 		  fileMode << endl << endl << Re << endl << endl 
 		           << real(ev[i]) << "   " << imag(ev[i])  << endl;
 		  }
 		 cout << "$$ Writing eigenmode in file " << namefile << endl;
 		 SFWriteMode(namefile+".ff2m",u,ev[i],shift,m,"EigenModeD",1);	 // MACRO DEFINED in StabFem_Macros.edp
 		 
 	};



//////////////////////////////////////////////////////////////////////////////////////////////////////
//
// CHAPTER 7 : structural sensitivity
// REMOVED FROM THIS FILE !
//


cout << "$$ SUCCESSFULLY LEAVING Stab_Axi.edp " << endl;
