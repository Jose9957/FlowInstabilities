/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//
//            DIRECT COMPUTATION OF STABILITY thRESHOLD FOR AXI 
//
//		Adapted from 2D case, D. Fabre,	on oct. 8 2018
//
//	Input files :
//		BaseFlow_guess.txt 		(last line is Re)
//		Eigenmode_guess.txt		(two last lines are sigma,omega)
//
//	Output files :
//		Baseflow_threshold.txt / .ff2m
//		Eigenmode_threshold.txt / .ff2m
//
/////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

include "StabFem.idp";



mesh th=readmesh(ffdatadir+"mesh.msh");                    ///// Read mesh

/////////////////////////////////////////////////////////////////////////////////

fespace Xh(th,P2);               ////// f.e. space for vel.
fespace Mh(th,P1);               ////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1]);     ////// f.e. space for triplet [u,v,p]
fespace XXXMh(th,[P2,P2,P2,P1]); ////// f.e. space for quadruplet [u,v,w,p]

macro DEF(u) [u#x,u#r,u#phi,u#p] // Macro to define composite fields


XXMh [ubx,ubr,ubp] ; // base flow (for the moment 2 vel. components) 
XXXMh<complex> DEF(u1); // base flow and eigenmode (read from file)
XXXMh DEF(u0), DEF(u1r), DEF(u1i); // unknowns of the problem : bf and re/im parts of eigenmode
XXXMh DEF(du0), DEF(du1r), DEF(du1i); // increments
XXXMh DEF(v); // test functions
XXXMh DEF(dumb); // dumb (not used but necessary to build vectors from linear part of varf) 

real Re, dRe;
real omega, omegaM, sigmaM, domega;
     
macro div(im,u) (dx(u#x)+dy(u#r)+u#r/y+im/y*u#phi)// macro for divergence 

macro Grad(im,u) 
			[
			[dx(u#x), dy(u#x),  im/y*u#x ], 
			[dx(u#r), dy(u#r),  im/y*u#r-u#phi/y],
			[dx(u#phi),dy(u#phi), im/y*u#phi+u#r/y ]
			] 
// macro for velocity gradient tensor

macro D(im,u) [	
				[dx(u#x), 				.5*(dx(u#r)+dy(u#x)),  .5*(im/y*u#x+dx(u#phi)) ], 
				[.5*(dx(u#r)+dy(u#x)), 	dy(u#r),				.5*(im/y*u#r-u#phi/y+dy(u#phi))],
				[.5*(im/y*u#x+dx(u#phi)),  .5*(im/y*u#r-u#phi/y+dy(u#phi)), im/y*u#phi+u#r/y]
				] 
// macro for rate-of-deformation tensor
				
macro Conv(ima,ua,imb,ub,v) ( 
              (Grad(ima,ua)*[ub#x,ub#r,ub#phi] + Grad(imb,ub)*[ua#x,ua#r,ua#phi])'*[v#x,v#r,v#phi]
              			) 
// macro for mutual convection operator


macro NS(nu,u,v) 
		(
		 -2*nu*(D(0,u):D(0,v))
        + u#p*div(0,v)
        + v#p*div(0,u)
        - .5*Conv(0,u,0,u,v)
        +1e-20*u#phi*v#phi
        )
//EOM
     
macro NSL(nu,U,m,u,v) 
		(
		-2*nu*(D(m,u):D(m,v))
        + u#p*div(m,v)
        + div(m,u)*v#p
        - Conv(0,U,m,u,v)
        )
//EOM
       
       
macro Boundaryconditions(u,v,m)
	           on(1,u#x=0.0,u#r=0.0,u#phi=0.0) 
             + on(2,21,22,23,u#x=0.0,u#r=0.0,u#phi=0.0)
             + int1d(th,6)(u#x*v#x*1e30*(abs(m)!=1)+(u#r*v#r+u#phi*v#phi)*1e30*(abs(m)>0))
// 

macro Lift(nu,im,ux,ur,uphi,up)   
	(
	int1d(th,2,21,22,23)(up*N.y*2*pi*y -(nu)*(2*dy(ur)*N.y+(dx(ur)+dy(ux))*N.x)*2*pi*y 
	+im*(nu)*( (dy(uphi)-uphi/y)*N.y + (dx(uphi))*N.x ) *pi*y ) 
	)
//EOM



       

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
///////////  Load baseflow and eigenmode  for starting point     ////////////////////////
{
ifstream cbin(ffdatadir+"BaseFlow_guess.txt");
cbin >> ubx[] >> Re;
}

{
		cout << "starting  from mode in file Eigenmode_guess.txt" << endl;
		ifstream cbin(ffdatadir+"Eigenmode_guess.txt");
		cbin >> u1x[] >>  sigmaM >> omegaM; 
		complex liftnorm = Lift(1/Re,1i,u1x,u1r,u1phi,u1p);
		u1x[] = .5/liftnorm*u1x[]; // normalize so that lift is 0.5
};
cout << " Reading baseflow and mode with Re = " << Re << " ; sigma = " << sigmaM << " ; omega = " << omegaM << endl;

DEF(u0) = [ubx, ubr, 0, ubp]; 
DEF(u1r) = [real(u1x), real(u1r), -imag(u1phi), real(u1p)]; 
DEF(u1i) = [imag(u1x), imag(u1r), real(u1phi), imag(u1p)]; 

cout << endl << " Check normalization : " << endl; 
complex liftnorm = Lift(1/Re,1i,u1x,u1r,u1phi,u1p);
cout << " Lift complex = " << liftnorm  << endl;
cout << " (Real,imag) : " << Lift(1/Re,1,u1rx,u1rr,u1rphi,u1rp) << " ; " << Lift(1/Re,1,u1ix,u1ir,u1iphi,u1ip) << endl;

// this set works for the divergence ?


real[int] RHS;
real NLOpF4,NLOpF5;
omega = omegaM;
real sigma = sigmaM;
real nu=1/Re;

////////////////////////////////////////////////////////////////////////////////
//
// In description, the blocks are called NxM, where N is the numering of the equation and M that of the unknown
// N = 1 steady NS for base flow ; N=2 real part of linear equation for eigenmode ; N = 3 imaginary part; N = 4 and 5 normalization  
// M = 1 base-flow, M=2 eigenmode-real ; M = 3 eigenmode-imag ; M = 5 domega ; M=4 dRe 
//
// in the assembly blocks [1-3]x[1-3]  corresponding to the fluid unknows are built with varfs NLOpF and LinOpFF 
//
/////////////////////////////////////////////////////////////////////////////////

cout << " Taille du probleme : " << 3*ubx[].n+2 << endl;

/////////////////////////////////////////////////////////////////////////////////
//////// varf for RHS 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for nonlinear term..." << endl;

// block 1 : NS for base flow
varf NLOpF1(DEF(dumb),DEF(v)) =
   int2d(th)( NS(nu,u0,v)*y )		
 	;
 			
// block 2 : base-flow effect on real part of eigenmode			
varf NLOpF2(DEF(dumb),DEF(v)) =
	 int2d(th)( NSL(nu,u0,1,u1r,v)*y )
	+ int2d(th) ( omega * (u1ix*vx+u1ir*vr+u1iphi*vphi)*y ) 
//	- int2d(th) ( sigma * (u1rx*vx+u1rr*vr+u1rphi*vphi)*y );			
	;
	
// block 3 : base-flow effect on imag part of eigenmode			
varf NLOpF3(DEF(dumb),DEF(v)) =
	 int2d(th)( NSL(nu,u0,1,u1i,v)*y  )              
	- int2d(th) ( omega * (u1rx*vx+u1rr*vr+u1rphi*vphi)*y )
//	- int2d(th) ( sigma * (u1ix*vx+u1ir*vr+u1iphi*vphi)*y ); 
	;
	
cout << " defining operators for nonlinear term... done" << endl;

	




/////////////////////////////////////////////////////////////////////////////////
//////// varf for Linear part 

////////////////////////////////////////////////////////////////////////////////////
cout << " defining operators for linear term..." << endl;


// block 1-1 : NS for base flow
varf LinOp11(DEF(du0),DEF(v)) =
   	int2d(th)( NSL(nu,u0,0,du0,v)*y )        
 	+ Boundaryconditions(du0,v,0);

// block 1-4 : effect of dRe on base-flow equations
varf LinOp14(DEF(dumb),DEF(v))
	= int2d(th)(2/Re^2*(D(0,u0):D(0,v))*y);

 			
// block 2-1 : base-flow effect on real part of eigenmode			
varf LinOp21(DEF(du0),DEF(v)) =
	 int2d(th)( - Conv(0,du0,1,u1r,v)*y );
             
// block 2-2 : Stokes operator on real part of eigenmode             
varf LinOp22(DEF(du1r),DEF(v)) =
             int2d(th)( NSL(nu,u0,1,du1r,v)*y )
             - int2d(th)(sigma*(du1rx*vx+du1rr*vr+du1rphi*vphi)*y)
 			+ Boundaryconditions(du1r,v,1);
 			
// block 2-3 : effect of omega on real part of equation for eigenmode
varf LinOp23(DEF(du1i),DEF(v)) =
			 int2d(th)(omega*(du1ix*vx+du1ir*vr+du1iphi*vphi)*y);

// block 2-4 : effect of dRe on eigenmode-re equations
varf LinOp24(DEF(dumb),DEF(v)) = 
	int2d(th)(2/Re^2*(D(1,u1r):D(1,v))*y);
//	- int2d(th)((u1rx*vx+u1rr*vr+u1rphi*vphi)*y);;

// block 2-5 : effect of domega on eigenmode-real equations
varf LinOp25(DEF(dumb),DEF(v)) =  
	int2d(th)((u1ix*vx+u1ir*vr+u1iphi*vphi)*y);
	
	
// block 3-1 : base-flow effect on imag part of eigenmode			
varf LinOp31(DEF(du0),DEF(v)) =
	 int2d(th)( - Conv(0,du0,1,u1i,v)*y );  
	             
// block 3-2 : effect of omega on imag part of equation for eigenmode
varf LinOp32(DEF(du1r),DEF(v)) =
			 int2d(th)(-omega*(du1rx*vx+du1rr*vr+du1rphi*vphi)*y);
			 			
// block 3-3 : Stokes operator on real part of eigenmode             
varf LinOp33(DEF(du1i),DEF(v)) =
             int2d(th)( NSL(nu,u0,1,du1i,v)*y )
 		   + Boundaryconditions(du1i,v,1)
 		   - int2d(th)(sigma*(du1ix*vx+du1ir*vr+du1iphi*vphi)*y)
 		   ;

// block 3-4 : effect of dRe on eigenmode-imag equations
varf LinOp34(DEF(dumb),DEF(v)) = 
	int2d(th)(2/Re^2*(D(1,u1i):D(1,v))*y);
//	-int2d(th)((u1ix*vx+u1ir*vr+u1iphi*vphi)*y);;		
	
// block 3-5 : effect of domega on eigenmode-imag equations
varf LinOp35(DEF(dumb),DEF(v)) = 
    int2d(th)(-(u1rx*vx+u1rr*vr+u1rphi*vphi)*y);

// block 4-2 : lift of real part of eigenmode-re
varf LinOp42(DEF(dumb),DEF(du1r))	
	= Lift(1/Re,1,du1rx,du1rr,du1rphi,du1rp);
	
// block 5-3 : lift of real part of eigenmode-re
varf LinOp53(DEF(dumb),DEF(du1i))	
	= Lift(1/Re,1,du1ix,du1ir,du1iphi,du1ip);

cout << " defining operators for linear term... done" << endl;
cout << "dimensions of the operator and of the RHS : " << RHS.n <<  endl << endl;



///// BEGINING OF NEWTON LOOP
domega = 1;
int i=1;
while(abs(domega)>1e-8&&abs(domega)<10)
	{ 
	cout << "Newton loop step " << i << endl;

	cout << "constructing rhs... " << i << endl;
	real[int] RHSF1(u0x[].n), RHSF2(u0x[].n), RHSF3(u0x[].n); 
	RHSF1 = NLOpF1(0,XXXMh);
	RHSF2 = NLOpF2(0,XXXMh);
	RHSF3 = NLOpF3(0,XXXMh);	
	NLOpF4 = Lift(1/Re,1,u1rx,u1rr,u1rphi,u1rp)-.5; 
	NLOpF5 = Lift(1/Re,1,u1ix,u1ir,u1iphi,u1ip)-0; 	
	RHS = [RHSF1, RHSF2, RHSF3, NLOpF4, NLOpF5];		
	cout <<  "max RHS : " << RHSF1.l2 <<  ", " << RHSF2.l2 <<  ", " << RHSF3.l2 <<  ", " << NLOpF4 <<  ", " << NLOpF5 << endl;  



cout << " Assembling matrix..." << endl;
matrix matLinOp11 = LinOp11(XXXMh,XXXMh);
real[int] matLinOp14 = LinOp14(0,XXXMh);

matrix matLinOp21 = LinOp21(XXXMh,XXXMh);
matrix matLinOp22 = LinOp22(XXXMh,XXXMh);
matrix matLinOp23 = LinOp23(XXXMh,XXXMh);
real[int] matLinOp24 = LinOp24(0,XXXMh);
real[int] matLinOp25 = LinOp25(0,XXXMh);

matrix matLinOp31 = LinOp31(XXXMh,XXXMh);
matrix matLinOp32 = LinOp32(XXXMh,XXXMh);
matrix matLinOp33 = LinOp33(XXXMh,XXXMh);
real[int] matLinOp34 = LinOp34(0,XXXMh);
real[int] matLinOp35 = LinOp35(0,XXXMh);			


real[int] matLinOp42 = LinOp42(0,XXXMh);
real[int] matLinOp53 = LinOp53(0,XXXMh);

real LinOp44 = Lift(-1/Re^2,1,u1rx,u1rr,u1rphi,0);
real LinOp54 = Lift(-1/Re^2,1,u1ix,u1ir,u1iphi,0);


matrix LinOp = [	[matLinOp11, 	0, 			0,	  matLinOp14, 	  0    	 ],
					[matLinOp21,matLinOp22,matLinOp23,matLinOp24, matLinOp25 ],
					[matLinOp31,matLinOp32,matLinOp33,matLinOp34, matLinOp35 ],
					[	0	   ,matLinOp42',	 0,		LinOp44, 	0 		],
					[	0	   ,	0		,matLinOp53',  LinOp54,	0  		]	  
				  ];
cout << " Assembling matrix... done" << endl;

cout << " LU-ing matrix..." << endl;
set(LinOp,solver=sparsesolver);
cout << " LU-ing matrix... done" << endl;



	cout << " solving BIG problem..." << endl;
	real[int] dX(LinOp.n);
	dX = LinOp^-1*RHS;
	[du0x[], du1rx[], du1ix[], dRe, domega] = dX;
	u0x[] -= du0x[];
	u1rx[] -= du1rx[];
	u1ix[] -= du1ix[];
	Re -= dRe;
//    sigma -=dRe;
	omega -= domega;

	cout << "dRe ; domega : " << -dRe << " " << -domega << endl;
	cout << "Re ; omega : " << Re << " " << omega << endl;
	cout << "sigma : " << sigma << endl;
	
IFMACRO(FREEFEMPLOTS,YES)
	XXXMh [Tx,Ty,Tz,Tp];
	Tx[] = RHSF1; 
	plot(Tx,value=1,wait=1,cmm="RHS 0");
	plot(Tz,value=1,wait=1,cmm="RHS 0 phi");
	plot(Tp,value=1,wait=1,cmm="RHS 0 : div");
	cout << "Residuals at (12,.1) for 0 : " << Tx(12,.1) << " ; "  << Ty(12,.1) << " ; "<< Tz(12,.1) << " ; "<< Tp(12,.1) << endl;
	
	
	Tx[] = RHSF2; 
	plot(Tx,value=1,wait=1,cmm="RHS 1");
	plot(Tz,value=1,wait=1,cmm="RHS 1 phi");
	plot(Tz,value=1,wait=1,cmm="RHS 1 : div");
	cout << "Residuals at (12,.1) for r : " << Tx(12,.1) << " ; "  << Ty(12,.1) << " ; "<< Tz(12,.1) << " ; "<< Tp(12,.1) << endl;
	
	Tx[] = RHSF3; 
	plot(Tx,value=1,wait=1,cmm="RHS 2");
	plot(Tz,value=1,wait=1,cmm="RHS 2 phi");
	plot(Tz,value=1,wait=1,cmm="RHS 2 : div");
	cout << "Residuals at (12,.1) for r : " << Tx(12,.1) << " ; "  << Ty(12,.1) << " ; "<< Tz(12,.1) << " ; "<< Tp(12,.1) << endl;
	
	plot(du0x,value=1,wait=1);
	plot(du1rx,value=1,wait=1);
	plot(du1ix,value=1,wait=1);
	plot(u0x,value=1,fill=1,wait=1);
	plot(u1rx,value=1,fill=1,wait=1);
	plot(u1ix,value=1,fill=1,wait=1);
ENDIFMACRO
	i++;
	};
	
	
	
// END OF NEWTON LOOP ; BEGINNING OF POSTPROCESSING	
	
	
	if(abs(domega)>10) 
	{
	ofstream file("ffdatadir+BaseFlow_threshold.ff2m");
	file << "### Data generated by Freefem++ ; " << endl;
    file << "BaseFlow" << endl;
    file << "Format : " << endl;	
	file << "int iter " << endl;
	file << -1 << endl;
	cout << " Newton Loop DIVERGED " << endl;	
	}
	
	else	
	{
	cout << " Newton Loop converged " << endl;
	cout << " >>> Rec = " << Re << endl;
	cout << " >>> Omegac = " << omega << endl;	


/// GENERATES OUTPUT FILES


{
	ofstream file(ffdatadir+"BaseFlow_threshold.txt");
	file << u0x[]; 
    file << endl << endl << Re;
}; 

 cout << "Writing base flow in file BaseFlow_threshold.ff2m" << endl;
 SFWriteBaseFlow(ffdatadir+"BaseFlow_threshold.ff2m",u0,"BaseFlow",i);


{
    cout << u1x(1,1) << " " << u1r(1,1) << endl;
    ofstream file(ffdatadir+"Eigenmode_threshold.txt");
    [u1x,u1r,u1phi,u1p] = [u1rx+1i*u1ix,u1rr+1i*u1ir,-u1iphi+1i*u1rphi,u1rp+1i*u1ip]; 
  	file << u1x[] ;	
  	file << endl << endl << endl << 0 << endl << omega  << endl;
}


 	cout << "Writing eigenmode in file Eigenmode_threshold.ff2m" << endl;
 	string namefileFF=ffdatadir+"Eigenmode_threshold.ff2m";
 	string typeDA = "D";

 	SFWriteMode(namefileFF,u1,1i*omega,1i*omegaM,1,"EigenMode"+typeDA,i); 
 		
};
cout << "	===> FindThresholdAxi.edp correctly ended" << endl << endl;






