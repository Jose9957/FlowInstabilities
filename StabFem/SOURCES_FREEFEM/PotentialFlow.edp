
		cout << "$$$$ ENTERING Newton_2D.edp " << endl << "$$" << endl; 

include "StabFem.idp"


//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 1 : parameters		
//

// 1A : Generic Parameter : Re
    real Gamma,alpha;

//cout << "Enter alpha (degrees) ? " << endl;
//cin >> alpha;
alpha = getARGV("-alpha",0.);
cout << "Detected optional argument alpha (degrees) = "<< alpha << endl;

//cout << "Enter Gamma ? " << endl;
//cin >> Gamma;

Gamma = getARGV("-Gamma",0.);
cout << "Detected optional argument Gamma = "<< Gamma << endl;


mesh th=readmesh(ffdatadir+"mesh.msh");
		
fespace Xh(th,P2); 
Xh Phic,Phi,Phia,test,Ux,Uy,P;

solve Potential(Phic,test) = int2d(th)(dx(Phic)*dx(test)+dy(Phic)*dy(test)) 
+ int1d(th,2)(Gamma/(2*pi*(x^2+y^2))*(N.x*y-N.y*x)*test)
+ on(1,3,Phic=x*cos(pi*alpha/180)+y*sin(pi*alpha/180));

Phia = Gamma*atan2(-y,-x);
Phi = Phia+Phic;


Ux = dx(Phic)+(Gamma/2/pi)*y/(x^2+y^2);
Uy = dy(Phic)-(Gamma/2/pi)*x/(x^2+y^2);
P = -(Ux^2+Uy^2)/2+1/2.;

real Kutta = Ux(.75,.002)-Ux(.75,-.002);
cout << " Kutta Parameter : " << Kutta << endl;

real Fx = int1d(th,2)(P*N.x);
real Fy = int1d(th,2)(P*N.y);
real Mz = int1d(th,2)(P*(N.y*x-N.x*y));
real Drag = Fx*cos(alpha*pi/180)+Fy*sin(alpha*pi/180);
real Lift = Fx*sin(alpha*pi/180)-Fy*cos(alpha*pi/180);

cout << "Fx = " << Fx << " ; Fy = " << Fy << endl; 
cout << "Lift = " << Lift << " ; Drag = " << Drag << endl; 

// Plots with ffglut
plot(Phic,cmm="Phic",fill=1,value=1,wait=1);
plot(Phi,cmm="Phi",fill=1,value=1,wait=1);
plot([Ux,Uy],cmm="Ux,Uy",fill=1,value=1,wait=1);
plot(P,cmm="P",fill=1,value=1,wait=1);


// output file for StabFem : Data.txt and Data.ff2m
{	
    cout << " OUTPUT : Data.txt and Data.ff2m" << endl;
	ofstream filetxt(ffdatadir+"Data.txt");
	filetxt << Phi[] << endl;

	
	ofstream file(ffdatadir+"Data.ff2m");
   	{
	file << "### Data generated by Freefem++ ; " << endl;
    file << "Potential flow around an airfoil" << endl;
    file << "datatype " << " PotentialFlow " << " datastoragemode ReP2 datadescriptors phi" << endl;
	file << "real* alpha real* Gamma real* Kutta real* Fx real* Fy real* Mz P2 ux P2 uy P2 p int iter" << endl ;
	file << alpha << endl;	
	file << Gamma << endl;	
	file << Kutta << endl;
    file << Fx << endl;
    file << Fy << endl;
    file << Mz << endl;
			for (int j=0;j<Ux[].n ; j++) file << Ux[][j] << endl;
			for (int j=0;j<Uy[].n ; j++) file << Uy[][j] << endl;
			for (int j=0;j<P[].n ; j++) file << P[][j] << endl;
	file << 1 << endl;
	};
}

// for legacy (to be removed): alternative names PotentialFlow.txt and PotentialFlow.ff2m
{	
	ofstream filetxt(ffdatadir+"PotentialFlow.txt");
	filetxt << Phi[] << endl;

	
	ofstream file(ffdatadir+"PotentialFlow.ff2m");
   	{
	file << "### Data generated by Freefem++ ; " << endl;
    file << "Potential flow around an airfoil" << endl;
    file << "datatype " << " PotentialFlow " << " datastoragemode ReP2 datadescriptors phi" << endl;
	file << "real* alpha real* Gamma real* Kutta real* Fx real* Fy real* Mz P2 ux P2 uy P2 p int iter" << endl ;
	file << alpha << endl;	
	file << Gamma << endl;	
	file << Kutta << endl;
    file << Fx << endl;
    file << Fy << endl;
    file << Mz << endl;
			for (int j=0;j<Ux[].n ; j++) file << Ux[][j] << endl;
			for (int j=0;j<Uy[].n ; j++) file << Uy[][j] << endl;
			for (int j=0;j<P[].n ; j++) file << P[][j] << endl;
	file << 1 << endl;
	};

}