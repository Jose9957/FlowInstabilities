
//
//  PROGRAM Sensitivity2D.edp
//	
//	Performs linear sensitivity analysis of a 2D flow
//   
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	(none) (Reynolds is read in baseflow file)
//
//
//	INPUT FILES :
//		BaseFlow.txt	-> base flow 
// 		mesh.msh 		-> mesh in Freefem format
//      EigenmodeDS.txt -> Direct eigenmode
//      EigenmodeAS.txt -> Adjoint eigenmode
//  OUTPUT FILES :
//
//		StructSen.txt 
//      StructSen.ff2m
//
// DF (adapted from compressible case from Javier)

//include "SF_Geom.edp"; // Javier : not necessary any more
include "StabFem.idp";
//include "Param_Mapping.edp"; // No CM

//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 2 : read files		
//  

/////////////////////MESH//////////////////////////////////////////
mesh th=readmesh(ffdatadir+"mesh.msh"); // global mesh read on rank 0

///////////////////////////////////////////////////////////////////
fespace Xh(th,P2);             ////// f.e. space for vel.
fespace Mh(th,P1);            ////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1]); ////// f.e. space for triplet [u,v,p]

XXMh [Ubx,Uby,Pb];          ///////  -> Base Flow
XXMh<complex> [uDx,uDy,uDp];                 ///////  -> direct eigenmode
XXMh<complex> [uAx,uAy,uAp];                 ///////  -> adjoint eigenmode
	complex lambda;real Re;
	
{
cout << "$$ --- Starting  from mode in file EigenmodeDS.txt --- $$" << endl;
	ifstream cbin(ffdatadir+"EigenmodeDS.txt");
	cbin >> uDx[] >> lambda;
};
	
	
{
cout << "$$ --- Starting  from mode in file EigenmodeAS.txt --- $$" << endl;
	ifstream cbin2(ffdatadir+"EigenmodeAS.txt");
	cbin2 >> uAx[] >> lambda;
};




//////////////////////////// INITIAL CONDITIONS ///////////////////////////////
int testCB;
SFcheckfile("BaseFlow.txt",testCB);


if (testCB>0)
{
    ifstream fileGuess(ffdatadir + "BaseFlow.txt");
    fileGuess >> Ubx[] >> Re;
}
else
{
	cout << "$$ Baseflow, BaseFlow.txt is not in the workdir directory." << endl;
	cout << "$$ Leaving FreeFem++ with error code 6" << endl; // Javier : error 6
	exit(6);
}



IFMACRO(!SFWriteStructSen)
macro SFWriteStructSen(namefileFF,sSen,sEndo)
		 {
		 {
         ofstream fileFF(namefileFF);
         fileFF << "### Data generated by Freefem++ ; " << endl;
         fileFF << "Sensitivity (wavemaker) for a 2D-incompressible problem" << endl;
    	 fileFF << "datatype Sensitivity datastoragemode ReP2.0 datadescriptors S" << endl; 
	     fileFF << "real* Re complex* eigenvalue P2c Endo " << endl << endl ;
		 fileFF << Re << endl << real(lambda) << endl << imag(lambda) << endl << endl;
		 /*for (int j=0;j<sensitivityP1[].n ; j++) fileFF << sensitivityP1[][j] << endl;*/
		 for (int j=0;j<sEndo[].n ; j++) fileFF << real(sEndo[][j]) << endl << imag(sEndo[][j]) << endl;
     };
		};
//EOM
ENDIFMACRO	




//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 6 : STRUCTURAL SENSITIVITY
//    

	Xh<complex> structEndo;
	Xh structSen;
//////////////////////////// Compute Struct Sen //////////////////////////////////
	structSen = sqrt(abs(uAx)^2+abs(uAy)^2) * sqrt(abs(uDx)^2+abs(uDy)^2);
	structSen = structSen/structSen[].max; // Normalization
	structEndo = uAx*uDx+uAy*uDy;
	complex norm = int2d(th)(structEndo);
	structEndo = 1/norm*structEndo;

//////////////////////////////////////////////////////////////////////////////////

//////////////////////////// Post-Processing //////////////////////////////////////

	string namefile=ffdatadir+"StructSen";
	ofstream fileMode(namefile+".txt");
	fileMode.precision(16);
	fileMode.scientific;
	fileMode << structSen[]; 
	cout << "Writing strutrctural sensitivity in file " << namefile << endl;
	SFWriteStructSen(namefile+".ff2m",structSen,structEndo);
