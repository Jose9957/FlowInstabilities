///
// THIS PROGRAM IS ADAPTED FROM Eigen_Bridge_Potential.edp from LiquidBridges++_V1.3
// imported in STABFEM project by D. Fabre on december 2017.
// STILL TO BE RATIONALIZED A LOT !!!


//  Computation of the eigenvalues and eigenvectors for oscillations of a liquid bridge
//  (inviscid theory)
// ----------------------------------------
// the problem is potential : u = i grad (phi) (mind the "i" factor !) 
// PROBLEM : find $\omega$ and $[phi,eta]$  such that
// 	$$ \Delta \phi = 0 $$ inside the domain
// 	$$ \omega \phi = \gamma (-(K0a^2+K0b^2) \eta - \partial^2 \eta / \partial s^2 + m^2/r^2 \eta $$ on the free surface
// 	$$ \omega \eta = grad \phi \dot n $$ on the free surface 
// 
//-----------------------------------------

// Remarque : phi et eta sont definis comme des champs P2 sur le volume, meme si eta n'a de sens qu'à la surface


////////////////////////////////////////////////////////////////
//
// MAILLAGE ET GEOMETRIE INITIAUX
//
////////////////////////////////////////////////////////////////

include "SF_Geom.edp"; 
include "StabFem.idp"



mesh th=readmesh(ffdatadir+"mesh.msh");
mesh thsurface;
if(typesurfacemesh=="plain") 
{
thsurface = th; 	// Maillage 'surface'
};
if(typesurfacemesh=="empty") 
{
thsurface = emptymesh(th); 	// Maillage 'surface'
};

real L, PP0, Vol, Area;

// constantes physiques 
real gamma; // tension de surface
real R; // echelle de longueur (rayon pour un pont liquide)
real dpdz; // parametre de gravite
real GAMMA; // circulation pour cas polygones tournants
string typestart; // possibilites : "pined", "axis", "plane", "angle"
string typeend;    // possibilites : "pined", "axis", "plane", "angle"

include "Macros_Geometry_FreeSurface.idp"





cout << "ENTREZ LA TENSION DE SURFACE gamma : "<< endl;
cin >> gamma;


cout << "ENTREZ LE PARAMETRE DE GRAVITE dp/dz = rho g : "<< endl;
cin >> dpdz;

cout << "ENTREZ LA CIRCULATION GAMMA : "<< endl;
cin >> GAMMA;
cout << "GAMMA = " << GAMMA << endl;

GAMMA = SFGeomGAMMA; // PARAMETER PICKED FROM "SF_Geom.edp" ; this is to be removed very soon !



// Parametres du calcul
int m;  // Nombre d'onde



cout << "ENTREZ typestart (pined, axis, plane or angle) : "<< endl;
cin >> typestart;
cout << "ENTREZ typeend (pined, axis, plane) : "<< endl;
cin >> typeend;


cout << " ENTREZ Le nombre d'onde m ?" << endl;
cin >> m;
cout << "==> Calcul des valeurs propres pour m = " << m << endl;

int nev;
cout << " ENTREZ le nombre de modes a calculer " << endl;
cin >> nev;
int Nval = nev;  // nb. de valeurs propres à calculer
int Nmodes = nev; // nb. de vecteurs propres à post-traiter


real shift;
cout << " ENTREZ le shift (here only imaginary part) : " << endl;
cin >> shift;










SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface); // cf. macro
// Calcul des normales et des courbures
CalcGeomSurf;



fespace VhxVh(th,[P1,P1]);
VhxVh [phi,eta],[q,v]; // will be used for "composite" method
Vh phiB,etaB,qB,vB,phiA,etaA,qA,vA; // will be used for"block" method 

real RegEta = 1e-8;


// MACROS

macro DPDR(r) (GAMMA/2/pi)^2*(1/r^3) //EOM THIS MACRO IS FOR ROTATING POLYGONS


// CONSTRUCTION DES MATRICES
matrix A,B;
if(matrixconstruction=="composite")
{
varf a([phi,eta],[q,v]) = // order of test fun. shoud be [v,q] for SLEPC ; [q,v] instead
// Laplacian	  
	  int2d(th)(  (dx(phi)*dx(v) + dy(phi)*dy(v)+(m^2+1e-8)*phi*v/(x^2+1e-30))*x  ) 
	  		// desingularisation term necessary if m=0 ; don't know why
// Curvature	  
	+ int1d(th,2)(gamma*((Ds(eta))*(Ds(q))  -(K0a^2+K0b^2)*eta*q+m^2/(x^2+1e-30)*q*eta)*x)
// gravity and centrifugal force
	+int1d(th,2)(q*eta*(dpdz*N.y-DPDR(x)*N.x)*x)
// convective terms if rotation is present
 	+ int1d(th,2)(m*GAMMA/(2*pi*x^2)*(eta*v+q*phi)*x)
// shift 
	- int1d(th,2)(shift*(eta*v+q*phi)*x)
// Pour regulariser eta dans le volume	
		+ int2d(th)(1e-30*(dx(q)*dx(eta)+dy(q)*dy(eta))*x) //  deuxieme idee : laplacien 
// Conditions limites par penalisation
//+ int1d(th,1)(1e30*eta*q*abs(x)) // pour ligne de contact fixee
+ int1d(th,5)(1e30*eta*q*abs(x)*(gamma!=0)*((typestart=="pined")||(typeend=="pined")))// pour ligne de contact fixee si gamma ne 0.
+ int1d(th,1)(phi*v*1e30*(m!=0)) // CL axe pour m different de 0
;

varf b([phi,eta],[q,v]) = 
        int1d(th,2)(eta*v*x)
       +int1d(th,2)(q*phi*x);

A= a(VhxVh,VhxVh,solver=UMFPACK); 
B= b(VhxVh,VhxVh,solver=GMRES,eps=1e-20); 

}
else if(matrixconstruction=="block")
{
// Nouvelle methode par blocs
varf avphi(phiA,vA)=	  
	  int2d(th)(  (dx(phiA)*dx(vA) + dy(phiA)*dy(vA)+(m^2+1e-8)*phiA*vA/(x^2+1e-30))*x ) 
	+ int1d(th,1)(m*phiA*vA*1e30)
;

varf aqeta(etaA,qA)=
	int1d(th,2)(gamma*((Ds(etaA))*(Ds(qA))-(K0a^2+K0b^2)*etaA*qA+m^2/(x^2+1e-30)*qA*etaA)*x)
	+int1d(th,2)(qA*etaA*(dpdz*N.y-DPDR(x)*N.x)*x)
	+ int2d(th)((dx(qA)*dx(etaA)+dy(qA)*dy(etaA))*RegEta*x)
	+ int1d(th,1,5)(1e30*etaA*qA*abs(x))
	+ int1d(th,55,5)(etaA*qA*1e30*(typestart=="pined"))
;

varf aveta(etaA,vA)=
	int2d(th)((dx(vA)*dx(etaA)+dy(vA)*dy(etaA))*1e-30*x)//
	- int1d(th,2)(shift*(etaA*vA)*x)
	+ int1d(th,2)(m*GAMMA/(2*pi*x^2)*(etaA*vA)*x);
	
varf aqphi(phiA,qA)=
	int2d(th)( 1e-30*(dx(phiA)*dx(qA) + dy(phiA)*dy(qA))*x) //
	- int1d(th,2)(shift*(qA*phiA)*x)
 	+ int1d(th,2)(m*GAMMA/(2*pi*x^2)*(qA*phiA)*x);

matrix Avphi = avphi(Vh,Vh,solver=UMFPACK);
matrix Aqphi = aqphi(Vh,Vh,solver=UMFPACK);
matrix Aqeta = aqeta(Vh,Vh,solver=UMFPACK); 
matrix Aveta = aveta(Vh,Vh,solver=UMFPACK); 

// Modify the coefficient of the first point along the surface for "natural conditions"
Aqeta(IndexPointSurf(0),IndexPointSurf(0)) += gamma*(1/tan(alphaPointSurf(0)+1e-20))*K0aPointSurf(0)*xPointSurf(0)*(typestart=="angle");


A = [[Aqphi,Aqeta],[Avphi,Aveta]];
set(A,solver =UMFPACK);


// Construction de la matrice B
// Nouvelle methode par blocs
varf bqphi(phiB,qB) = 
       int1d(th,2)(qB*phiB*x);

varf bveta(etaB,vB) = 
        int1d(th,2)(etaB*vB*x);

matrix Bqphi = bqphi(Vh,Vh,solver=GMRES,eps=1e-20); 
matrix Bveta = bveta(Vh,Vh,solver=GMRES,eps=1e-20); 
B = [[Bqphi,0],[0,Bveta]];
set(B,solver =GMRES);
};


////////////////////////////////////////////////////
//
//  RESOLUTION DU PB AUX VALEURS PROPRES
//
//  Important warning : here the computed eigenvalues correspond to omega = lambda/i !
//  
/////////////////////////////////////////////////////


real[int] evr(nev),evi(nev); // to store nev eigein value
VhxVh[int] [eVphi,eVeta](nev);   // to store nev eigen vector
real[int,int] EVV(A.n,nev);

int k=EigenValue(A,B,sym=false,sigma=shift,value=evr,ivalue=evi,vector=eVphi,tol=1e-10,maxit=0,ncv=0);

/*
//int nev=Nval;  // number of computed eigen valeu close to sigma
real[int] evr(Nval+1),evi(Nval+1); // to store nev eigein values
//VhxVh[int] [eVphi,eVeta](Nval+1);   // to store nev eigen vectors
real[int,int] EVV(A.n,nev);

int k=EigenValue(A,B,sym=false,sigma=shift,value=evr,ivalue=evi,vector=EVV,tol=1e-10,maxit=0,ncv=0);*/



////////////////////////////////////////////////////
//
//    POST TRAITEMENT
//
///////////////////////////////////////////////////


cout << " ### VP Calculees :" << endl;

//real[int]  eev(Nval);
ofstream EV(ffdatadir+"Spectrum.txt");
EV.scientific;

Vh<complex> ModeAphi,ModeAeta;
VhxVh<complex> [Modecphi,Modeceta];
Vh Modebphi,Modebeta;
complex lambda;




for (int i=0;i<Nval;i++)
{
//if(evi[i] == 0)
// real eigenvalue -> purely oscillating mode

lambda = 1i*evr[i];
if(matrixconstruction=="composite")
 {	
   //Modephi[] = EVV(:,nev);
   [Modecphi,Modeceta] = [1i*eVphi[i],(1.+0i)*eVeta[i]];
   //ModeAPhi = ModePhi;
   //ModeAeta = Modeeta;
 }
else if(matrixconstruction=="block")
	{
  //[ModeAPhi[],ModaAeta[]] = EVV(:,nev);
	real[int] EVVV(A.n);
	EVVV = eVphi[i][]; 
	[Modebphi[],Modebeta[]] = EVVV;//(:,i);
	[Modecphi,Modeceta]=[Modebphi*1i,Modebeta*(1+1e-30i)];
	};

//VhxVh<complex> [Modedphi,Modedeta]=[Modebphi*(1+1e-30i),Modebeta*(1+1e-30i)];
// TO ADAPT IF A ENCOUNTERING A COMPLEX PAIR
//	}
//else if(i>0&&abs(evi[i])==abs(evi[abs(i-1)])) // abs is to prevent a bug 
//	{// pair of complex eigenvalues with previous one
//	lambda = 1i*evr[i]+evi[i-1];
//	[Modephi,Modeeta] = [1i*eVphi[i]+eVphi[i-1],eVeta[i]-1i*eVeta[i-1]];
//	}
//else if(i<Nval&&abs(evi[i])==abs(evi[i+1])) 
//	{// pair of complex eigenvalues with next one
//	lambda = 1i*evr[i]+evi[i+1];
//	[Modephi,Modeeta] = [1i*eVphi[i]-eVphi[i+1],eVeta[i]-1i*eVeta[i+1]];
//	};

// Normalisation of the modes
        complex norm;
        {
        Vh<complex> etaTEMP=Modeceta;
        real[int] Xx = etaTEMP[].re;
        real[int] Yy = etaTEMP[].im;
        real[int] etaRAD  = Xx.*Xx;
               etaRAD += Yy.*Yy;
        etaRAD = sqrt(etaRAD);
        int Imax = etaRAD.imax;
        norm =  etaTEMP[][Imax];
        }
		[Modecphi,Modeceta] = [Modecphi/norm,Modeceta/norm];

{
  cout << " VP numero " <<  i<< " : " << real(lambda) << "+i"<<imag(lambda) <<  endl;
  EV << -evi[i] << "  "<< evr[i] << " " << L << "  " << PP0  << " " << Vol << "  " << dpdz << "   " << m  <<  endl;
}; 
  
    
// Post-traitement MODES

if (i<Nmodes)
   {	
   	{
   	ofstream FileTXT(ffdatadir+"Eigenmode"+(i+1)+".txt");
   	FileTXT << eVphi[i][];
   	FileTXT << endl << endl << lambda << endl;
   	}
   SFWriteModePotential(ffdatadir+"Eigenmode"+(i+1)+".ff2m",Modec,lambda);
   IFMACRO(FREEFEMPLOTS,YES)
   plot(eVphi[i],cmm="Mode "+i+" ; omega = "+evi[i]+" ; sigma = "+evr[i],wait=1,fill=1);
   ENDIFMACRO    	
   };
}	
 /*if(matrixconstruction=="composite")
	{SFWriteModePotential(ffdatadir+"Eigenmode"+(i+1)+".ff2m",Modec,lambda);}
 else if(matrixconstruction=="block")
	{SFWriteModePotential(ffdatadir+"Eigenmode"+(i+1)+".ff2m",Modeb,lambda);};*/	
	// HACK for compatibility
	if(nev==1){ 
		exec("cp "+ffdatadir+"Eigenmode0.txt "+ffdatadir+"Eigenmode.txt");
		exec("cp "+ffdatadir+"Eigenmode0.ff2m "+ffdatadir+"Eigenmode.ff2m");
		};

cout << " ### StabAxi_FreeSurface_Potenital.edp correctly ended." << endl;

