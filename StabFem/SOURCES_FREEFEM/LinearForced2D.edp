//
//  PROGRAM LinearForced2D.edp
//  computation of a linear harmonically forced problem for a single or multiple choices of omega
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	typecalc -> 'single', 'range', or 'array'
//	 	'single' -> omega (real) (in this case a structure field is produced)
//		'range' -> omegamin, omegastep, omegamax (real)
//		'array' -> user-defined range (complex) (N, omega1, sigma1, omega2, sigma2, ....)
//
//	INPUT FILES :
//		BaseFlow.txt		-> base flow 
// 		mesh.msh 			->  mesh in Freefem format
//
//  OUTPUT FILES :
//		Impedance.ff2m -> formatted file, structure defined in macro
//		Impedance_Chi##_Re###.txt 
//
// 	ERROR MANAGEMENT : 
//
//  First version : sometime around 2014 ; Redesigned and incorporated in the project in september 2018.

include "SF_Geom.edp";
include "StabFem.idp";

int NNN = 10000;	
string typecalc; 
int Nomega;
complex[int] omegaarray(NNN);
	
cout << "$$ ENTERING Function LinearForced2D.edp" << endl;
cout << "$$ Selection of parameters : " << endl;
cout << "$$ Enter type  (single, range, array)  >> " ;
cin >> typecalc;
cout << typecalc << endl;
if(typecalc=="single")
	{
		cout << "$$ Enter omega  >> " ;
		cin >> omegaarray(0)  ;
		cout <<  omegaarray(0) << endl;	
		Nomega = 1;
	}
	else if(typecalc=="range")
	{
		real omegamin,omegamax,omegastep;
		cout << "$$ Enter omegamin, omegastep,  omegamax  >> " ;
		cin >> omegamin >> omegastep >> omegamax ;
		cout <<  omegamin << " , " << omegastep << " , " << omegamax << endl;
		Nomega = (omegamax-omegamin)/omegastep+1;
		for(int kk=0;kk<Nomega;kk++){omegaarray(kk) = omegamin+kk*omegastep;};
	}
	else if(typecalc=="array")
	{
		real omegar,omegai;
		cout << "$$ Enter Number of omega values N >> " ;
		cin >> Nomega;
		cout << Nomega << endl;
		cout << "$$ Enter successively omega1, sigma1, omega2, sigma2, (...) omegaN, sigmaN  >> " ;
		for(int kk=0;kk<Nomega;kk++)
		{
			cin >> omegar >> omegai; 
			omegaarray(kk) = omegar+1i*omegai;
		};
		cout << endl << "$$ (successfully read " << Nomega << " complex values " << endl;
	}
	else
	{
		cout << " Error : typecalc = " << typecalc << " is not a valid value !" << endl;
		exit(10); 
	};


// NUMERICAL PARAMETERS
// Numerical parameters
string formulation = getARGV("-Vel","R"); // should be "A" or "R" for absolute/relative VELOCITY
string Frame = getARGV("-Frame","R"); // should be "A" or "R" for absolute/relative FRAME OF REFERENCE
string useAS = getARGV("-useAS","yes"); //
string Normalize = getARGV("-Normalize","V");

real AddedSTIFFNESS =getARGV("-AS",0.);
cout << endl << " Numerical parameters :" << endl;
cout << "Velocity : " << formulation <<endl;
cout << "Frame : " << Frame <<endl;
cout << "Normalization : " << Normalize << endl;
//int symm = getARGV("-Symmetry",0);
//string symmetryF;
//if (symm==1) {symmetryF="S";} else if (symm==-1){symmetryF="A";} else {symmetryF="N";};
//cout << "$$ Symmetry property   : " << symm << " ; " << symmetryF << endl;
string symmetryF=getARGV("-Symmetry","N");
cout << "$$ Symmetry property   : " << symmetryF << endl;

	if ((Normalize!="V")&&(Normalize!="Y"))
	{
		cout << "Error : Normalization not recognized"<< endl;
		exit(1);
	};
	
	real TGV = 1e30;
	real TGVCL = 1e20;


	mesh th=readmesh(ffdatadir+"mesh.msh");
 	fespace p2xp2xp1(th,[P2,P2,P1]);
 	fespace p2(th,P2);
	fespace p1(th,P1);	
	p2xp2xp1 [Ubx,Uby,Ubp];
    p2xp2xp1<complex> [ux,uy,up],[vx,vy,q];
    p2xp2xp1 [urr,uyr,pr],[uri,uyi,pii];
    
	int m=0; 
	real Re;
//	real epsilonPQ = 0*1e-20; // terme de desingularisation
	complex omega;

		int NdimBaseFlow;


		{
        ifstream file(ffdatadir+"BaseFlow.txt");
        file >> Ubx[];
   		file >> Re;
		}

      
	

//	{
//	ifstream cbin(ffdatadir+"BaseFlow.txt");
//	cbin >> uxp[];
//	cbin >> Re;
//	};
//	cout << " Lecture BaseFlow : Re = " << Re << endl;

	real nu=1/Re; // NB SFGeom parameters should be defined in SF_Geom.edp
	cout << "nu = " << nu << endl;
	
	complex Y,V,A; 
	









IFMACRO(!Portance)
macro Portance(u,symmetry)   
	(
	(1*(symmetry=="N")+2*(symmetry=="A"))
	*(
	int1d(th,2,21,22,23)(u#p*N.y)
	-nu*int1d(th,2,21,22,23)( (2*dy(u#y)*N.y+(dx(u#y)+dy(u#x))*N.x))
	)
	)
//EOM
ENDIFMACRO



IFMACRO(!AddedStiffness)
macro AddedStiffness(Ub,symmetry)   
	(
	(1*(symmetry=="N")+2*(symmetry=="A"))
	*(
	int1d(th,2,21,22,23)(dy(Ub#p)*N.y)
	-nu*int1d(th,2,21,22,23)( (2*dyy(Ub#y)*N.y+(dxy(Ub#y)+dyy(Ub#x))*N.x) )
	)
	)
//EOM
ENDIFMACRO

IFMACRO(!Torque)
macro Torque(u,symmetry)   
(
	(1*(symmetry=="N")+2*(symmetry=="A"))
	*(
	int1d(th,2,21,22,23)(u#p*(N.y*x-N.x*y))
	-nu*int1d(th,2,21,22,23)( (2*dy(u#y)*N.y+(dx(u#y)+dy(u#x))*N.x)*x 
                             -(2*dx(u#x)*N.x+(dx(u#y)+dy(u#x))*N.y)*y
	)
	)
)
//EOM
ENDIFMACRO

IFMACRO(!ForcedLinearStatisticsINIT)	
macro ForcedLinearStatisticsINIT(namefile)
{			
    ofstream fileTXT(namefile+".txt"); /* this is only to clean the file if exists */ 
    ofstream file(namefile+".ff2m");
    file << "### Data generated by Freefem++ ; " << endl;
    file << "Impedance of a 2D device (generic macro)" << endl;
	file << "datatype forcedlinear datastoragemode columns datadescriptors ind,omega_r,omega_i,Z_r,Z_i" << endl;
}
//EOM
ENDIFMACRO

IFMACRO(!ForcedLinearStatistics)
macro ForcedLinearStatistics(namefile)
{
	complex Fy = Portance(u,symmetryF)+(Frame=="A")*Y*AddedStiffness(Ub,symmetryF);
	complex Imp = -Fy/V; 
	/* NB : sign is because impedance is with force exerted on fluid ; see Sabino et al */
	ofstream fileforces(namefile+".txt",append);
	fileforces << ind << " " << real(omega) << " " << imag(omega) << " " << real(Imp) << " " << imag(Imp) << endl;		
}
//EOM	
ENDIFMACRO	



IFMACRO(!SFWriteForced)
macro SFWriteForced(namefile,u,ev)
		 {
		 ofstream file(namefile);
   		 fespace p1forff2m(th,P1); 
   		 complex reltoabs;
    	 p1forff2m<complex> uxa,uya,ppa,vort1;  		 
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << "FORCED LINEAR RESPONSE for a 2D incompressible problem " << endl;
    	 file << "datatype " << " ForcedFlow " << " datastoragemode CxP2P2P1 datadescriptors ux,uy,p" << endl;
	     file << "real* Re complex* Lambda complex* Fy complex Z complex FyAS P1c vort " ;
	     if (Frame=="R")
	     { file << " P1c uxa P1c uya P1c pa" << endl << endl ;
	       reltoabs = -Y; }
	     else 
	     { file << " P1c uxr P1c uyr P1c pr" << endl << endl ;
	       reltoabs = +Y; }; 
		 file << Re  << endl << real(ev) << endl << imag(ev) << endl << endl;
		 complex Fy = Portance(u,symmetryF)+(Frame=="A")*Y*AddedStiffness(Ub,symmetryF);
		 complex ZZ = -Fy/V; /* see remark above */
		 complex FyAS = Y*AddedStiffness(Ub,symmetryF);
		 cout << "#  Fy = " << Fy << " ;  Z = " << ZZ << endl;
		 file << real(Fy) << endl << imag(Fy) << endl;	
		 file << real(ZZ) << endl << imag(ZZ) << endl;
		 file << real(FyAS) << endl << imag(FyAS) << endl;		
		 vort1=dy(u#x)-dx(u#y);
		for (int j=0;j<uxa[].n ; j++) file << real(vort1[][j]) << endl << imag(vort1[][j]) << endl;
		uxa=u#x+reltoabs*dy(Ubx);uya=u#y+reltoabs*dy(Uby);ppa=u#p+reltoabs*dy(Ubp);
		for (int j=0;j<uxa[].n ; j++) file << real(uxa[][j]) << endl << imag(uxa[][j]) << endl;
		for (int j=0;j<uxa[].n ; j++) file << real(uya[][j]) << endl << imag(uya[][j]) << endl;
		for (int j=0;j<uxa[].n ; j++) file << real(ppa[][j]) << endl << imag(ppa[][j]) << endl;
		};
//EOM	
ENDIFMACRO
	
	
	

	
	
	macro div(u) (dx(u#x)+dy(u#y))// macro for divergence 
	macro Conv(ua,ub,v) ( 
              ((ua#x*dx(ub#x)+ua#y*dy(ub#x))+(ub#x*dx(ua#x)+ub#y*dy(ua#x)))*v#x 
            + ((ua#x*dx(ub#y)+ua#y*dy(ub#y))+(ub#x*dx(ua#y)+ub#y*dy(ua#y)))*v#y 
                    ) // macro for mutual convection operator
	macro D(u) [[dx(u#x), .5*(dx(u#y)+dy(u#x))], [.5*(dx(u#y)+dy(u#x)), dy(u#y)]] // macro for rate-of-deformation tensor
	real eps = 1e-20;
		

IFMACRO(!BoundaryConditionsForcedProblem)	
macro BoundaryConditionsForcedProblem(u,v)
/* 	  
  	  int1d(th,2,21,22,23)(TGVCL*(u#x*v#x+u#y*v#y))	
    + int1d(th,2,21,22,23)(-V*v#y*TGVCL*(formulation=="A"))
    + int1d(th,2,21,22,23)(-Y*(v#y*dy(Ubx)+v#x*dy(Ubx))*TGVCL*(Frame=="A"))
    + int1d(th,1,4)(TGVCL*(u#x*v#x+u#y*v#y))  
	+ int1d(th,1,4) (V*v#y*TGVCL*(formulation=="R"))	
	+ int1d(th,1,4)(Y*(v#y*dy(Ubx)+v#x*dy(Ubx))*TGVCL*(Frame=="R"))
*/	

		on(6,u#x=0)
      + on(1,u#x=+Y*dy(Ubx)*(Frame=="R"))
      + on(1,4,u#y=-V*(formulation=="R")+Y*dy(Uby)*(Frame=="R"))
      + on(13,u#y=-V*(formulation=="R"))
      + on(2,21,22,23,u#x=-Y*dy(Ubx)*(Frame=="A"))
      + on(2,21,22,23,u#y=+V*(formulation=="A")-Y*dy(Uby)*(Frame=="A"))

    
	//EOM 
ENDIFMACRO

macro CouplingsForcedProblem(u,v)
	    int2d(th)( V*( vx*dy(Ubx)+vy*dy(Uby) )*(formulation=="A")*(Frame=="R") )
      + int2d(th)(-A*vy*(formulation=="R")*(Frame=="R"))
//EOM		
		
	problem ForcedLinear([ux,uy,up],[vx,vy,q]) =
   int2d(th)( 
   			-2*nu*(D(u):D(v))
             + up*q*(eps) 
             + up*div(v)
             + div(u)*q
             + 1i*omega*(ux*vx+uy*vy)
             - Conv(u,Ub,v)
             )
	+ BoundaryConditionsForcedProblem(u,v)
	+ CouplingsForcedProblem(u,v); 
	
//		  on(1,4,u#x=0,u#y=-1.)
//  	+ on(2,u#x=0.,u#y=0.)	
//	+ int1d(th,6)((u#x*v#x)*1e30) 
//	   + int2d(th)( - 1i*omega*vy)

// Initialisation of output files
string namefile = ffdatadir+"LinearForcedStatistics";
ForcedLinearStatisticsINIT(namefile);	


// Loop over omega
for(int ind = 0; ind<Nomega; ind++)
{
	omega  = omegaarray(ind);

	cout << "$$ Calcul d'un probleme lineaire force 2D ; Re    = " << Re << " ;  omega = " << omega << endl;	
		
	if (Normalize=="V")
	{
		V = 1;
		A = -1i*omega;
		Y = 1/(-1i*omega+1e-30);
	}
	else if (Normalize=="Y")
	{
		Y = 1;
		V = -1i*omega;
	 	A = -omega^2;
	};
	
	
	real TGV = 1e30;
	real TGVCL = 1e20;

	ForcedLinear;
	ForcedLinearStatistics(namefile);

	
	
	
//	IFMACRO(FREEFEMPLOTS,YES)
	p1<complex> uxA = ux-Y*dy(Ubx);
	p1<complex> uyA = uy-Y*dy(Uby);
	p1<complex> upA = up-Y*dy(Uby);
	plot(ux,cmm="Forced flow for omega = "+omega+" : ux rel",wait=1,fill=1,value=1);
	plot(uxA,cmm="Forced flow for omega = "+omega+" : ux abs",wait=1,fill=1,value=1);
	
	plot(uy,cmm="Forced flow for omega = "+omega+" : uy rel",wait=1,fill=1,value=1);
	plot(uyA,cmm="Forced flow for omega = "+omega+" : uy abs",wait=1,fill=1,value=1);
	
	plot(up,cmm="Forced flow for omega = "+omega+" : p rel",wait=1,fill=1,value=1);
	plot(upA,cmm="Forced flow for omega = "+omega+" : p abs",wait=1,fill=1,value=1);
	
	p1 AS = dy(Ubp)*y/sqrt(x^2+y^2+1e-10)-nu*(2*dyy(Uby)*y+(dxy(Uby)+dyy(Ubx))*x)/sqrt(x^2+y^2+1e-10);
	plot(AS,wait=1,fill=1,value=1,cmm="AS");
	
//	ENDIFMACRO
	
	
	if(Nomega==1)
	{
    ofstream file(ffdatadir+"ForcedFlow.txt");
  	file << ux[] ;	
   	file << endl << endl << imag(omega) << "   " << -real(omega)  << endl;
	SFWriteForced(ffdatadir+"ForcedFlow.ff2m",u,1i*omega)
	
	if (Frame=="A")
	{
//	real FyAS = Y*AddedStiffness(Ub,"S");
//	cout << "# NB   ADDED STIFFNESS Fy_AS =  " << FyAS << endl; 
	cout << "With added stiffness : Fy = " << Portance(u,symmetryF)+Y*AddedStiffness(Ub,symmetryF) << endl; 
	cout << "Without added stiffness : Fy = " << Portance(u,symmetryF) << endl; 
	};

	
	};

};
// end Loop



cout << "$$$$ LEAVING LoopImpedance.edp " << endl << "$$" << endl; 
	
	
