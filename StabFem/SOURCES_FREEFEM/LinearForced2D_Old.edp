//
//  PROGRAM LinearForced2D.edp
//  computation of a linear harmonically forced problem for a single or multiple choices of omega
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	typecalc -> 'single', 'range', or 'array'
//	 	'single' -> omega (real) (in this case a structure field is produced)
//		'range' -> omegamin, omegastep, omegamax (real)
//		'array' -> user-defined range (complex) (N, omega1, sigma1, omega2, sigma2, ....)
//
//	INPUT FILES :
//		BaseFlow.txt		-> base flow 
// 		mesh.msh 			->  mesh in Freefem format
//
//  OUTPUT FILES :
//		Impedance.ff2m -> formatted file, structure defined in macro
//		Impedance_Chi##_Re###.txt 
//
// 	ERROR MANAGEMENT : 
//
//  First version : sometime around 2014 ; Redesigned and incorporated in the project in september 2018.

cout << "$$$$ ENTERING LoopImpedance.edp " << endl << "$$" << endl; 

include "SF_Geom.edp";
include "StabFem.idp";

int NNN = 10000;	
string typecalc; 
int Nomega;
complex[int] omegaarray(NNN);
	
cout << "$$ ENTERING Function LinearForced2D.edp" << endl;
cout << "$$ Selection of parameters : " << endl;
cout << "$$ Enter type  (single, range, array)  >> " ;
cin >> typecalc;
cout << typecalc << endl;
if(typecalc=="single")
	{
		cout << "$$ Enter omega  >> " ;
		cin >> omegaarray(0)  ;
		cout <<  omegaarray(0) << endl;	
		Nomega = 1;
	}
	else if(typecalc=="range")
	{
		real omegamin,omegamax,omegastep;
		cout << "$$ Enter omegamin, omegastep,  omegamax  >> " ;
		cin >> omegamin >> omegastep >> omegamax ;
		cout <<  omegamin << " , " << omegastep << " , " << omegamax << endl;
		Nomega = (omegamax-omegamin)/omegastep+1;
		for(int kk=0;kk<Nomega;kk++){omegaarray(kk) = omegamin+kk*omegastep;};
	}
	else if(typecalc=="array")
	{
		real omegar,omegai;
		cout << "$$ Enter Number of omega values N >> " ;
		cin >> Nomega;
		cout << Nomega << endl;
		cout << "$$ Enter successively omega1, sigma1, omega2, sigma2, (...) omegaN, sigmaN  >> " ;
		for(int kk=0;kk<Nomega;kk++)
		{
			cin >> omegar >> omegai; 
			omegaarray(kk) = omegar+1i*omegai;
		};
		cout << endl << "$$ (successfully read " << Nomega << " complex values " << endl;
	}
	else
	{
		cout << " Error : typecalc = " << typecalc << " is not a valid value !" << endl;
		exit(10); 
	};


	mesh th=readmesh(ffdatadir+"mesh.msh");
 	fespace p2xp2xp1(th,[P2,P2,P1]);
 	fespace p2(th,P2);
	fespace p1(th,P1);	
	p2xp2xp1 [Ubx,Uby,Ubp];
    p2xp2xp1<complex> [ux,uy,up],[vx,vy,q];
    p2xp2xp1 [urr,uyr,pr],[uri,uyi,pii];
    
	int m=0; 
	real Re;
//	real epsilonPQ = 0*1e-20; // terme de desingularisation
	complex omega;

		int NdimBaseFlow;


		{
        ifstream file(ffdatadir+"BaseFlow.txt");
        file >> Ubx[];
   		file >> Re;
		}

      
	

//	{
//	ifstream cbin(ffdatadir+"BaseFlow.txt");
//	cbin >> uxp[];
//	cbin >> Re;
//	};
//	cout << " Lecture BaseFlow : Re = " << Re << endl;

	real nu=1/Re; // NB SFGeom parameters should be defined in SF_Geom.edp
	cout << "nu = " << nu << endl;
	

IFMACRO(!BoundaryConditionsForcedProblem)	
macro BoundaryConditionsForcedProblem(u,v)
 	  on(1,4,u#x=0.,u#y=0.) 
 	+ on(2,21,22,23,u#x=0.,u#y=-1.)	/* Absolute velocity in relative frame */
	+ int1d(th,6)((u#x*v#x)*1e30) 
    - int2d(th)( 1.*(vx*dy(Ubx)+vy*dy(Uby)) ) /* Absolute velocity in relative frame */
    /* + int2d(th)( + 1i*omega*vy)  Relative */
    /*  on(1,4,u#x=0.,u#y=1.) + on(2,21,22,23,u#x=0.,u#y=0) Relative */  
	//EOM 
ENDIFMACRO



IFMACRO(!ForcedLinearStatisticsINIT)	
macro ForcedLinearStatisticsINIT(namefile)
{			
    ofstream fileTXT(namefile+".txt"); /* this is only to clean the file if exists */ 
    ofstream file(namefile+".ff2m");
    file << "### Data generated by Freefem++ ; " << endl;
    file << "Impedance of a 2D device (generic macro)" << endl;
	file << "datatype forcedlinear datastoragemode columns datadescriptors ind,omega_r,omega_i,Z_r,Z_i" << endl;
}
//EOM
ENDIFMACRO





IFMACRO(!ForcedLinearStatistics)
macro ForcedLinearStatistics(namefile)
{
	complex Imp = int1d(th,2,21,22,23)(u#p*N.y)-nu*int1d(th,2,21,22,23)( (2*dy(u#y)*N.y+(dx(u#y)+dy(u#x))*N.x));
	ofstream fileforces(namefile+".txt",append);
	fileforces << ind << " " << real(omega) << " " << imag(omega) << " " << real(Imp) << " " << imag(Imp) << endl;		
}
//EOM	
ENDIFMACRO	



IFMACRO(!SFWriteForced)
macro SFWriteForced(namefile,u,ev)
		 {
		 ofstream file(namefile);
   		 fespace p1forff2m(th,P1); 
		 p1forff2m xx,yy;
		 xx=x;yy=y;
    	 p1forff2m<complex> ux1,uy1,pp1,vort1;  		 
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << "FORCED LINEAR RESPONSE for a 2D incompressible problem " << endl;
    	 file << "datatype " << " ForcedFlow " << " datastoragemode CxP2P2P1 datadescriptors ux,uy,p" << endl;
	     file << "real Re complex Lambda P1c vort complex Z" << endl << endl ; 
		 file << Re  << endl << real(ev) << endl << imag(ev) << endl << endl;
  		 ux1=u#x;uy1=u#y;pp1=u#p;vort1=dy(u#x)-dx(u#y);
/*		for (int j=0;j<ux1[].n ; j++) file << real(ux1[][j]) << endl << imag(ux1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(uy1[][j]) << endl << imag(uy1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(pp1[][j]) << endl << imag(pp1[][j]) << endl;*/
		for (int j=0;j<ux1[].n ; j++) file << real(vort1[][j]) << endl << imag(vort1[][j]) << endl; 
		complex ZZ =int1d(th,2,21,22,23)(u#p*N.y)-nu*int1d(th,2,21,22,23)( (2*dy(u#y)*N.y+(dx(u#y)+dy(u#x))*N.x));
		cout << "#   Z = " << ZZ << endl;
		file << real(ZZ) << endl << imag(ZZ) << endl;			
		};
//EOM	
ENDIFMACRO
	
	
	

	
	
	macro div(u) (dx(u#x)+dy(u#y))// macro for divergence 
	macro Conv(ua,ub,v) ( 
              ((ua#x*dx(ub#x)+ua#y*dy(ub#x))+(ub#x*dx(ua#x)+ub#y*dy(ua#x)))*v#x 
            + ((ua#x*dx(ub#y)+ua#y*dy(ub#y))+(ub#x*dx(ua#y)+ub#y*dy(ua#y)))*v#y 
                    ) // macro for mutual convection operator
	macro D(u) [[dx(u#x), .5*(dx(u#y)+dy(u#x))], [.5*(dx(u#y)+dy(u#x)), dy(u#y)]] // macro for rate-of-deformation tensor
	real eps = 1e-20;
		
	problem ForcedLinear([ux,uy,up],[vx,vy,q]) =
   int2d(th)( 
   			-2*nu*(D(u):D(v))
             + up*q*(eps) 
             + up*div(v)
             + div(u)*q
             + 1i*omega*(ux*vx+uy*vy)
             - Conv(u,Ub,v)
             )
	+ BoundaryConditionsForcedProblem(u,v); 
	
//		  on(1,4,u#x=0,u#y=-1.)
//  	+ on(2,u#x=0.,u#y=0.)	
//	+ int1d(th,6)((u#x*v#x)*1e30) 
//	   + int2d(th)( - 1i*omega*vy)

// Initialisation of output files
string namefile = ffdatadir+"LinearForcedStatistics";
ForcedLinearStatisticsINIT(namefile);	


// Loop over omega
for(int ind = 0; ind<Nomega; ind++)
{
	omega  = omegaarray(ind);

	cout << "$$ Calcul d'un probleme lineaire force 2D ; Re    = " << Re << " ;  omega = " << omega << endl;	

	ForcedLinear;
	ForcedLinearStatistics(namefile);
	
	
	
	IFMACRO(FREEFEMPLOTS,YES)
	plot(ux,cmm="Structure of forced flow for omega = "+omega,wait=1,fill=1);
	ENDIFMACRO
	
	
	if(Nomega==1)
	{
    ofstream file(ffdatadir+"ForcedFlow.txt");
  	file << ux[] ;	
   	file << endl << endl << imag(omega) << "   " << -real(omega)  << endl;
	SFWriteForced(ffdatadir+"ForcedFlow.ff2m",u,1i*omega)
	};

};
// end Loop



cout << "$$$$ LEAVING LoopImpedance.edp " << endl << "$$" << endl; 
	
	
