//
//  PROGRAM HB2_2D.edp
//	
//	Solves directly the Self-Consistent equations to decribe the limit cycle with two time-Fourier modes
//
//. In development, not yet fully validated
//   
//  The flow is assumed as an expansion in the form : 	u = u_0 + [ u_{1,c} cos (omega t) + u_{1,s} sin (omega t) ] + [ u_{2,c} cos ( 2 omega t) + u_{2,s} sin ( 2 omega t) ]
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	Re 
//
//	INPUT FILES :
//		MeanFlow_guess.txt				-> starting field for mean-flow (real) 
//      HBMode1_guess.txt 	-> starting field for self-consistent mode (stored as COMPLEX ; real and imaginary parts are u1,c and -u1,s)
//.     HBMode2_guess.txt	-> starting field for second harmonic (stored as COMPLEX ; real and imaginary parts are u2,c and -u2,s)
// 		mesh.msh 						->  mesh in Freefem format
//  OUTPUT FILES :
//		MeanFlow.txt					-> Converged mean flow (real)
//		MeanFlow.ff2m					
//      HBMode1.txt			-> Converged self-consistent mode (stored as COMPLEX with same convention) 
//      HBMode1.ff2m 
//      HBMode2.txt
//      HBMode2.ff2m
//
// 	ERROR MANAGEMENT :  (to be modified)
//      if Newton iteration diverges, SelfConsistentMode.txt is not generated and "iter" parameter in Eigenmode.ff2m is -1.
//
// Initial Version DF, avril 2018 ;  corrected by Diogo, may 2018 




//load "MUMPS_seq"

//include "SF_Geom.edp";
include "StabFem.idp";
string copyfile = "no"; // set to "yes" to copy the output files into the "guess". Better to disable when using in Matlbab driver mode.


/////////////////////////////////////////////////////////////////////////////////


mesh th=readmesh(ffdatadir+"mesh.msh");                    ///// Read mesh
int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6; // no longer is Customization file ; consider removing it completely

/////////////////////////////////////////////////////////////////////////////////

fespace Xh(th,P2);             ////// f.e. space for vel.
fespace Mh(th,P1);            ////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1]); ////// f.e. space for triplet [u,v,p]
fespace BIGSPACE(th,[P2,P2,P1,P2,P2,P1,P2,P2,P1]);

XXMh [ubx,uby,ubp]; // base flow (start) 
XXMh<complex> [u1x,u1y,u1p];    // guess for self-consistent mode (stored as complex) 
XXMh<complex> [u2x,u2y,u2p];    // guess for 2nd harmonic (stored as complex)      
Mh dumb; // to construct the rhs's


XXMh [u0x,u0y,u0p],[u1cx,u1cy,u1cp],[u1sx,u1sy,u1sp]; // components 0 (mean flow) and 1 (fundamental, re and im) of HB  
XXMh [du0x,du0y,du0p],[du1cx,du1cy,du1cp],[du1sx,du1sy,du1sp]; // Increments in Newton
XXMh [u2cx,u2cy,u2cp],[u2sx,u2sy,u2sp]; // components 0 (mean flow) and 1 (fundamental, re and im) of HB  
XXMh [du2cx,du2cy,du2cp],[du2sx,du2sy,du2sp]; // Increments in Newton

XXMh [vx,vy,vp]; // test functions


real Re, ReM;
real Omegax;
real omega, omegaM, sigmaM, domega;
string symmetry, symmetryBaseFlow, symmetryODD, symmetryEVEN ;

////////////////////////////////////////////////////////////////////////////////

macro div(u) (dx(u#x)+dy(u#y))//EOM macro for divergence 
macro Conv(ua,ub,v) ( 
              ((ua#x*dx(ub#x)+ua#y*dy(ub#x))+(ub#x*dx(ua#x)+ub#y*dy(ua#x)))*v#x 
            + ((ua#x*dx(ub#y)+ua#y*dy(ub#y))+(ub#x*dx(ua#y)+ub#y*dy(ua#y)))*v#y 
                    ) //EOM macro for mutual convection operator
macro D(u) [[dx(u#x), .5*(dx(u#y)+dy(u#x))], [.5*(dx(u#y)+dy(u#x)), dy(u#y)]] 
//EOM macro for rate-of-deformation tensor

macro NS(nu,u,v) 
		(
		 -2*nu*(D(u):D(v))
        + u#p*div(v)
        + v#p*div(u)
        - .5*Conv(u,u,v)
        )
//EOM
     
macro NSL(nu,U,u,v) 
		(
		-2*nu*(D(u):D(v))
        + u#p*div(v)
        + div(u)*v#p
        - Conv(U,u,v)
        )
//EOM

macro BoundaryconditionsMF(u1,u2,v1,v2,symmetry)
	           on(bcinlet,u1=0.0,u2=0.0) 
             + on(bcwall,u1=u0x-Omegax*y/0.5,u2=u0y+Omegax*x/0.5)
             + int1d(th,bcaxis)(u1*v1*1e30*(symmetry=="A")+u2*v2*1e30*(symmetry=="S"))
//        

        
macro Boundaryconditions(u1,u2,v1,v2,symmetry)
	           on(bcinlet,u1=0.0,u2=0.0) 
             + on(bcwall,u1=0.0,u2=0.0)
             + int1d(th,bcaxis)(u1*v1*1e30*(symmetry=="A")+u2*v2*1e30*(symmetry=="S"))
// 

macro Lift(nu,u1,u2,p,symm)   
	(
	int1d(th,2,21,22,23)((1.0+1.0*(symm=="A"))*p*N.y)
	+int1d(th,2,21,22,23)( -(1.0+1.0*(symm=="A"))*nu*(2*dy(u2)*N.y+(dx(u2)+dy(u1))*N.x))
	)
// WARNING : HERE IT IS Lift FORCE
macro Drag(nu,u1,u2,p,symm)   
	(
	int1d(th,2,21,22,23)((1.0+1.0*(symm=="S"))*p*N.x)
	+int1d(th,2,21,22,23)( -(1.0+1.0*(symm=="S"))*nu*(2*dx(u1)*N.x+(dx(u2)+dy(u1))*N.y))
	)
// Drag FORCE

macro EnergyNorm(u,symm) sqrt( (1.0+1.0*(symm!="N"))*int2d(th)(abs(u#x)^2+abs(u#y)^2) )
// "Energy" norm for a real or complex field (factor 2 is because the whole domain is two halves)

macro EnergyNormCS(uc,us,symm) sqrt( (1.0+1.0*(symm!="N"))*.5* int2d(th)(abs(uc#x)^2+abs(uc#y)^2+abs(us#x)^2+abs(us#y)^2) )
// "Energy" norm for a field defined by "cos" and "sin" components (factor 2 because half-domain ; factor .5 because of time-average)

real eps=1.e-7; 
       
       
real sigma1; // parameter sigma1 from Mantic-lugo et al ; should be zero for harmonic balance
//real A,dA ; // amplitude 


cout << " Choice of Re : " << endl;
cin >> Re; 
cout << " --> Re = " << Re << endl;
cout << " Choice of rotation rate Omegax : " << endl;
cin >> Omegax; 
cout << " --> Omegax = " << Omegax << endl;
real nu=1/Re;


// LECture of mean flow

{
real Relu;
cout << "starting  from mean flow in file MeanFlow_guess.txt" << endl;
ifstream cbin(ffdatadir+"MeanFlow_guess.txt");
cbin >> ubx[] >> Relu;
if(Relu!=Re){ cout << "WARNING : Re not equal to that of the guess mean flow" << endl;};
}

[u0x,u0y,u0p] = [ubx,uby,ubp]; 



// lecture of 1rst harmonic

{
cout << "starting  from mode in file HBMode1_guess.txt" << endl;
ifstream cbin(ffdatadir+"HBMode1_guess.txt");
cbin >> u1x[] >> sigmaM >> omegaM; 
[u1cx,u1cy,u1cp] = [real(u1x), real(u1y), real(u1p)]; 
[u1sx,u1sy,u1sp] = [-imag(u1x), -imag(u1y), -imag(u1p)];  
}
 
omega = omegaM;
cout << " -->  omegaguess = " << omega << endl;

sigma1=0;
cout << " --> sigma1 = " << sigmaM << endl;

cout << " Symmetry of the base flow : " << endl; 
cin >> symmetryBaseFlow ;
cout << " -->  Symmetry of the base flow = " << symmetryBaseFlow << endl;	

cout << " symmetry : " << endl; 
cin >> symmetry ;
cout << " -->  symmmetry = " << symmetry << endl;	
if(symmetry=="A") { symmetryODD="A" ; symmetryEVEN = "S";};
if(symmetry=="S") { symmetryODD="S" ; symmetryEVEN = "S";};
if(symmetry=="N") { symmetryODD="N" ; symmetryEVEN = "N";};

// OUTPUT
cout << "Drag force of guess mean flow : " << Drag(1/Re,ubx,uby,ubp,symmetry) << endl;
cout << " 			omega of the starting field = " << omegaM<< endl;
cout << "           Fy of the starting field : " << Lift(1/Re,u1x,u1y,u1p,symmetry) << endl;
cout << "   		Energy-Norm (A) of starting field (complex macro) : " << EnergyNorm(u1,symmetry)/sqrt(2) << endl;	
cout << "   		Energy-Norm (A) of starting field (real macro) : " << EnergyNormCS(u1c,u1s,symmetry) << endl << endl;


// 2nd Harmonic 

int check=exec("head -1 "+ffdatadir+"HBMode2_guess.txt");
cout << "Check if guess for second harmonic is present :"<<  check<< endl;
//string secondharmonicguess;

if(check==0)
{
cout << "starting  from mode in file HBMode2_guess.txt" << endl;
ifstream cbin(ffdatadir+"HBMode2_guess.txt");
cbin >> u2x[] ;
cout << "           Fx of the second-harmonic guess : " << Drag(1/Re,u2x,u2y,u2p,symmetry) << endl;
cout << "   		Energy-Norm (A) of starting field (complex macro) : " << EnergyNorm(u2,symmetry) << endl;	
[u2cx,u2cy,u2cp] = [real(u2x), real(u2y), real(u2p)]; 
[u2sx,u2sy,u2sp] = [-imag(u2x), -imag(u2y), -imag(u2p)];  
cout << "   		Energy-Norm (A) of starting field (real macro) : " << EnergyNormCS(u2c,u2s,symmetry) << endl << endl;
}
else
{
[u2x,u2y,u2p] = [0,0,0]; 
[u2cx,u2cy,u2cp] = [real(u2x), real(u2y), real(u2p)]; 
[u2sx,u2sy,u2sp] = [-imag(u2x), -imag(u2y), -imag(u2p)];
};



////////////////////////////////////////////////////////////////////////////////
//
// In description, the blocks are called NxM, where N is the numering of the equation and M that of the unknown
// N = 1 steady NS for MEAN flow ; N=2 real part of linear equation for eigenmode ; N = 3 imaginary part; N = 4 phase 
// M = 1 MEAN-flow, M=2 eigenmode-real ; M = 3 eigenmode-imag ; M = 4 domega 
//
/////////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////////
//////// varf for RHS 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for nonlinear term..." << endl;


varf NLOpF1([du0x,du0y,du0p],[vx,vy,vp]) =
// block 1 : part of the NS equation proportional to 1
     int2d(th)( NS(nu,u0,v) )
   + int2d(th)( - .25*Conv(u1c,u1c,v) - .25*Conv(u1s,u1s,v)- .25*Conv(u2c,u2c,v) - .25*Conv(u2s,u2s,v) )
   + BoundaryconditionsMF(du0x,du0y,vx,vy,"S") 	
 	;
 			
// block 2 : part of the NS equation proportional to cos (omega t)
varf NLOpF2([du1cx,du1cy,du1cp],[vx,vy,vp]) =
	 int2d(th)( NSL(nu,u0,u1c,v) )
	+ int2d(th)( -.5*Conv(u1c,u2c,v)-.5*Conv(u1s,u2s,v) )
	- int2d(th) ( sigma1 * (u1cx*vx+u1cy*vy) )
	- int2d(th) ( omega * (u1sx*vx+u1sy*vy ) ) 
    + Boundaryconditions(du1cx,du1cy,vx,vy,"A")			
	;
	
// block 3 : part of the NS equation proportional to sin (omega t)	
varf NLOpF3([du1sx,du1sy,du1sp],[vx,vy,vp]) =
	 int2d(th)( NSL(nu,u0,u1s,v)  )  
	+ int2d(th)( -.5*Conv(u1c,u2s,v)+.5*Conv(u1s,u2c,v) )            
   	- int2d(th) ( sigma1 * (u1sx*vx+u1sy*vy) )
	+ int2d(th) ( omega * (u1cx*vx+u1cy*vy ) )
	 + Boundaryconditions(du1sx,du1sy,vx,vy,"A")	 
	;
	
// block 4 : part of the NS equation proportional to cos ( 2 omega t)	
varf NLOpF4([du2cx,du2cy,du2cp],[vx,vy,vp]) =
	 int2d(th)( NSL(nu,u0,u2c,v) )
	+ int2d(th) (-.25*Conv(u1c,u1c,v)+.25*Conv(u1s,u1s,v) )
	- int2d(th) ( sigma1 * (u2cx*vx+u2cy*vy) )
	- int2d(th) ( 2*omega * (u2sx*vx+u2sy*vy ) ) 
    + Boundaryconditions(du2cx,du2cy,vx,vy,"S")			
	;
	
// block 5 : part of the NS equation proportional to sin ( 2 omega t)	
varf NLOpF5([du2sx,du2sy,du2sp],[vx,vy,vp]) =
	  int2d(th)( NSL(nu,u0,u2s,v)  ) 
	+ int2d(th) (-.5*Conv(u1c,u1s,v) )              	
	- int2d(th) ( sigma1 * (u2sx*vx+u2sy*vy) )
	+ int2d(th) ( 2*omega * (u2cx*vx+u2cy*vy ) ) 
	+ Boundaryconditions(du2sx,du2sy,vx,vy,"S")		
	;

// blocks 6 : fix the phase with imag(lift)
// this is constructed directly when assemblying the matrix
cout << " defining operators for nonlinear term... done" << endl;

	



/////////////////////////////////////////////////////////////////////////////////
//////// varf for Linear part 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for linear term..." << endl;

// block 1-1 : NS for base flow
varf LinOp11([du0x,du0y,du0p],[vx,vy,vp]) =
   	int2d(th)( NSL(nu,u0,du0,v) )        
 	+ BoundaryconditionsMF(du0x,du0y,vx,vy,"S");

// block 1-2 : nonlinear term (real parts)
varf LinOp12([du1cx,du1cy,du1cp],[vx,vy,vp]) =
      int2d(th)( -.5*Conv(u1c,du1c,v) );

// block 1-3 : nonlinear term (real parts)
varf LinOp13([du1sx,du1sy,du1sp],[vx,vy,vp]) =
      int2d(th)( -.5*Conv(u1s,du1s,v) );

// block 1-4 : nonlinear term (real parts)
varf LinOp14([du2cx,du2cy,du2cp],[vx,vy,vp]) =
      int2d(th)( -.5*Conv(u2c,du2c,v) );

// block 1-5 : nonlinear term (real parts)
varf LinOp15([du2sx,du2sy,du2sp],[vx,vy,vp]) =
      int2d(th)( -.5*Conv(u2s,du2s,v) );

 			

 	
 	
 			
// block 2-1 : effect of du0 on u1c			
varf LinOp21([du0x,du0y,du0p],[vx,vy,vp]) =
	 int2d(th)( - Conv(du0,u1c,v) );
             
// block 2-2 : effect of du1c on u1c            
varf LinOp22([du1cx,du1cy,du1cp],[vx,vy,vp]) =
	int2d(th)( NSL(nu,u0,du1c,v) )
	//+ int2d(th)( - Conv(du1c,u2c,v) ) DIOGO has corrected this///////////////////////////////////////////////////////
	+ int2d(th)( -.5*Conv(du1c,u2c,v) )
	- int2d(th)( sigma1*(du1cx*vx+du1cy*vy) )
	+ Boundaryconditions(du1cx,du1cy,vx,vy,"A");
 			
// block 2-3 : effect of du1s on u1c
varf LinOp23([du1sx,du1sy,du1sp],[vx,vy,vp]) =
	//int2d(th)( - Conv(du1s,u2s,v)  ) DIOGO has corrected this///////////////////////////////////////////////////////
	int2d(th)( - .5*Conv(du1s,u2s,v)  )
	+ int2d(th)(-omega*(du1sx*vx+du1sy*vy));

// block 2-4 : effect of du2c on u1c             
varf LinOp24([du2cx,du2cy,du2cp],[vx,vy,vp]) =
	//int2d(th)( - Conv(u1c,du2c,v)  );DIOGO has corrected this///////////////////////////////////////////////////////
	int2d(th)( - .5*Conv(u1c,du2c,v)  );
          
// block 2-5 : effect of du2s on u1c
varf LinOp25([du1sx,du1sy,du1sp],[vx,vy,vp]) =
	//int2d(th)( - Conv(u1s,du2s,v)  );DIOGO has corrected this///////////////////////////////////////////////////////
	int2d(th)( - .5*Conv(u1s,du2s,v)  );

// block 2-6 : effect of domega on eigenmode-real equations
varf LinOp26([du0x,du0y,du0p],[vx,vy,vp]) =  
			  int2d(th)(-(u1sx*vx+u1sy*vy)); // this is to be multiplied by domega





// block 3-1 : effect of du0 on u1s		
varf LinOp31([du0x,du0y,du0p],[vx,vy,vp]) =
	 int2d(th)( - Conv(du0,u1s,v) );
	             
// block 3-2 : effect of du1c on u1s
varf LinOp32([du1cx,du1cy,du1cp],[vx,vy,vp]) =
	//int2d(th)( - Conv(du1c,u2s,v)  ) DIOGO has corrected this///////////////////////////////////////////////////////
	int2d(th)( - .5*Conv(du1c,u2s,v)  )
	+ int2d(th)(omega*(du1cx*vx+du1cy*vy));
			 			
// block 3-3 : effect of du1s on u1s         
varf LinOp33([du1sx,du1sy,du1sp],[vx,vy,vp]) =
	int2d(th)( NSL(nu,u0,du1s,v) )
	//+ int2d(th)( Conv(du1s,u2c,v)  ) DIOGO has corrected this///////////////////////////////////////////////////////
	+ int2d(th)( .5*Conv(du1s,u2c,v)  )	
	- int2d(th) ( sigma1*(du1sx*vx+du1sy*vy) )
	+ Boundaryconditions(du1sx,du1sy,vx,vy,"A");

// block 3-4 : effect of du2c on u1s             
varf LinOp34([du2cx,du2cy,du2cp],[vx,vy,vp]) =
	//int2d(th)( Conv(u1s,du2c,v)  ); DIOGO has corrected this///////////////////////////////////////////////////////
	int2d(th)( .5*Conv(u1s,du2c,v)  );
           
// block 3-5 : effect of du2s on u1s
varf LinOp35([du1sx,du1sy,du1sp],[vx,vy,vp]) =
	//int2d(th)( -Conv(u1c,du2s,v)  ); DIOGO has corrected this///////////////////////////////////////////////////////
	int2d(th)( -.5*Conv(u1c,du2s,v)  ); 

// block 3-6 : effect of domega on eigenmode-real equations
varf LinOp36([du0x,du0y,du0p],[vx,vy,vp])
	=  int2d(th)((u1cx*vx+u1cy*vy)); // this is to be multiplied by domega




// block 4-1 : effect of du0 on u2c
varf LinOp41([du0x,du0y,du0p],[vx,vy,vp]) =
	 int2d(th)( - Conv(du0,u2c,v) );  
 	
// block 4-2 : effect of du1c on u2c
varf LinOp42([du1cx,du1cy,du1cp],[vx,vy,vp]) =
 			 int2d(th)( - .5*Conv(du1c,u1c,v)  );
 			
// block 4-3 : effect of du1s on u2c
varf LinOp43([du1sx,du1sy,du1sp],[vx,vy,vp]) =
 			 int2d(th)( + .5*Conv(du1s,u1s,v)  );
 			 
// block 4-4 : effect of du2c on u2c           
varf LinOp44([du2cx,du2cy,du2cp],[vx,vy,vp]) =
             int2d(th)( NSL(nu,u0,du2c,v) )
            - int2d(th)( sigma1*(du2cx*vx+du2cy*vy) )
 			+ Boundaryconditions(du2cx,du2cy,vx,vy,"S");
 			
// block 4-5 : effect of du2s on u2c
varf LinOp45([du2sx,du2sy,du2sp],[vx,vy,vp]) =
			 int2d(th)(-2*omega*(du2sx*vx+du2sy*vy));
			
// block 4-6 : effect of domega on u2c
varf LinOp46([du2sx,du2sy,du2sp],[vx,vy,vp]) =
			 int2d(th)(-2*(u2sx*vx+u2sy*vy));			




// block 5-1 : effect of du0 on u2s
varf LinOp51([du0x,du0y,du0p],[vx,vy,vp]) =
	 int2d(th)( - Conv(du0,u2s,v) );  
 	
// block 5-2 : effect of du1c on u2s
varf LinOp52([du1cx,du1cy,du1cp],[vx,vy,vp]) =
	//int2d(th)( - .5*Conv(du1c,u1s,v)  ); DIOGO has corrected this///////////////////////////////////////////////////////
	int2d(th)( - .5*Conv(du1c,u1s,v)  );
 			
// block 5-3 : effect of du1s on u2s
varf LinOp53([du1sx,du1sy,du1sp],[vx,vy,vp]) =
	//int2d(th)( - Conv(u1c,du1s,v)  );  DIOGO has corrected this///////////////////////////////////////////////////////
	int2d(th)( - .5*Conv(u1c,du1s,v)  );

// block 5-4 : effect of du2c on u2s
varf LinOp54([du2cx,du2cy,du2cp],[vx,vy,vp]) =
			 int2d(th)(2*omega*(du2cx*vx+du2cy*vy));
 			 
// block 5-5 : effect of du2s on u2s           
varf LinOp55([du2sx,du2sy,du2sp],[vx,vy,vp]) =
             int2d(th)( NSL(nu,u0,du2s,v) )
            - int2d(th)( sigma1*(du2sx*vx+du2sy*vy) )
 			+ Boundaryconditions(du2sx,du2sy,vx,vy,"S");
 			
// block 5-6 : effect of domega on u2s
varf LinOp56([du2cx,du2cy,du2cp],[vx,vy,vp]) =
			 int2d(th)(2*(u2cx*vx+u2cy*vy));
 			 


// bloc 6-3 : to fix the phase by imposing Lift(u1s) = 0
varf LinOp63([vx,vy,vp],[du1sx,du1sy,du1sp])	
	= Lift(1/Re,du1sx,du1sy,du1sp,symmetry);


cout << " defining operators for linear term... done" << endl << endl;




///// BEGINING OF NEWTON LOOP
real dXX = 1;
domega = 1;
int iter=1;
while(abs(dXX)>1e-4&&abs(dXX)<1000&&iter<50)
	{ 
	cout << endl << endl << "Newton loop step " << iter << endl;

	cout << "constructing rhs... " << endl;

	real[int] RHSF1(u0x[].n), RHSF2(u0x[].n), RHSF3(u0x[].n), RHSF4(u0x[].n), RHSF5(u0x[].n); 
	RHSF1 = NLOpF1(0,XXMh);
	RHSF2 = NLOpF2(0,XXMh);
	RHSF3 = NLOpF3(0,XXMh);
	RHSF4 = NLOpF4(0,XXMh);
	RHSF5 = NLOpF5(0,XXMh);	
	real RHSF6 = Lift(1/Re,u1sx,u1sy,u1sp,symmetry); 	
	
	real[int] RHS = [RHSF1, RHSF2, RHSF3, RHSF4, RHSF5, RHSF6];		
//	cout <<  " max RHS : " << RHSF1.l2 <<  ", " << RHSF2.l2 <<  ", " << RHSF3.l2 <<  ", " << RHSF4 << endl;


	
	cout << " Assembling matrix..." << endl;
	
matrix matLinOp11 = LinOp11(XXMh,XXMh);
matrix matLinOp12 = LinOp12(XXMh,XXMh);
matrix matLinOp13 = LinOp13(XXMh,XXMh);
matrix matLinOp14 = LinOp14(XXMh,XXMh);
matrix matLinOp15 = LinOp15(XXMh,XXMh);

matrix matLinOp21 = LinOp21(XXMh,XXMh);
matrix matLinOp22 = LinOp22(XXMh,XXMh);
matrix matLinOp23 = LinOp23(XXMh,XXMh);
matrix matLinOp24 = LinOp24(XXMh,XXMh);
matrix matLinOp25 = LinOp25(XXMh,XXMh);
real[int] matLinOp26 = LinOp26(0,XXMh);

matrix matLinOp31 = LinOp31(XXMh,XXMh);
matrix matLinOp32 = LinOp32(XXMh,XXMh);
matrix matLinOp33 = LinOp33(XXMh,XXMh);
matrix matLinOp34 = LinOp34(XXMh,XXMh);
matrix matLinOp35 = LinOp35(XXMh,XXMh);
real[int] matLinOp36 = LinOp36(0,XXMh);

matrix matLinOp41 = LinOp41(XXMh,XXMh);
matrix matLinOp42 = LinOp42(XXMh,XXMh);
matrix matLinOp43 = LinOp43(XXMh,XXMh);
matrix matLinOp44 = LinOp44(XXMh,XXMh);
matrix matLinOp45 = LinOp45(XXMh,XXMh);
real[int] matLinOp46 = LinOp46(0,XXMh);

matrix matLinOp51 = LinOp51(XXMh,XXMh);
matrix matLinOp52 = LinOp52(XXMh,XXMh);
matrix matLinOp53 = LinOp53(XXMh,XXMh);
matrix matLinOp54 = LinOp54(XXMh,XXMh);
matrix matLinOp55 = LinOp55(XXMh,XXMh);
real[int] matLinOp56 = LinOp56(0,XXMh);

real[int] matLinOp63 = LinOp63(0,XXMh);

matrix LinOp = [	[matLinOp11,matLinOp12,  matLinOp13, 	matLinOp14, 	matLinOp15, 	0 ],
					[matLinOp21,matLinOp22,  matLinOp23,	matLinOp24, 	matLinOp25,	matLinOp26 ],
					[matLinOp31,matLinOp32,  matLinOp33,	matLinOp34, 	matLinOp35,	matLinOp36 ],
					[matLinOp41,matLinOp42,  matLinOp43,	matLinOp44, 	matLinOp45,	matLinOp46 ],
					[matLinOp51,matLinOp52,  matLinOp53,	matLinOp54, 	matLinOp55,	matLinOp56 ],
					[	0,		0, 			 matLinOp63',	0,				0,			0		 ]
			   ];
				
cout << " Assembling matrix... done" << endl;


cout << " LU-ing matrix..." << endl;
set(LinOp,solver=sparsesolver);
cout << " LU-ing matrix... done" << endl;

	
	cout << " solving BIG problem..." << endl;
	real[int] dX(LinOp.n);
	dX = LinOp^-1*RHS;
	[du0x[], du1cx[], du1sx[], du2cx[], du2sx[], domega] = dX;
	
	u0x[] -= du0x[];
	u1cx[] -= du1cx[];
	u1sx[] -= du1sx[];
	u2cx[] -= du2cx[];
	u2sx[] -= du2sx[];
	omega -= domega;

	cout << endl << "   ### ||du0||, ||du1,r||, ||du1,i||, ||du2,r||, ||du2,i||, domega : " << endl; 
	cout << du0x[].l2 << " " << du1cx[].l2 << " " << du1sx[].l2 << " " << du2cx[].l2 << " " << du2sx[].l2 << " " << -domega << endl;
	dXX = du0x[].l2+du1cx[].l2+du1sx[].l2+du2cx[].l2+du2sx[].l2+abs(domega);
	
	cout << "   ### ||u0||, ||u1,r||, ||u1,i||, ||u2,r||, ||u2,i||  : " << endl; 
	cout << u0x[].l2 << " " << u1cx[].l2 << " " << u1sx[].l2  << " " << u2cx[].l2 << " " << u2sx[].l2  << endl;

	
	cout <<  "   ### omega = " << omega << endl;
	cout << "   ### Energy of perturbation A = " << EnergyNormCS(u1c,u1s,symmetry)  << endl;	
	cout << " 	### Ly,c = " << Lift(1/Re,u1cx,u1cy,u1cp,symmetry)  << endl ; 
	cout << "   ### [Fy,1c Fy,1s]  = [ " << Lift(1/Re,u1cx,u1cy,u1cp,symmetry)
						<< " , "  << Lift(1/Re,u1sx,u1sy,u1sp,symmetry) << endl;
	cout << "   ### [Fx,0, Fx,2c Fx,2s]  = [ " << Drag(1/Re,u0x,u0y,u0p,symmetry) 
						<< " , "  << Drag(1/Re,u2cx,u2cy,u2cp,symmetry) << " , " 
						<< Drag(1/Re,u2sx,u2sy,u2sp,symmetry) << " ] " << endl;
	//plot(u0x,cmm="mean flow approximation iteration "+iter, fill=1,value=1,wait=0);

	iter++;
	if(u1cx[].l2<1e-6){dXX = 1e30; };
	};
	
	if(abs(dXX)>1000) 
	{
	SFWriteBaseFlow(ffdatadir+"MeanFlow.ff2m",ub,"MeanFlow",-1);
	SFWriteMode(ffdatadir+"HBMode1.ff2m",u1,1i*omega+sigma1,1i*omegaM+sigma1,"HarmonicMode",-1);
	cout << endl << endl << "#####################################################################@" << endl << endl;
	cout << "$$ Newton Loop DIVERGED " << endl;	
	cout << "$$ (return code is 2)" << endl;
	exit(1);
	}
	
	else
	{
	cout << endl << endl << "#####################################################################@" << endl << endl
	     << "HB MODEL : Newton Loop converged in " << iter << " iterations " << endl;
	cout << " >>> Omegac = " << omega << endl;	
	cout << " >>> Energy of perturbation A = " << EnergyNormCS(u1c,u1s,symmetry)  << endl;	
	cout << " 	### Fy = " << Lift(1/Re,u1cx,u1cy,u1cp,symmetry) << "* cos(omega t) "  << endl ; 
	cout << "   ### Fx = " << Drag(1/Re,u0x,u0y,u0p,symmetry) 
						<< " + "  << Drag(1/Re,u2cx,u2cy,u2cp,symmetry) << " * cos (2 omega t) " 
						<< " + "  << Drag(1/Re,u2sx,u2sy,u2sp,symmetry) << " * sin (2 omega t) " << endl;
	
/// GENERATES OUTPUT FILES

// mean flow
{
	ofstream file(ffdatadir+"MeanFlow.txt");
	file << u0x[]; 
	file << endl << endl << Re;
}; 
SFWriteBaseFlow(ffdatadir+"MeanFlow.ff2m",u0,"MeanFlow",iter);


// fundamental
    [u1x,u1y,u1p] = [u1cx-1i*u1sx,u1cy-1i*u1sy,u1cp-1i*u1sp]; 
{
 	ofstream file(ffdatadir+"HBMode1.txt");
   	file << u1x[] ;	
   	file << omega*(1+0i)  << endl;
};
//SFWriteMode(ffdatadir+"HBMode1.ff2m",u1,1i*omega+sigma1,1i*omega+sigma1,"HarmonicMode",iter);
SFWriteHBMode(ffdatadir+"HBMode1.ff2m",u2,1i*omega+sigma1,1,symmetryODD,iter);
cout << "after macro" << endl;
   

// harmonic
 [u2x,u2y,u2p] = [u2cx-1i*u2sx,u2cy-1i*u2sy,u2cp-1i*u2sp]; 
{
 	ofstream file(ffdatadir+"HBMode2.txt");
   	file << u2x[] ;	
   	file << omega*(1+0i)  << endl;
};



//SFWriteMode(ffdatadir+"HBMode2.ff2m",u2,2*(1i*omega+sigma1),2*(1i*omega+sigma1),"SecondHarmonicMode",iter);
SFWriteHBMode(ffdatadir+"HBMode2.ff2m",u2,1i*omega+sigma1,2,symmetryEVEN,iter);



/*
if(copyfile=="yes")
{
cout << " COPYING Output into guess for next calculation..." << endl; 
{
	ofstream file(ffdatadir+"MeanFlow_guess.txt");
	file << u0x[]; 
	file << endl << endl << Re;
};
{
 	ofstream file(ffdatadir+"HBMode1_guess.txt");
   	file << u1x[] ;	
   	file << endl << endl
   	<< endl << omega*(1+0i)  << endl;
};
{
 	ofstream file(ffdatadir+"HBMode2_guess.txt");
   	file << u2x[] ;	
   	file << endl << endl
   	<< endl << omega*(1+0i)  << endl;
};
};
*/

if(EnergyNormCS(u1c,u1s,symmetry)<1e-5)
	{
		cout << "$$ WARNING : Energy-norm is very small ; most likely converged to steady solution" << endl;
		cout << "$$ (return code is 2)" << endl;
		exit(2);
	}
	else
	{
		cout << "$$ Leaving SF_HB2 , correctly converged " << endl;
		cout << "$$ (return code is 0)"  << endl;
		exit(0);
	};

};
	
// END PROGRAM

