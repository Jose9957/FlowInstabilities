//  PROGRAM Newton_Template.edp
//  Template explaining the structure of a StabFem BaseFlow (Newton) solver

include "StabFem.idp" // this file is normally in the working directory

//		CHAPTER 1 : parameters
IFMACRO(!SFInputParametersNewton) /* Customizable macro */
macro SFInputParametersNewton()
	Re = getARGV("-Re",0.);
	string symmetryBaseFlow=getARGV("-Symmetry","N");
	//EOM
ENDIFMACRO
SFInputParametersNewton; /* Calls the customizable macro */

//		CHAPTER 2 : read files
mesh th=readmesh(themeshfilename);
	(...)
ifstream file(ffdatadir+"BaseFlow_guess.txt");
file >> ux[];

//		CHAPTER 3 : Macros
(...)

//		CHAPTER 4 : Linear problem to be solved at each step of Newton
problem NewtonIter([dux,duy,dup],[vx,vy,q]) =
    int2d(th)( -2*nu*(D(du):D(v)) + q*div(du) + div(v)*dup	- Conv(up,du,v) )
  + int2d(th)( -2*nu*(D(up):D(v)) + q*div(up) + div(v)*upp -.5*Conv(up,up,v) )
  + BoundaryconditionsBaseFlow(du,up,v);

//		CHAPTER 5 : Newton loop
while((enerl2>tolerance)&(enerl2<50)&(iter<=Nitermax))
 {
	upx[]=ux[];
    NewtonIter ;
    ux[] = ux[]+dux[];
	enerl2=dux[].l2;
  } ;

//		CHAPTER 6 : PostProcessing
IFMACRO(!SFWriteBaseFlow) /* Customizable macro */
macro SFWriteBaseFlow(filename,u,typeFlow,iter) /* Default value of the customizable macro */
	fespace p1forff2m(th,P1);  p1forff2m vort,psi,test;
	CalcVort(psi,vort);  CalcPsi(psi,vort,test);
	ofstream file(filename);
	file << "### Data generated by Freefem++ ; " << endl;
        file << "BaseFlow for a 2D-incompressible problem (using GENERIC MACRO)" << endl;
        file << "datatype " << typeFlow << " datastoragemode ReP2P2P1.1 datadescriptors ux,uy,p,Re" ;
				file << " meshfilename " << themeshfilename << endl;
	file << "real* Re P1 vort P1 psi real iter " << endl ;
	file << Re << endl;
	for (int j=0;j<vort[].n ; j++) file << vort[][j] << endl;
	for (int j=0;j<vort[].n ; j++) file << psi[][j] << endl;
	file << iter << endl;
//EOM
ENDIFMACRO

ofstream file(ffdatadir+"BaseFlow.txt"); // file in .txt format for FreeFem solvers
file << ux[] << endl << Re;

SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",u,"BaseFlow",iter); // file in .ff2m format for driver
