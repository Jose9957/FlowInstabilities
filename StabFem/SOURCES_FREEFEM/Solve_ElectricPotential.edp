//
// Program Solve_ElectricPotential.edp
// This program solves an electric potential problem with the form :
//
// Delta Phi = 0
// with boundary conditions ;
// Phi = 0 on "collector" (label 2, possibly 201,202,203...)
// Phi = 1 on "emitter" (label 21,22,23,...)
// Neumann on boundary label 5 (or others)
// Periodicity on labels 23 and 44 (if present in mesh)

// Input parameters (command line or piped):
// Input files :
//  mesh.msh
// Output files :
//  Phicrit.txt
//  Phicrit.ff2m
//
// This program belongs to the StabFem project distributed under gnu licence.
//
// History : this program was initially developed by Sergiu to predict critical potential for corona discharge.
// (to be cleaned up a little bit)


cout << "Loading parameters, macros & functions for DC corona..." <<endl;
//load "MUMPS"
load "Element_P3";
load "lapack"


include "StabFem.idp"

// Chapter 1 : parameters
real Eac, Pe, Vc;



//cout << " Enter Vc : " ;
//cin >> Vc;
//cout << Vc << endl;
Vc = 0;


//Chaputre 2 /MAcros

//INPUT MACROS FUNCTIONS
func r = sqrt(x^2+y^2);
macro grad(u) [dx(u),dy(u)] // gradient
macro ngrad(u) [dx(u),dy(u)]'*[N.x,N.y] // gradient to local normal N.
macro norm(phi) sqrt(dx(phi)^2+dy(phi)^2) //electric field amplitude
macro gradgrad(u,v) (dx(u)*dx(v)+dy(u)*dy(v))//
macro ds(u) (N.y*dx(u) - N.x*dy(u))//EOM



mesh Th2,THSH;
Th2 = readmesh(ffdatadir+"mesh.msh");
THSH = emptymesh(Th2);



//FESPACEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
fespace Vh2(Th2,P2,periodic=MESHPERIODICITY);
fespace Xh2(Th2,[P3,P1],periodic=MESHPERIODICITY);
// fespaces for volumic fields with periodic condition on 44 and 43

fespace VRh(Th2,P1);

fespace Xh2IO(Th2,P2,periodic=MESHPERIODICITY); 
// this one is used for input/output (drivers do not support P3)


Vh2 p0o,uho,Uphi;    //initial function phi



// Poisson Homogene to initialize the harmonic potential -------------------
problem InitPhiOUT(p0o,uho,strategy=1)= //initialization for outer potential
    -int2d(Th2)(gradgrad(p0o,uho))
//    +int1d(Th2,21,22,23)(ngrad(p0o)*uho) // -> The initial electric field at the interface can be guessed as E(Gamma) ~ a*Ea/r_Gamma. The surface electric Field Ea can be estimated from Peek's law or the asymtptotic results "Monrolin et al., Phys. Plasmas, 2018".
    +on(2,p0o=0)
    +on(21,22,23,p0o=1);





InitPhiOUT;
Uphi = p0o;
plot(Uphi,wait=true);

VRh Ex, Ey, Enorm;
Ex = -dx(Uphi);
Ey = -dy(Uphi);
Enorm = sqrt(Ex^2+Ey^2); 
real Emax;
Emax = Enorm[].max;


plot(Ex,wait=true);
plot(Ey,wait=true);
plot(Enorm,wait=true);



cout<<"Uphi"<<Uphi.n<<endl;







int k=2;
real Eem=int1d(Th2,21)(ngrad(Uphi))/(int1d(Th2,21)(1.)+1e-30);
real Eem2=int1d(Th2,22)(ngrad(Uphi))/(int1d(Th2,22)(1.)+1e-30);

real Phia1=(int1d(Th2,21)(Uphi)/int1d(Th2,21)(1.))-int1d(Th2,2)(Uphi)/int1d(Th2,2)(1.);
real Phia2=(int1d(Th2,22)(Uphi)/(int1d(Th2,22)(1.)+1e-30)-int1d(Th2,2)(Uphi)/(int1d(Th2,2)(1.)+1e-30));

//Peut etre prendre le maximum de Eacchap sur l'emeteur


//////////////////////////////////////////////////////////////////////////////////
//
//      CHAPTER 6 : PostProcessing
//
   IFMACRO(!SFWriteData)
macro SFWriteData(filename,U,typeFlow,iter)
    {
        ofstream file(filename);
    file << "### Data generated by Freefem++ ; " << endl;
        file << "BaseFlow for an electric discharge problem with Kaptsov approximation" << endl;
        file << "datatype Phicrit datastoragemode ReP2 datadescriptors phi" << endl;
    file << "real* Eem real* Eem2 real* Phia1 real* Phia2 real* Vc real* Emax P1 Ex P1 Ey P1 Enorm" << endl ;
        file << Eem << endl;
        file << Eem2 << endl;
        file << Phia1 << endl;
        file << Phia2 << endl;
        file << Emax << endl;
        file << Vc << endl;
        for (int j=0;j<Ex[].n ; j++) file << Ex[][j] << endl;
        for (int j=0;j<Ex[].n ; j++) file << Ey[][j] << endl;
        for (int j=0;j<Ex[].n ; j++) file << Enorm[][j] << endl;

    };
//EOM
ENDIFMACRO





// conversion to a format compatible with drivers (P3 not available)        
        Xh2IO UIOphi;
        UIOphi = Uphi;
plot(UIOphi,wait=true);
cout<<"UIOphi"<<UIOphi.n<<endl;
        {
          ofstream file(ffdatadir+"Phicrit.txt"); // file in .txt format for FreeFem solvers
          file << UIOphi[];
        };


    SFWriteData(ffdatadir+"Phicrit.ff2m",UIO,"Phicrit",k); // file in .ff2ml format for StabFem driver

cout << "$$$$ SUCESSFULLY LEAVING Newton_Kaptsov.edp "  << endl;
