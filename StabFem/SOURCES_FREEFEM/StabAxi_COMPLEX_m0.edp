//
//  PROGRAM Stab_Axi_Complex_m0.edp
//	
//	Performs the linear stability analysis of an axisymmetric base flow USING COMPLEX MAPPING
//
//   IMPORTANT NOTICE : this program requires SLEPC to work in Arnoldi mode (multiple eigenvalues)
//	 if SLEPC is not installed you can still work in shift-invert mode (i.e. nev=1)
// 
//  The parameters of the complex mapping (ParamMap###) are defined in a file "Param_Mapping.edp" 
// 
//  THIS VERSION OF THE PROGRAM +ffdatadir+S ONLY FOR M=0 AND IS ADAPTED FROM OLD SOURCES FROM circa 2015 (most likely P. Bonnefis)  
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	Re , shift(Re,im) , m (should be ZERO !),  Type (D,A or S), nev 
//
//   this solver will use either Arnoldi (if nev>1) or simple Shift-invert (if nev=1)
//
//	INPUT FILES :
//		BaseFlow.txt	-> base flow 
// 		mesh.msh 			->  mesh in Freefem format
//  OUTPUT FILES :
//	single-mode calculation :
//		Eigenmode.txt   (txt format for FreeFem)
//      Eigenmode.ff2m  (ff2m format for stabfem)
// 		EigenmodeA.txt  ADJOINT  (txt format for FreeFem)
//      EigenmodeA.ff2m ADJOINT  (ff2m format for stabfem)
//      Sensitivity.txt 
//		Sensitivity.ff2m
//
// multiple-mode calculation :
//  	Eigenmode##.txt   (txt format for FreeFem)
//      Eigenmode##.ff2m  (ff2m format for stabfem)
//
// in all modes :
//		Spectrum.txt -> All computed Eigenvalues
//
// 
// 	ERROR MANAGEMENT : 
//      if Newton iteration diverges, Eigenmode.txt is not generated and "iter" parameter in Eigenmode.ff2m is -1.
//

cout << "$$$$ ENTERING Stab_Axi_COMPLEX_m0.edp " << endl << "$$" << endl; 


include "StabFem.idp";

include "Param_Mapping.edp";



cout << "$$" << endl << "$$ USING COMPLEX MAPPING ; gamma = " << ParamMapGC << endl << "$$" << endl ;




IFMACRO(!NormalizeMode)
macro NormalizeMode(u)
{
real NORM = int2d(th)((abs(u#x)^2+abs(u#r)^2*y);
u#x[] = u#x[]/(NORM+1e-12);
}
//EOM
ENDIFMACRO

/////////////////////////////////////////////////////////////////////////////////
//////////////////----->             parameters         <-----///////////////////
/////////////////////////////////////////////////////////////////////////////////


	cout << "$$ ENTERING Stab_Axi_COMPLEX.edp " << endl << "$$" << endl; 
	
	real Re;                  
	cout << "$$ Enter Reynolds :   " << endl; 
	cin  >> Re;
	real nu = 1/Re;  
    // If Nu is something else than 1/Re define a macro CUSTOMnu in your StabFem.idp file
    IFMACRO(CUSTOMnu)
    nu = CUSTOMnu;
    ENDIFMACRO	
    real shiftr,shifti;	
	cout << "$$ Enter SHIFT (re,im) :   " << endl; 
	cin  >> shiftr >> shifti;
	complex shift = 1i*shifti+shiftr;
	int m;
	cout << "$$ Wavenumber ? " << endl;
	cin >> m;
	if(m!=0){exit(10);};
	
	string iadjoint; 
	cout << " Direct (D), Adjoint (A), or both+sensitivity (S) ?" << endl;
	cin >> iadjoint;	

	

	int nev;
    cout << "$$ Enter nev ? (will use simple shift-invert if nev = 1)" << endl;
    cin >> nev ;
	int ncv = 4*nev;   ///// Krylov Basis
	real eps = 1e-12; // desingularisation term for matrix B, useful with some solvers

	
	cout << "$$ ### PARAMETERS SELECTED : " << endl;
	cout << "$$ Re = " << Re<< endl;
	cout << "$$ shift = " << shift << endl;
	cout << "$$ wavenumber m = " << m << endl;
	
	
	if (iadjoint =="D") {cout << "$$ DIRECT PROBLEM" << endl;}
		else if (iadjoint =="A") {cout << "$$ ADJOINT PROBLEM" << endl;}
		else if (iadjoint =="S") {cout << "$$ DIRECT+ADJOINT PROBLEM INCLUDING SENSITIVITY" << endl;}
		else {cout << "$$ ERROR WHEN SELECTING PROBLEM TYPE" << endl;};
	
	cout << "$$ nev = " << nev << endl;
	
	



mesh th=readmesh(ffdatadir+"mesh.msh");                    ///// Read mesh


fespace Xh(th,P2);             ////// f.e. space for vel.
fespace Mh(th,P1);            ////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1]); ////// f.e. space for triplet [u,v,p]
fespace XXXMh(th,[P2,P2,P2,P1]); ////// f.e. space for triplet [u,v,p]
XXMh<complex> [ux,ur,up];                 ///////  -> unknown for the Navier-Stokes problem
XXMh<complex> [vx,vr,vp];                 ///////  -> test for Navier-Stokes
XXMh<complex> [Ubx,Ubr,Ubp];          ///////  -> Base Flow (in case we start with a 2-component one)







/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
///////////  Load baseflow   ////////////////////////////////////////////////////
		
		real Reans;
        cout << "$$ reading UVP baseflow " << endl;
        ifstream file(ffdatadir+"BaseFlow.txt");
        file >> Ubx[];
		file >> Reans;
        
	if(Reans!=Re) 
	{
		cout << "$$ Warning : Re differs from the one of the read base flow (Reans = " +Reans+" ); is that really what you mean ???" << endl;
	};

/////////////////////////////////////////////////////////////////////////////////
//////// varf for generalized eigenvalue problem: 

////////////////////////////////////////////////////////////////////////////////////



/// declaration probleme
///  

int isshift=1; 
//IFMACRO(EIGENSOLVER,SLEPC)
//if(nev>1) {isshift=0;}; // WARNING the shift should be incorporated in the operator for simple shift-invert and Arpack, but normally not when using SLEPc !
//ENDIFMACRO


macro rr 
	Rphys(x,y,ParamMap) 
//EOM

	varf LNSE([ux,ur,up],[vx,vr,vp],eps=1e-16) = 
	int2d(th)(
	(
	- rr*vx*(
		(Ubx*dX(ux)+ux*dX(Ubx)+Ubr*dY(ux)+ur*dY(Ubx))	 )  				
	- rr*vr*(
		(Ubx*dX(ur)+ux*dX(Ubr)+Ubr*dY(ur)+ur*dY(Ubr))	)	
	- nu*(rr*dX(ux)*dX(vx)+rr*dY(ux)*dY(vx)  
	      + rr*dX(ur)*dX(vr)+rr*dY(ur)*dY(vr)+1/rr*ur*vr  )  
	+ up*(rr*dX(vx)+vr+rr*dY(vr))
	- vp*(rr*dX(ux)+ur+rr*dY(ur))
	-rr*isshift*shift*(vx*ux+vr*ur)
	)*JJ ) 
	+ BoundaryconditionsStability2D(u,v);
//	fin declaration

	varf LNSEadjoint([vx,vr,vp],[ux,ur,up],eps=1e-16) = 
	int2d(th)(
	(
	- rr*vx*(
		(Ubx*dX(ux)+ux*dX(Ubx)+Ubr*dY(ux)+ur*dY(Ubx))	 )  				
	- rr*vr*(
		(Ubx*dX(ur)+ux*dX(Ubr)+Ubr*dY(ur)+ur*dY(Ubr))	)	
	- nu*(rr*dX(ux)*dX(vx)+rr*dY(ux)*dY(vx)  
	      + rr*dX(ur)*dX(vr)+rr*dY(ur)*dY(vr)+1/rr*ur*vr  )  
	+ up*(rr*dX(vx)+vr+rr*dY(vr))
	- vp*(rr*dX(ux)+ur+rr*dY(ur))
	-rr*isshift*shift*(vx*ux+vr*ur)	
	)*JJ ) 
	+ BoundaryconditionsStability2D(u,v);
//	fin declaration


//complex shiftSave = shift;
/// SLEPC DOES NOT NEED TO BE SHIFTED WHEN OPERATORS ARE BUILT
//IFMACRO(EIGENSOLVER,SLEPC)
//    shift = 0;
//ENDIFMACRO

////// BUILD B-MATRIX //////////////////////////////////////////////////////////////
	varf b([ux,ur,up],[vx,vr,q]) =  int2d(th) (rr*(vx*ux+vr*ur)*JJ);
		matrix<complex> B= b(XXMh,XXMh);  //////// see freefem++doc.pdf for the solver 
////////////////////////////////////////////////////////////////////////////////////

matrix<complex> OP,OPA;
complex shiftOP,shiftOPA;




if(nev>1)
////////////////////////////////////////////////////////////////////////
/// SOLUTION AND POSTPROCESSING FOR NEV>1 (built-in eigenvalue solver)

{
cout << "$$ Building matrices..." ;
////// BUILD OP-MATRIX=A-lambda*B //////////////////////////////////////////////////////////////
if(iadjoint=="D")
{ OP=LNSE(XXMh,XXMh); shiftOP = shift; }
else if(iadjoint=="A")
{ OP=LNSEadjoint(XXMh,XXMh); shiftOP = conj(shift); }
else if(iadjoint=="S") { cout << "$$ WARNING : in this program option S will work only for nev=1" << endl; };
cout << "$$ ... done !" << endl;
////////////////////////////////////////////////////////////////////////////////////


//// SOLVER ////

int k;
complex[int] ev(nev); // to store nev eigein values
complex[int,int] EigenVEC(OP.n,nev);

SFEVSOLVE(k,nev,OP,B,shiftOP,ev,EigenVEC);

XXXMh<complex> [int] [eux,eur,euphi,eup](nev);
int Nmodes = min(k,nev);
for (int i=0; i<Nmodes; i++)
{
	eux[i][] = EigenVEC(:,i);
};



	string namefile;
    namefile=ffdatadir+"Spectrum.txt";
    ofstream fileVP1(namefile); 
	
	for (int i=0;i<nev;i++)
	{
       fileVP1 << real(ev[i]) << " " << imag(ev[i]) << " " << Re << " " << 0 << " " << real(shift) << " " << imag(shift) << endl;
       	cout << "$$ valeur propre : " << i+1 << "  : " << ev[i] << endl;

 		 if(iadjoint=="D"){namefile=ffdatadir+"Eigenmode"+(i+1);}
 		 else{namefile=ffdatadir+"EigenmodeA"+(i+1);};
 		 {ofstream fileMode(namefile+".txt");
 		  ux[] = eux[i][];
 		  NormalizeMode(u);
 		  fileMode << ux[]; 
 		  fileMode << endl << endl << Re << endl << endl << real(ev[i]) << "   " << imag(ev[i])  << endl;
 		  }
 		 cout << "$$ Writing eigenmode in file " << namefile << endl;
 		 SFWriteMode(namefile+".ff2m",u,ev[i],shift,m,"EigenModeD",1);	 // MACRO DEFINED in StabFem_Macros.edp
 		 
 	};
}

////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

/// SIMPLE SHIFT-INVERT IF ONLY ONE MODE IS RESQUESTED
else
{


XXMh<complex> [ux0,ur0,p0],[uxdirect,urdirect,pdirect],[uxadjoint,uradjoint,padjoint]; 



	problem ShiftInvert([ux,ur,up],[vx,vr,vp],eps=1e-16) = 
	
	int2d(th)(
	(
	- rr*vx*(
		(Ubx*dX(ux)+ux*dX(Ubx)+Ubr*dY(ux)+ur*dY(Ubx))	 )  				
	- rr*vr*(
		(Ubx*dX(ur)+ux*dX(Ubr)+Ubr*dY(ur)+ur*dY(Ubr))	)	
	- nu*(rr*dX(ux)*dX(vx)+rr*dY(ux)*dY(vx)  
	      + rr*dX(ur)*dX(vr)+rr*dY(ur)*dY(vr)+1/rr*ur*vr  )  
	+ up*(rr*dX(vx)+vr+rr*dY(vr))
	- vp*(rr*dX(ux)+ur+rr*dY(ur))
	-rr*shift*(vx*ux+vr*ur)
	+ 1e-10*up*vp // term useful when not using Mumps ??????	
	)*JJ 
	) 
+ int2d(th)
    (-rr*(vx*ux0+vr*ur0)*JJ)
	
//	+ on(1,uz=0,ur=0.) // no conditions = zero traction (pressure) on inlet
    + on(1,ur=0)
  	+ on(2,ux=0.,ur=0.)	
	+ on(6,7,ur=0.);
//	set(ShiftInvert,solver=PETSC);
	
	
//	
//		problem ShiftInvert([ur,uz,p],[vr,vz,q],eps=1e-16) = 
//	int2d(th)(
//	(
//	- yphys*vz*(
//		(uzp*G*dx(uz)+uz*G*dx(uzp)+urp*Gy*dy(uz)+ur*Gy*dy(uzp))	 )  				
//	- yphys*vr*(
//		(uzp*G*dx(ur)+uz*G*dx(urp)+urp*Gy*dy(ur)+ur*Gy*dy(urp))	)	
//
//	- nu*(yphys*G*dx(uz)*G*dx(vz)+yphys*Gy*dy(uz)*Gy*dy(vz)  
//	      + yphys*G*dx(ur)*G*dx(vr)+yphys*Gy*dy(ur)*Gy*dy(vr)+1/yphys*ur*vr  )
//	  
//	+ p*(yphys*G*dx(vz)+vr+yphys*Gy*dy(vr))
//	- q*(yphys*G*dx(uz)+ur+yphys*Gy*dy(ur))
//	
//	-yphys*shift*(vz*uz+vr*ur)	
//	
//	)*1/(Gy*G)
//	) 
//+ int2d(th)
//    (-yphys*(vz*uz0+vr*ur0)*1/(Gy*G))
//	
////	+ on(1,uz=0,ur=0.) // no conditions = zero traction (pressure) on inlet
//  	+ on(2,uz=0.,ur=0.)	
//	+ on(6,7,ur=0.);
////	fin declaration

	
	
//	fin declaration







int testCB = exec("ls "+ffdatadir+"Eigenmode_guess.txt");
    	if (testCB!=0)
		{
		cout << "$$ No file Eigenmode_guess.txt : strarting from arbitrary initial condition" << endl;
		[ux0,ur0,p0] = [1,0,0];
		} 
		else
		{
		cout << "$$ Starting shift/invert from mode in file Eigenmode_guess.txt" << endl;
		ifstream cbin(ffdatadir+"Eigenmode_guess.txt");
		cbin >> ux0[];
		};


// selection of the computation to be performed : direct, adjoint or both
		
int directadjointA,directadjointB;
if(iadjoint=="D")
	{
	directadjointA = 1; directadjointB=1;
	cout << "$$ Shift-invert algorithm for DIRECT problem" << endl;
	}
else if(iadjoint=="A")
	{
	directadjointA = 2; directadjointB=2;
	cout << "$$ Shift-invert algorithm for ADJOINT problem" << endl;
	}
else if(iadjoint=="S")
	{
	directadjointA = 1; directadjointB=2;
	cout << "$$ Shift-invert algorithm for BOTH DIRECT AND ADJOINT problem" << endl;
	};
	

// LOOP TO SELECT WHICH COMPUTATION WILL BE DONE 
	for(int directadjoint=directadjointA;directadjoint<directadjointB+1;directadjoint++)	
	{

	if(directadjoint==1)
	{
		cout << "$$ Constructing operator for DIRECT problem ..." << endl;
		OP=LNSE(XXMh,XXMh,solver=sparsesolver);
		shiftOP = shift;
		cout << "$$ solving DIRECT problem ..." << endl;
	}
	else if(directadjoint==2)
	{
		cout << "$$ Constructing operator for ADJOINT problem ..." << endl;
		OP=LNSEadjoint(XXMh,XXMh,solver=sparsesolver);
		shiftOP = conj(shift);
		cout << "$$ Solving ADJOINT problem ..." << endl;
	};


	int itmax = 150;
	complex lambda0 = 1e6;
	real err = 1e6;
	real errmax=1e-6;
	complex lambda;
	
	varf brhs([ux,ur,up],[vx,vr,q]) = int2d(th)( (ux0*vx+ur0*vr)*rr*JJ );
//	varf Bf([ux0,ur0,up0],[vx,vr,q]) =  int2d(th) (rr*(vx*ux0+vr*ur0)*1/(Gy*G)); // why 

//	defaulttoMUMPS();
	set(OP,solver=sparsesolver);  //// ?????


	/// ITERATION LOOP
	int iter;
	for (iter=0; ((err>errmax)&&(iter<itmax)); iter++)
	{
		string shiftinvert = "toto";
		if(shiftinvert=="solve")
		{
			ShiftInvert;
		}
		else
		{			
		complex[int] rhs = B*ux0[];
    	//complex[int] rhs= brhs(0,XXMh); 
		complex[int] w = OP^-1*rhs;
		ux[] = w;
		};


		complex XnXn1 = int2d(th)(ux0*ux+ur0*ur);
		complex Xn1Xn1 =  int2d(th)(ux*ux+ur*ur);
		complex GG = Xn1Xn1/XnXn1;
		// at each step the inverse shifted eigenval. is approximated by <X_{n+1}, Y> / <X_n, Y>
		//      ( the choice Y = X_{n+1} is convenient but we could choose something else )
		lambda = shiftOP+1/GG;
		err = abs(lambda-lambda0);
		cout << "$$ iteration " << iter+1 << " : " << endl;	
			cout << " GG = " << GG << endl;
			cout << " XnXn = " << XnXn1 << endl;
		cout << "$$ Estimated eigenvalue lambda = " << lambda << endl;	
	
		ux0[] = 1/sqrt(abs(Xn1Xn1))*ux[];
		lambda0 = lambda;
	};
	/// END ITERATION LOOP	
	
	if(directadjoint==2){lambda=conj(lambda);};
 	// renormalization by MAXIMUM
 	Xh NormU = sqrt(abs(ux)^2+abs(ur)^2);
	ux[] = 1/NormU[].max*ux[];
	
	
	string namefile,namefileFF,descriptionFF,typeDA; 
	if(iter<itmax)
	
	// post-processing if iteration was successful
	{	
		real lambdar = real(lambda) ; real lambdai = imag(lambda);
    	if(directadjoint==1)
    	{
    		ofstream fileVP(ffdatadir+"Spectrum.txt");
    		fileVP << lambdar << " " << lambdai << " " << Re <<  " " << real(shift) << " " << imag(shift) << endl;
    		namefile=ffdatadir+"Eigenmode.txt";
    		namefileFF=ffdatadir+"Eigenmode.ff2m";
    		typeDA = "D";
    		uxdirect[]=ux[];
    	};
    	
    	if(directadjoint==2)
    	{
    		ofstream fileVP(ffdatadir+"Spectrum.txt");
           	fileVP << lambdar << " " << lambdai << " " << Re << " " << real(shift) << " " << imag(shift) << endl;
    		namefile=ffdatadir+"EigenmodeA.txt";
    		namefileFF=ffdatadir+"EigenmodeA.ff2m";	
    		typeDA = "A";
    		uxadjoint[]=ux[];
    	};
    
    // write outpout in .txt format (for freefem)
    NormalizeMode(u);
    {
    ofstream file(namefile);
  	file << ux[] ;	
   	file << endl <<  endl
   	<< endl << lambdar << "   " << lambdai  << endl;
    }

    // write output in .dff.2m format (for StabFem)
	SFWriteMode(namefileFF,u,lambda,shift,m,"EigenMode"+typeDA,iter);	 // MACRO DEFINED in StabFem_Macros.edp
	
	} // end of post processing of simple shift-invert case
else // case iteration failed
{
	cout << "$$ SHIFT-INVERT ITERATION FAILED" << endl;
	cout << "$$ Leaving FreeFem++ with error code 202" << endl;
	exit(202);
};

if (testCB==0)
		{
		//exec("rm "+ffdatadir+"Eigenmode_guess.txt");// to be sure this file is not reused unless explicitly requested
		exec("rm Eigenmode_guess.txt");
		};


}; //end of loop for direct/adjoint/selection

if(iadjoint=="S")
//
{
cout << "$$ Computation of sensitivity after direct and adjoint" << endl;

//	cout << "STAT" << uxdirect(2.5,.5) << " " << uxadjoint(2.5,.5) << " " << uydirect(2.5,.5) << " " << uyadjoint(2.5,.5) << endl ;

	fespace p2(th,P2);fespace p1(th,P1);
	p2 sensitivity = sqrt(abs(uxadjoint)^2+abs(uradjoint)^2) * sqrt(abs(uxdirect)^2+abs(urdirect)^2);
	// at this stage [ux,uy,p] is the last computed, namely the adjoint eigenmode
	real norm = sensitivity[].max;
	sensitivity=1/norm*sensitivity;
		
	string namefile,namefileFF;
    namefile=ffdatadir+"Sensitivity.txt";
    {
    ofstream file(namefile);
  	file << sensitivity[] ;	
    }    
    namefileFF=ffdatadir+"Sensitivity.ff2m";
	p1 xx,yy,sensitivityP1;
	xx=x;
	yy=y;
    sensitivityP1 = sensitivity;
         {
         ofstream fileFF(namefileFF);
         fileFF << "### Data generated by Freefem++ ; " << endl;
         fileFF << "Sensitivity" << endl;
    	 fileFF << "datatype Sensitivity datastoragemode ReP2.0" << endl; 
	     fileFF << "P1 sensitivity" << endl << endl ;
		 for (int j=0;j<sensitivityP1[].n ; j++) fileFF << sensitivityP1[][j] << endl;
         };



}; // end of selection of mutliple mode (krylov) / single mode (simple shift-invert)



};

cout << "$$$$ LEAVING Stab_Axi_COMPLEX_m0.edp " << endl << "$$" << endl; 


//cout << "$$ SUCCESSFULLY LEAVING Stab2D.edp " << endl;

