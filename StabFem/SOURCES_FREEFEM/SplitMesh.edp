//
//  PROGRAM SplitMesh.edp
//  adaptmesh for 2D flow 
//   
// Usage : FreeFem++ SplitMesh.edp 
//
//  INPUT PARAMETERS : nsplit Nfields [Datastoragemode1 Datastoragemode 2...]
//
//	INPUT FILES :
// 		mesh.msh ->  mesh in Freefem format
//		[FlowFieldToAdapt1.txt -> First flowfield to interpolate on new mesh]
//		[FlowFieldToAdapt2.txt -> Second flowfield to interpolate on new mesh]
//      [ ... ]
//
//  OUTPUT FILES :
//		mesh_split.msh -> New mesh
//		mesh_split.ff2m -> associated mesh information file
//		[FlowFieldAdapted1.txt -> First flowfield interpolated on new mesh]
//		[FlowFieldAdapted2.txt -> Second flowfield interpolated on new mesh]
//      [ ... ]
//
//  NB : 1/ program has only been tested for nfields = 0 or 1 (to  be generalised when needed)
//       2/ reading of first file still assumes that "Re" is part of the file... to be suppressed someday ?   
//		 2/ After the data the files may contain a number "scalarnumber" of real scalars 
//					(for instance baseflows will contain a single scalar (scalarnumber=1) : Re, eigenmodes will contain eigenvalues (2 reals with scalarnumber=2), etc...)
//			Such scalars are simply rewritten at the end of files as is.
//
//
// 	ERROR MANAGEMENT : 
//
//  This is part of the StabFem project distributed under gnu licence, Copyright D. Fabre et al., July 2018
//


	verbosity = 0;
	include "StabFem.idp";




// Input parameters
string typemeshmanipulation;
int nsplit, nfields;
int nfieldsmax = 8;
int nscalarmax = 100;
string[int] datastoragemode(nfieldsmax);
int[int] scalarnumber(nfieldsmax);
real[int,int] scalars(nfieldsmax,nscalarmax);

cout << "$$ ###################################" << endl;
cout << endl << "$$       SPLITMESH.edp        " << endl; 
cout << endl << "$$ ###################################" << endl << endl;

//cout << "$$ Enter mesh manipulation required ? (split or mirror)" << endl;
//cin >> typemeshmanipulation ;
//if(typemeshmanipulation=="split")
//{
cout << "$$ Enter nsplit (refinement order of the mesh)" << endl;
cin >> nsplit ; 
//}
cout << "$$ Enter nfields (number of field to be reinterpolated)" << endl;
cin >> nfields ;
for(int i = 0;i<nfields;i++)
    {
    cout << "$$ Enter storage mode of field number " << i  << " ? (string like ReP2P2P1, etc...)" << endl;
    cin >> datastoragemode[i] ;
    cout << "$$ Enter number of real scalars associated to field number "<< i  << " ?  (if you don't know just type 0...)" << endl;
     cin >> scalarnumber[i] ; 
    };
cout << endl << "$$ Splitting at order " << nsplit << " and adapting " << nfields << " flowfields" ;
if(nfields>0) { cout << " with storage mode " << datastoragemode[0] << endl;};
cout << endl << endl;
	
// READ MESH 
	mesh th=readmesh(ffdatadir+"mesh.msh");
cout << "toto";
	mesh thold = th;
	int nvprev = th.nv;

    cout << endl << "$$#### Mesh information BEFORE SPLIT :" << endl;  
    cout << "$$#### Number of vertices    " << th.nv <<  endl;	

IFMACRO(FREESURFACE,YES)
	mesh thsurface;
	if(typesurfacemesh=="plain") 
	{
	thsurface = th; 	// Maillage 'surface'
	};
	if(typesurfacemesh=="empty") 
	{
	thsurface = emptymesh(th); 	// Maillage 'surface'
	};
	string typestart,typeend;
	typestart="??"; typeend="??";
	
	include "Macros_Geometry_FreeSurface.idp"
	SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface); // cf. macro
	CalcGeomSurf;
	cout << "Nsurface before ADAPT : " << Nsurface << endl;
ENDIFMACRO

IFMACRO(FREESURFACE,ALESTRAIN)
	string NormalVectEND = "ex";
	include "Macros_Paul.idp"
	SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface); // cf. macro
	CalcGeomSurf;
	cout << "Nsurface before ADAPT : " << Nsurface << endl;
ENDIFMACRO

IFMACRO(FREESURFACE,ALE)
	include "Macros_Curvature.idp";
	SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface); // cf. macro
	CalcGeomSurf;
	cout << "Nsurface before ADAPT : " << Nsurface << endl;
ENDIFMACRO

// Declaration of possible data types 

    fespace p2(th,P2);   
    fespace p1(th,P1);
    fespace p0(th,P0);
    fespace p2xp2xp1(th,[P2,P2,P1]);
    fespace p2xp2xp2xp1(th,[P2,P2,P2,P1]);
    fespace p2xp2xp1xp1xp1(th,[P2,P2,P1,P1,P1]);
    fespace p2xp2xp2xp1xp1xp1(th,[P2,P2,P2,P1,P1,P1]);

// All flowfields will be converted to p2xp2xp2xp1xp1xp1<complex> 
    p2xp2xp2xp1xp1xp1<complex>[int] [FTAx,FTAy,FTAz,FTAp,FTAr,FTAT](nfieldsmax);
    p2xp2xp2xp1xp1xp1<complex> [FTAIx,FTAIy,FTAIz,FTAIp,FTAIr,FTAIT];

   


//    p2xp2xp1 [vB,uB,pB]; // base flow
//    p2xp2xp2xp1 [vBS,uBS,wBS,pBS]; // base flow        	
//	real Re;
// int NdimUVP = uB[].n;
//    	int NdimUVWP = uBS[].n;
//    	int NdimBaseFlow;
//    	real Reans;	
	
	
/// LECTURE OF FIELDS TO ADAPT

for(int i=0;i<nfields;i++) 
    {
    cout << "$$ Lecture of flowfield number " << i+1<< " with structure " <<   datastoragemode[i] << " + " << scalarnumber(i) << endl;
    ifstream file(ffdatadir+"FlowFieldToAdapt"+(i+1)+".txt");
    
    if(datastoragemode[i]=="ReP2P2P1")
	   {
          p2xp2xp1 [uBx,uBy,uBp]; 
          file >> uBx[]; 
          for(int j = 0;j<scalarnumber(i);j++){file >> scalars(i,j);};
          [FTAx[i],FTAy[i],FTAz[i],FTAp[i],FTAr[i],FTAT[i]] = [uBx*(1+0i),uBy*(1+0i),(0+0i),uBp*(1+0i),(0+0i),(0+0i)];
		}
    else if(datastoragemode[i]=="ReP2P2P2P1")
		{
          p2xp2xp2xp1 [uBx,uBy,uBz,uBp]; 
          file >> uBx[]; 
         for(int j = 0;j<scalarnumber(i);j++){file >> scalars(i,j);};	
          FTAx[i][] = [uBx*(1+0i),uBy*(1+0i),uBz*(1+0i),uBp*(1+0i),(0+0i),(0+0i)];
		}
    else if(datastoragemode[i]=="ReP2P2P1P1P1")
		{
          p2xp2xp1xp1xp1 [uBx,uBy,uBp,uBrho,uBT]; 
          file >> uBx[];   
          for(int j = 0;j<scalarnumber(i);j++){file >> scalars(i,j);};
          FTAx[i][] = [uBx*(1+0i),uBy*(1+0i),(0+0i),uBp*(1+0i),uBrho*(1+0i),uBT*(1+0i)];
		}

     else if(datastoragemode[i]=="ReP2P2P2P1P1P1")
		{
          p2xp2xp2xp1xp1xp1 [uBx,uBy,uBz,uBp,uBrho,uBT]; 
          file >> uBx[];   
          for(int j = 0;j<scalarnumber(i);j++){file >> scalars(i,j);};          
          FTAx[i][] = [uBx*(1+0i),uBy*(1+0i),uBz*(1+0i),uBp*(1+0i),uBrho*(1+0i),uBT*(1+0i)];
		} 
// else if ... 
/// add your needed case here !

    else
       {
        cout << "$$ ERROR in SF_Split : wrong type of storage mode : " << datastoragemode[i] << endl;   
        exit(-1);
       };
       cout << endl << "%%	Auxiliary SCALARS associated to this field : ";
	 for(int j =0;j<scalarnumber(i);j++){ cout << scalars(i,j) << endl;};
	cout << endl << endl;
    };


///
/// declaration of new mesh(es)
///       

mesh thnew;	
//mesh thbis;
fespace p2xp2xp2xp1xp1xp1N(thnew,[P2,P2,P2,P1,P1,P1]);
//fespace p2xp2xp2xp1xp1xp1B(thnew,[P2,P2,P2,P1,P1,P1]);
p2xp2xp2xp1xp1xp1N<complex> [FTANx,FTANy,FTANz,FTANp,FTANr,FTANT];  
//p2xp2xp2xp1xp1xp1B<complex> [FTABx,FTABy,FTABz,FTABp,FTABr,FTABT];  

///
/// SPLITTING / MIRRORING MESH
///       


//if(typemeshmanipulation=="split")
//{
cout << "$$ SPLITTING MESH...." << endl;

	thnew = splitmesh(th,nsplit);
//	thbis = th; // useless but leave it !	
//};

//if(typemeshmanipulation=="mirror")
//{
//cout << "$$ MIRRORING MESH.... (about X axis)" << endl;
//    thbis = movemesh(th,[x,-y]); 
//	thnew = th+thbis;
//};



IFMACRO(FREEFEMPLOTS,YES)		
	plot(thold,wait=1);
	plot(thnew,wait=1);
ENDIFMACRO

//return(10);

cout << endl << "$$#### Mesh information AFTER SPLIT :" << endl;  
        cout << "$$#### Number of vertices    " << thnew.nv <<  endl;
	   // cout << "$$### Dimension of matrices " << vB[].n << endl << endl;


	savemesh(thnew,ffdatadir+"mesh_split.msh");

IFMACRO(FREESURFACE,YES)
	if(typesurfacemesh=="plain") 
	{
	thsurface = thnew; 	/* Maillage 'surface'*/
	};
	if(typesurfacemesh=="empty") 
	{
	thsurface = emptymesh(thnew); 	/* Maillage 'surface'*/
	};
	SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface); 
ENDIFMACRO
IFMACRO(FREESURFACE,ALE)
	SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface); 
ENDIFMACRO
IFMACRO(FREESURFACE,ALESTRAIN)
	SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface); 
ENDIFMACRO

	
	IFMACRO(SFWriteMesh)
	SFWriteMesh(ffdatadir+"mesh_split.ff2m",thnew,"split");
	ENDIFMACRO	
	
	IFMACRO(SFWriteConnectivity)
	SFWriteConnectivity(ffdatadir+"mesh_split_connectivity.ff2m",thnew);
	ENDIFMACRO



	IFMACRO(FREESURFACE,YES)
	{				
        real gamma; real GAMMABAR; real dpdz;
		ifstream file(ffdatadir+"FreeSurface.txt");
	    file >> gamma >> dpdz >> GAMMABAR;
		real PP0;
		SFWriteSurface(ffdatadir+"FreeSurface_split.ff2m",thnew);	
        cout << "new Nsurface = " << Nsurface << endl; 			
		ofstream file2(ffdatadir+"FreeSurface_split.txt");
	    file2 << gamma << endl << dpdz << endl << GAMMABAR << endl;
	    SFWriteMeshSurface(ffdatadir+"mesh_split_surface.ff2m",thnew);	
		cout << "new Nsurface = " << Nsurface << endl; 			

	};
	ENDIFMACRO

IFMACRO(FREESURFACE,ALE)
	{				
		SFWriteMeshSurface(ffdatadir+"mesh_split_surface.ff2m",thnew);	
    cout << "new Nsurface = " << Nsurface << endl; 
	};
ENDIFMACRO
IFMACRO(FREESURFACE,ALESTRAIN)
	{				
		SFWriteMeshSurface(ffdatadir+"mesh_split_surface.ff2m",thnew);	
cout << "new Nsurface = " << Nsurface << endl; 			
	};
ENDIFMACRO




///	
/// INTERPOLATE FLOW FIELDS AND SAVE TO FILE
///

	

    fespace p2N(thnew,P2);   
    fespace p1N(thnew,P1);
    fespace p0N(thnew,P0);
//    fespace p2xp2xp1B(thbis,[P2,P2,P1]);
 	fespace p2xp2xp1N(thnew,[P2,P2,P1]);
 	fespace p2xp2xp2xp1N(thnew,[P2,P2,P2,P1]);
    fespace p2xp2xp1xp1xp1N(thnew,[P2,P2,P1,P1,P1]);  

for(int i=0;i<nfields;i++) 
    {
    cout << "$$ Interpolating and writing flowfield number " << i+1<< " with structure " <<   datastoragemode[i] << endl;
    ofstream U(ffdatadir+"FlowFieldAdapted"+(i+1)+".txt");

//if(typemeshmanipulation=="split")
//{
//[FTANx,FTANy,FTANz,FTANp,FTANr,FTANT] = [FTAx[i],FTAy[i],FTAz[i],FTAp[i],FTAr[i],FTAT[i]];
//};

//if(typemeshmanipulation=="mirror")
//{
//[FTAIx,FTAIy,FTAIz,FTAIp,FTAIr,FTAIT] = [FTAx[i],FTAy[i],FTAz[i],FTAp[i],FTAr[i],FTAT[i]];
//FTABx[] = FTAIx[];
//[FTANx,FTANy,FTANz,FTANp,FTANr,FTANT] = [FTAx[i]+FTABx,FTAy[i]-FTABy,FTAz[i]+FTABz,FTAp[i]+FTABp,FTAp[i]+FTABp,FTAr[i]+FTABr,FTAT[i]+FTABT];
//};
		
	
    if(datastoragemode[i]=="ReP2P2P1")
	   {
	   	  p2xp2xp1N [uBNx,uBNy,UBNp]=[real(FTAx[i]),real(FTAy[i]),real(FTAp[i])];        
          U << uBNx[];
          U << endl; 
          for(int j=0;j<scalarnumber(i);j++) {U << scalars(i,j) << endl;};
		}
    else if(datastoragemode[i]=="ReP2P2P2P1")
        {
          p2xp2xp2xp1N [uBNx,uBNy,UBNz,UBNp]=[real(FTAx[i]),real(FTAy[i]),real(FTAz[i]),real(FTAp[i])]; 
          U << uBNx[]; 
          U << endl;
          for(int j =0;j<scalarnumber(i);j++) {U << scalars(i,j) << endl;};
        }
    else if(datastoragemode[i]=="ReP2P2P1P1P1")
        {
          p2xp2xp1xp1xp1N [uBNx,uBNy,uBNp,uBNrho,uBNT]=[real(FTAx[i]),real(FTAy[i]),real(FTAp[i]),real(FTAr[i]),real(FTAT[i])];
          U << uBNx[]; 
           for(int j =0;j<scalarnumber(i);j++) {U << scalars(i,j) << endl;};
        }
    else if(datastoragemode[i]=="ReP2P2P2P1P1P1")
        {
          p2xp2xp2xp1xp1xp1N [uBNx,uBNy,uBNz,uBNp,uBNrho,uBNT]=[real(FTAx[i]),real(FTAy[i]),real(FTAz[i]),real(FTAp[i]),real(FTAr[i]),real(FTAT[i])];
          U << uBNx[]; 
          for(int j =0;j<scalarnumber(i);j++) {U << scalars(i,j) << endl;};
        }
   }

cout << "$$ FreeFem : Successfully Leaving function   SplitMesh.edp   "  <<  endl;

   




