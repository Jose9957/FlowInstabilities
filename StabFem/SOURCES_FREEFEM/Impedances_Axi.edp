/// FROM RayLeigh_conductivity_loop_cavity.edp; 


/// JET SIFFLANT : CAS D'UN FORCAGE PULSE

/// DECLARATIONS FORMELLES

	include "SF_Geom.edp";
		include "StabFem.idp";



	real omegamin,omegamax;
	complex u0,p0,u10,p10,Force;

//	include "Params_kettle.edp";

	int m=0; 
	real nu,Re,Remesh;
	real epsilonPQ = 1e-20; // terme de desingularisation
	real omega;
	//real S = 100. ;
	real Q = 1.;

	

	mesh th=readmesh("mesh_guess.msh");
 	fespace p2xp2xp1(th,[P2,P2,P1]);	
 	fespace p2xp2xp2xp1(th,[P2,P2,P2,P1]);
	p2xp2xp1 [urp,uzp,pp];
    p2xp2xp1<complex> [ur,uz,p],[vr,vz,q];
    p2xp2xp1 [urr,uzr,pr],[uri,uzi,pii];

	{
	ifstream cbin("BaseFlow.txt");
	cbin >> urp[];
	cbin >> Re;
	};
	nu=1/Re;
	
	real Sinlet = 2*pi*int1d(th,11)(y); // surface de la section d'entree
	real Scav = 2*pi*int1d(th,21)(y);   // surface de la paroi du fond de la cavit√©
	

	cout << " Calcul de l'impedance pour une configuration hole-tone ; Re = " << Re << endl; 
	cout << " BOUCLE : entrez omegamin, omegamax, Nomega :  " << endl; 
	cin  >> omegamin >> omegamax >> Npas;


	
    

	
	problem PulsedJet([ur,uz,p],[vr,vz,q]) = // forced flow through the two-holes
	int2d(th)(
	- y*vz*(uzp*dx(uz)+uz*dx(uzp)+urp*dy(uz)+ur*dy(uzp)+1i*omega*uz )
	- y*vr*(uzp*dx(ur)+uz*dx(urp)+urp*dy(ur)+ur*dy(urp)+1i*omega*ur )
	- nu*(y*dx(uz)*dx(vz)+y*dy(uz)*dy(vz)+m^2/y*uz*vz  
	+ y*dx(ur)*dx(vr)+y*dy(ur)*dy(vr)+(m^2+1)/y*ur*vr  )  
	+ p*(y*dx(vz)+vr+y*dy(vr))
	- q*(y*dx(uz)+ur+y*dy(ur))
	- y*1e-30*(ur*vr+uz*vz)+y*epsilonPQ*p*q
	)
 	+ on(11,uz=Q/Sinlet,ur=0)	
  	+ on(2,uz=0.,ur=0.)
	+ on(21,uz=0.,ur=0.)	
	+ on(6,7,ur=0.); //for m=0
   
	
	problem PulsedJet1([ur,uz,p],[vr,vz,q]) = // forced flow through first hole
		int2d(th)(
	- y*vz*(uzp*dx(uz)+uz*dx(uzp)+urp*dy(uz)+ur*dy(uzp)+1i*omega*uz )
	- y*vr*(uzp*dx(ur)+uz*dx(urp)+urp*dy(ur)+ur*dy(urp)+1i*omega*ur )
	- nu*(y*dx(uz)*dx(vz)+y*dy(uz)*dy(vz)+m^2/y*uz*vz  
	+ y*dx(ur)*dx(vr)+y*dy(ur)*dy(vr)+(m^2+1)/y*ur*vr  )  
	+ p*(y*dx(vz)+vr+y*dy(vr))
	- q*(y*dx(uz)+ur+y*dy(ur))
	- y*1e-30*(ur*vr+uz*vz)+y*epsilonPQ*p*q
	)
 	+ on(11,uz=Q/Sinlet,ur=0)	
  	+ on(2,uz=0.,ur=0.)
	+ on(21,uz=0.,ur=-Q/Scav)	
	+ on(6,7,ur=0.); //for m=0
   	
   	problem PulsedJet2([ur,uz,p],[vr,vz,q]) = // forced flow through second hole
		int2d(th)(
	- y*vz*(uzp*dx(uz)+uz*dx(uzp)+urp*dy(uz)+ur*dy(uzp)+1i*omega*uz )
	- y*vr*(uzp*dx(ur)+uz*dx(urp)+urp*dy(ur)+ur*dy(urp)+1i*omega*ur )
	- nu*(y*dx(uz)*dx(vz)+y*dy(uz)*dy(vz)+m^2/y*uz*vz  
	+ y*dx(ur)*dx(vr)+y*dy(ur)*dy(vr)+(m^2+1)/y*ur*vr  )  
	+ p*(y*dx(vz)+vr+y*dy(vr))
	- q*(y*dx(uz)+ur+y*dy(ur))
	- y*1e-30*(ur*vr+uz*vz)+y*epsilonPQ*p*q
	)
 	+ on(11,uz=0,ur=0)	
  	+ on(2,uz=0.,ur=0.)
	+ on(21,uz=0.,ur=Q/Scav)	
	+ on(6,7,ur=0.); //for m=0





	//	int Npas;		
	//for (int ii=0; ii<Npas; ii++){
	//	{ omega = omegamin+(omegamax-omegamin)*ii/(Npas-1);}; 	// progression arithmetique

	omega = 6;

	PulsedJet;

/*	{ofstream file("Kr_Re"+Re+"_omega"+omega+".txt");
	file << ur[] ;	
   	file << endl << endl << Re << endl;}
*/
	//Warning label !!!!! Where/How do you want to compute the impedance ???
	complex Rate = int1d(th,21)(y*ur)/int1d(th,21)(y);
	Force = int1d(th,21)(y*p)/int1d(th,21)(y); 


	cout << "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww " <<  (ii+1.)/Npas*100. << "%" << endl;
	cout << "Iteration numero " << ii+1 << " sur " << Npas  << endl;
	cout << ">>>> JET PULSE :  omega = " << omega << endl;
	cout << "Debit = " << Rate << endl;
	cout << "FORCE = " << Force << endl;
//	cout << "PcavMean = " << Force/int1d(th,1)(y) << endl;
//	cout << "u0 = " << u0 << endl;
//	cout << "p0 = " << p0 << endl;
//	cout << "u10 = " << u10 << endl;
//	cout << "p10 = " << p10 << endl;
	complex Imp = Force/Rate;
	complex K   = 1./Imp*omega; 					//Rayleigh conductivity
	cout << "Rayleigh condcutivity = " << K << endl;

	ofstream fff("Kr_RE"+Re+".txt",append);	
	fff <<  omega << " " << real(K) << " " << -imag(K) << " "  << abs(K) << " " 
	<< real(Imp) << " " << imag(Imp) << " " << abs(Imp) << " " 
//	<< real(p0) << " " << imag(p0) << " " << abs(p0) << " " 
//	<< real(u10) << " " << imag(u10) << " " << abs(u10) << " " 
//	<< real(p10) << " " << imag(p10) << " " << abs(p10) << " " 
	<< real(Rate) << " " << imag(Rate) << endl;
	
		
	};
	
	
			



	

