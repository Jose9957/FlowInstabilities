

/// JET SIFFLANT : CAS D'UN FORCAGE PULSE
	load "UMFPACK64"
		include "SF_Geom.edp";
		include "StabFem.idp";

	
/// DECLARATIONS FORMELLES
//	include "Params_David.edp";
	int Nprof =6;
	macro Uin(rr) ( (2+Nprof)/Nprof*(1-rr^Nprof) )  //EOM
	
	mesh th=readmesh("mesh.msh");
 	fespace p2xp2xp1(th,[P2,P2,P1]);
 	fespace p2(th,P2);
	fespace p1(th,P1);	
 	fespace p2xp2xp2xp1(th,[P2,P2,P2,P1]);
	p2xp2xp1 [urp,uzp,pp];
    p2xp2xp1<complex> [ur,uz,p],[vr,vz,q];
    p2xp2xp1 [urr,uzr,pr],[uri,uzi,pii];
    
    real Rhole = 1;
    
	int m=0; 
	real nu,Re;
	real epsilonPQ = 0*1e-20; // terme de desingularisation
	real omega;
//	real S = (Rin/a)^2;
//	real S = 100.;
	real Q = 1.;

	{
	ifstream cbin("BaseFlow.txt");
	cbin >> urp[];
	cbin >> Re;
	};

	real Sin = 2*pi*int1d(th,11)(y); // surface de la section d'entree
	real Scav = 2*pi*int1d(th,21)(y);   // surface de la paroi du fond de la cavit√©

	
	


	
	

	
	problem PulsedJet([ur,uz,p],[vr,vz,q]) = // forced flow through the two-holes
	int2d(th)(
	- y*vz*(uzp*dx(uz)+uz*dx(uzp)+urp*dy(uz)+ur*dy(uzp)+1i*omega*uz )
	- y*vr*(uzp*dx(ur)+uz*dx(urp)+urp*dy(ur)+ur*dy(urp)+1i*omega*ur )
	- nu*(y*dx(uz)*dx(vz)+y*dy(uz)*dy(vz)+m^2/y*uz*vz  
	+ y*dx(ur)*dx(vr)+y*dy(ur)*dy(vr)+(m^2+1)/y*ur*vr  )  
	+ p*(y*dx(vz)+vr+y*dy(vr))
	- q*(y*dx(uz)+ur+y*dy(ur))
	- y*1e-30*(ur*vr+uz*vz)+y*epsilonPQ*p*q
	)
 	+ on(11,uz=Q/Sin,ur=0)	
  	+ on(2,uz=0.,ur=0.)
	+ on(21,uz=0.,ur=0.)	
	+ on(6,7,ur=0.); //for m=0
   
	
	problem PulsedJet1([ur,uz,p],[vr,vz,q]) = // forced flow through first hole
		int2d(th)(
	- y*vz*(uzp*dx(uz)+uz*dx(uzp)+urp*dy(uz)+ur*dy(uzp)+1i*omega*uz )
	- y*vr*(uzp*dx(ur)+uz*dx(urp)+urp*dy(ur)+ur*dy(urp)+1i*omega*ur )
	- nu*(y*dx(uz)*dx(vz)+y*dy(uz)*dy(vz)+m^2/y*uz*vz  
	+ y*dx(ur)*dx(vr)+y*dy(ur)*dy(vr)+(m^2+1)/y*ur*vr  )  
	+ p*(y*dx(vz)+vr+y*dy(vr))
	- q*(y*dx(uz)+ur+y*dy(ur))
	- y*1e-30*(ur*vr+uz*vz)+y*epsilonPQ*p*q
	)
 	+ on(11,uz=Q/Sin,ur=0)	
  	+ on(2,uz=0.,ur=0.)
	+ on(21,uz=0.,ur=-Q/Scav)	
	+ on(6,7,ur=0.); //for m=0
   	
   	problem PulsedJet2([ur,uz,p],[vr,vz,q]) = // forced flow through second hole
		int2d(th)(
	- y*vz*(uzp*dx(uz)+uz*dx(uzp)+urp*dy(uz)+ur*dy(uzp)+1i*omega*uz )
	- y*vr*(uzp*dx(ur)+uz*dx(urp)+urp*dy(ur)+ur*dy(urp)+1i*omega*ur )
	- nu*(y*dx(uz)*dx(vz)+y*dy(uz)*dy(vz)+m^2/y*uz*vz  
	+ y*dx(ur)*dx(vr)+y*dy(ur)*dy(vr)+(m^2+1)/y*ur*vr  )  
	+ p*(y*dx(vz)+vr+y*dy(vr))
	- q*(y*dx(uz)+ur+y*dy(ur))
	- y*1e-30*(ur*vr+uz*vz)+y*epsilonPQ*p*q
	)
 	+ on(11,uz=0,ur=0)	
  	+ on(2,uz=0.,ur=0.)
	+ on(21,uz=0.,ur=Q/Scav)	
	+ on(6,7,ur=0.); //for m=0

	
 	problem PulsedJet3([ur,uz,p],[vr,vz,q]) = // open cavity
		int2d(th)(
	- y*vz*(uzp*dx(uz)+uz*dx(uzp)+urp*dy(uz)+ur*dy(uzp)+1i*omega*uz )
	- y*vr*(uzp*dx(ur)+uz*dx(urp)+urp*dy(ur)+ur*dy(urp)+1i*omega*ur )
	- nu*(y*dx(uz)*dx(vz)+y*dy(uz)*dy(vz)+m^2/y*uz*vz  
	+ y*dx(ur)*dx(vr)+y*dy(ur)*dy(vr)+(m^2+1)/y*ur*vr  )  
	+ p*(y*dx(vz)+vr+y*dy(vr))
	- q*(y*dx(uz)+ur+y*dy(ur))
	- y*1e-30*(ur*vr+uz*vz)+y*epsilonPQ*p*q
	)
 	+ on(11,ur=0,uz=Q/Scav)	
  	+ on(2,uz=0.,ur=0.)
//	+ on(21,uz=0.,ur=Q/Scav)	
	+ on(6,7,ur=0.); //for m=0

		


	ofstream imp("HoleTone_Impedances.txt");
	nu=2*Rhole/Re;



//    cout << " Entrez omega :  " << endl; 
//	cin  >> omega;
//	cout << " Calcul d'une impedance pour un trou ; Re    = " << Re << endl; 
//	cout << "                                       nu    = " << nu << endl;
//	cout << "                                       omega = " << omega << endl;

for(int iom = 15;iom<25;iom++)
{
omega = .2*iom;

	
{
	PulsedJet;

	//{ofstream file("UVP_conductivity_Re"+Re+"_omega"+omega+".txt");
  	//file << ur[] ;	
   	//file << endl << endl << Re << endl;}
	

	complex Ratein = 2*pi*int1d(th,11)(uz*y);
	complex Forcein = 2*pi*int1d(th,11)(y*p);
	complex pin = Forcein/Sin; // force/surface
	
	complex Ratecav = 2*pi*int1d(th,21)(ur*y);
	complex Forcecav = 2*pi*int1d(th,21)(y*p);
	complex pcav = Forcein/(2*pi*int1d(th,21)(y)); // force/surface

//	complex Imp = (pin/Ratein);
 	

	cout << ">>>> PROBLEM ZERO : flow through both holes" << endl;
	cout << "  omega = " << omega << endl;
	cout << "Debit Qin = " << Ratein << endl;
	cout << "Pin = " << pin << endl;
	cout << "Debit Qcav = " << Ratecav << endl;
	cout << "Pcav = " << pcav << endl;
	cout << " Pin - Pcav = " << pin-pcav << endl;
	//cout << "TOTAL IMPEDANCE = Pin/Qin = " << Imp << endl;

	imp << omega << " " ;
	imp << real(pin) << " " << imag(pin) << " " << real(pin-pcav) << " " << imag(pin-pcav) << " " << real(pcav) << " " << imag(pcav) << " " ;
		
}

	{
	PulsedJet1;

	//{ofstream file("UVP_conductivity_Re"+Re+"_omega"+omega+".txt");
  	//file << ur[] ;	
   	//file << endl << endl << Re << endl;}
	

	complex Ratein = 2*pi*int1d(th,11)(uz*y);
	complex Forcein = 2*pi*int1d(th,11)(y*p);
	complex pin = Forcein/Sin; // force/surface
	
	complex Ratecav = 2*pi*int1d(th,21)(ur*y);
	complex Forcecav = 2*pi*int1d(th,21)(y*p);
	complex pcav = Forcein/(2*pi*int1d(th,21)(y)); // force/surface

//	complex Imp = (pin/Ratein);
 	

	cout << endl << ">>>> PROBLEM ONE : flow through first hole" << endl;
	cout << "  omega = " << omega << endl;
	cout << "Debit Qin = " << Ratein << endl;
	cout << "Pin = " << pin << endl;
	cout << "Debit Qcav = " << Ratecav << endl;
	cout << "Pcav = " << pcav << endl;
	cout << " Pin - Pcav = " << pin-pcav << endl;
	//cout << "TOTAL IMPEDANCE = Pin/Qin = " << Imp << endl;
	imp << real(pin) << " " << imag(pin) << " " << real(pin-pcav) << " " << imag(pin-pcav) << " " << real(pcav) << " " << imag(pcav) << " " ;
		
}

{
	PulsedJet2;

	//{ofstream file("UVP_conductivity_Re"+Re+"_omega"+omega+".txt");
  	//file << ur[] ;	
   	//file << endl << endl << Re << endl;}
	

	complex Ratein = 2*pi*int1d(th,11)(uz*y);
	complex Forcein = 2*pi*int1d(th,11)(y*p);
	complex pin = Forcein/Sin; // force/surface
	
	complex Ratecav = 2*pi*int1d(th,21)(ur*y);
	complex Forcecav = 2*pi*int1d(th,21)(y*p);
	complex pcav = Forcein/(2*pi*int1d(th,21)(y)); // force/surface

//	complex Imp = (pin/Ratein);
 	

	cout << endl << ">>>> PROBLEM TWO : flow through second hole" << endl;
	cout << "  omega = " << omega << endl;
	cout << "Debit Qin = " << Ratein << endl;
	cout << "Pin = " << pin << endl;
	cout << "Debit Qcav = " << Ratecav << endl;
	cout << "Pcav = " << pcav << endl;
	cout << " Pin - Pcav = " << pin-pcav << endl;
	//cout << "TOTAL IMPEDANCE = Pin/Qin = " << Imp << endl;
	imp << real(pin) << " " << imag(pin) << " " << real(pin-pcav) << " " << imag(pin-pcav) << " " << real(pcav) << " " << imag(pcav) << " " ;
}

	
 {
	PulsedJet3;

	//{ofstream file("UVP_conductivity_Re"+Re+"_omega"+omega+".txt");
  	//file << ur[] ;	
   	//file << endl << endl << Re << endl;}
	

	complex Ratein = 2*pi*int1d(th,11)(uz*y);
	complex Forcein = 2*pi*int1d(th,11)(y*p);
	complex pin = Forcein/Sin; // force/surface
	
	complex Ratecav = 2*pi*int1d(th,21)(ur*y);
	complex Forcecav = 2*pi*int1d(th,21)(y*p);
	complex pcav = Forcein/(2*pi*int1d(th,21)(y)); // force/surface

//	complex Imp = (pin/Ratein);
 	

	cout << endl << ">>>> PROBLEM THREE : open cavity" << endl;
	cout << "  omega = " << omega << endl;
	cout << "Debit Qin = " << Ratein << endl;
	cout << "Pin = " << pin << endl;
	cout << "Debit Qcav = " << Ratecav << endl;
	cout << "Pcav = " << pcav << endl;
	cout << " Pin - Pcav = " << pin-pcav << endl;
	//cout << "TOTAL IMPEDANCE = Pin/Qin = " << Imp << endl;
	imp << real(pin) << " " << imag(pin) << " " << real(pin-pcav) << " " << imag(pin-pcav) << " " << real(pcav) << " " << imag(pcav) << endl ;
}

};
	


	
	/*
	// visualisation
	[urr,uzr,pr] = [real(ur),real(uz),real( p )];
	[uri,uzi,pii] = [imag(ur),imag(uz),imag( p )];
	plot(uzr,value=1,wait=1);
	plot(uzi,value=1,wait=1);
	
	plot(urr,value=1,wait=1);
	plot(uri,value=1,wait=1);

	plot(pr,value=1,wait=1);
	plot(pii,value=1,wait=1);

*/
	
