//
//  PROGRAM Newton_2D.edp
//  computation of 2D base flow [ux,uy](x,y)
//   
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	Re
//      Omegax
//      symmetry ('S','A' or 'N')
//	INPUT FILES :
//		BaseFlow_guess.txt	-> guess base flow (generated by mesh generator, time integration or previous Newton)
// 		mesh.msh 			->  mesh in Freefem format
//  OUTPUT FILES :
//		BaseFlow.txt			-> base flow (FF format)
//      BaseFlow.ff2m         -> base flow (FF2M format) 
//
// 	ERROR MANAGEMENT : 
//      if Newton iteration diverges, return exit code 201.
//
//
// INCORPORATED INTO THE STABFEM PROJECT BY D. FABRE ON A BUSY DAY AT UNIVERSITA DI SALERNO, 18 july 2017
// REwriten on october 2 2017 with macros.
// Cleaned in july 2019 for StabFem 2.9
// Redesigned in december 2019.
// New redesign in may 2020 (optional parameters)

		cout << "$$$$ ENTERING Newton_2D.edp " << endl << "$$" << endl; 

include "SF_Custom.idp" // this file is normally in the working directory
include "SF_Tools.idp"  // this file is normally in the SOURCES_FREEFEM/INCLUDE directory
string ffdatadir = SFDetectWorkDir(); // normally reads from file "workdir.pref"




//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 1 : parameters		
//

// 1A : Generic Parameter : Re
    real Re,Reans;
    cout << "$$ Selection of parameters (from standart input) :" << endl << "$$" << endl; 
	cout << "$$ Entrer Reynolds Number  >> " ;
    cin >>  Re; 
    cout << Re << endl;

// 1B : specific parameter (customizable part)
IFMACRO(!SFInputParametersNewton)
macro SFInputParametersNewton()
	/* Physical parameters (handled by standart input in this case) */
    cout << " Specific parameters (from getARGV)" << endl;
//	int symm = getARGV("-sym",1);
//    string symmetryBaseFlow;
//    if (symm==1) {symmetryBaseFlow="S";} else if (symm==-1){symmetryBaseFlow="A";} else {symmetryBaseFlow="N";};
//    cout << "$$ Symmetry property of base flow  : " << symm << " ; " << symmetryBaseFlow << endl;
	string symmetryBaseFlow=getARGV("-Symmetry","N");
	cout << "$$ Symmetry property   : " << symmetryBaseFlow << endl;
    real Omegax = getARGV("-Omegax",0.);
    cout << "$$ Rotation rate Omegax = " << Omegax << endl;
//EOM
ENDIFMACRO
SFInputParametersNewton;

// 1.C numerical paramters
cout << "$$  Numerical parameters (handled by getARGV or default ) " << endl;
real tolerance=getARGV("-tolerance",2e-12);
cout << " tolerance = " << tolerance << endl;
int Nitermax=getARGV("-Nitermax", 30);
cout << " Nitermax = " << Nitermax << endl;

//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 2 : read files		
//


		mesh th=readmesh(ffdatadir+"mesh.msh");
		
        fespace Xh(th,P2,periodic=MESHPERIODICITY);       //f.e. space for veloecity components
		fespace Mh(th,P1,periodic=MESHPERIODICITY);      //f.e space for pressure
		fespace XXMh(th,[P2,P2,P1],periodic=MESHPERIODICITY); // f.e. space for triplet [u,v,p]

		XXMh [ux,uy,up];          ///////  -> unknown for the Navier-Stokes problem
		XXMh [vx,vy,q];          ///////  -> test function for Navier-Stokes
		XXMh [upx,upy,upp];   	 ///////  -> buffer vector  to store previous iteration (Newton) 
		XXMh [dux,duy,dup]; 		 ///////  -> increment for the Newton iteration


// Baseflow
		int testCB;
		SFcheckfile("BaseFlow_guess.txt",testCB);

    	if (testCB<0)
		{
		SFwarning("No file BaseFlow_guess.txt : starting from arbitrary initial condition");
		IFMACRO(!DefaultGuessForNewton) // if your want something else this macro may be redefined in your SF_Custom.idp
		macro DefaultGuessForNewton
		[ux,uy,up] = [0,0,0]; //EOM
		ENDIFMACRO
		DefaultGuessForNewton;
		} 
		else
		{
		cout << "$$ Reading file BaseFlow_guess.txt" << endl;
		ifstream file(ffdatadir+"BaseFlow_guess.txt");
        file >> ux[];
		file >> Reans;
		cout << "$$ Re of guess field : " << Reans << endl; 
		};

IFMACRO(FREEFEMPLOTS,YES)
		plot(ux,wait=1);
		plot(uy,wait=1);
ENDIFMACRO

	cout << "$$ Starting Newton algorithm for Re = " << Re << endl;	
	

	real nu=1./Re; 
	// If Nu is something else than 1/Re define a macro CUSTOMnu in your StabFem.idp file
    IFMACRO(CUSTOMnu)
    nu = CUSTOMnu;
    ENDIFMACRO

//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 3 : Customizable macros 	
//

//
// Note : this solver requires three macros BoundaryConditionsBaseFlow, SFWriteBaseFlow.
// Below are "default" values for these macros, to be used in the most basic cases. If you want to
// customize these macros don't modify them here but copy them to your SF_Custom.idp file.
//
	
IFMACRO(!Uinlet)
macro Uinlet() 1. //EOM
ENDIFMACRO	
	
IFMACRO(!BoundaryconditionsBaseFlow)
macro BoundaryconditionsBaseFlow(du,u,v)
	           on(1,du#x=Uinlet-u#x,du#y=0.0)
	         + on(2,du#x=-u#x+Omegax*y,du#y=-u#y-Omegax*x) /* if rotation */
	         + on(4,du#y=-u#y)  
             + on(5,du#x=-u#x)
             + int1d(th,6)(du#x*v#x*1e30*(symmetryBaseFlow=="A")+du#y*v#y*1e30*(symmetryBaseFlow=="S"))       
//EOM
ENDIFMACRO


IFMACRO(!CalcPsi)      
macro CalcPsi(psi,vort,test)
      solve LapLace(psi,test) = int2d(th)((dx(psi)*dx(test)+dy(psi)*dy(test)))
					         - int2d(th)(vort*test)
					         + on(6,2,21,22,23,psi=0)
					         + on(1,4,psi=y);
//EOM
ENDIFMACRO     

IFMACRO(!SFWriteBaseFlow)
macro SFWriteBaseFlow(filename,u,typeFlow,iter)
	if(iter>=0)
	{
	fespace p1forff2m(th,P1,periodic=MESHPERIODICITY);  
    p1forff2m vort;
	vort=-dy(u#x)+dx(u#y); /* vorticity */
	p1forff2m psi,test; 
	CalcPsi(psi,vort,test);
	ofstream file(filename);
   	{
	file << "### Data generated by Freefem++ ; " << endl;
    file << "BaseFlow for a 2D-incompressible problem (using GENERIC MACRO)" << endl;
    file << "datatype " << typeFlow << " datastoragemode ReP2P2P1.1 datadescriptors ux,uy,p,Re" << endl;
	file << "real* Re P1 vort P1 psi real iter " << endl ;
	file << Re << endl;	
			for (int j=0;j<vort[].n ; j++) file << vort[][j] << endl;
			for (int j=0;j<vort[].n ; j++) file << psi[][j] << endl;
	file << iter << endl;
	};
	}
//EOM
ENDIFMACRO

/////////////////////////////////////////////////////////////////////////////////
/////// macro to define some useful operators

macro div(u) (dx(u#x)+dy(u#y))// macro for divergence 
macro Conv(ua,ub,v) ( 
              ((ua#x*dx(ub#x)+ua#y*dy(ub#x))+(ub#x*dx(ua#x)+ub#y*dy(ua#x)))*v#x 
            + ((ua#x*dx(ub#y)+ua#y*dy(ub#y))+(ub#x*dx(ua#y)+ub#y*dy(ua#y)))*v#y 
                    ) // macro for mutual convection operator
macro D(u) [[dx(u#x), .5*(dx(u#y)+dy(u#x))], [.5*(dx(u#y)+dy(u#x)), dy(u#y)]] // macro for rate-of-deformation tensor


//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 4 : Definition of problem
//




// definition of linear system to be solved at each step of the iteration
problem NewtonIter([dux,duy,dup],[vx,vy,q]) =
    int2d(th)( 
			-2*nu*(D(du):D(v))
             + q*div(du)
             + div(v)*dup
				-Conv(up,du,v)
             )
             +
    int2d(th)(
    		-2*nu*(D(up):D(v))
             + q*div(up)
             + div(v)*upp
             -.5*Conv(up,up,v)
             )
	+  BoundaryconditionsBaseFlow(du,up,v);     
    
//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 5 : Newton loop
//    
   
   
// parameters for Newton loop            

    real res=1;	
    int iter=0;

        
// Newton loop
        while((res>tolerance)&(res<50)&(iter<=Nitermax))
        {
	    upx[]=ux[];      
        NewtonIter ;          
        ux[] = ux[]+dux[];
		real enerl2=dux[].l2;
		res=sqrt(int2d(th)(dux^2+duy^2)/th.area);
	    cout << "$$ Iter = "<< iter+1 << "   Re = " << Re << " ; res = " << res << " ; res l2 = " << enerl2 << endl;
        iter++;
        IFMACRO(FREEFEMPLOTS,YES)
		plot(ux,wait=1);
		ENDIFMACRO
	  } ;

//////////////////////////////////////////////////////////////////////////////////
//
//		CHAPTER 6 : PostProcessing
//    
   

// sortie des r?sultats 

		if((res>50)||(iter>Nitermax))
		{
			SFerror("$$ NEWTON ITERATION FAILED");
			cout << "$$ Leaving FreeFem++ with error code 201" << endl;
			exit(201);
		}
		else
		
		{

		plot(ux,wait=1);

		  {ofstream file(ffdatadir+"BaseFlow.txt"); // file in .txt format for FreeFem solvers
		  file << ux[]; 
		  file << endl  << Re;
          real Omegaxforfile = Omegax; // LEGACY ; to be removed completely someday
		  file << endl  << Omegaxforfile << endl;
		  }; 
          exec("cp "+ffdatadir+"BaseFlow.txt "+ffdatadir+"BaseFlow_guess.txt"); 
         

          SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",u,"BaseFlow",iter); // file in .ff2ml format for StabFem driver

    
		};
          
cout << "$$$$ SUCESSFULLY LEAVING Newton_2D.edp "  << endl; 
