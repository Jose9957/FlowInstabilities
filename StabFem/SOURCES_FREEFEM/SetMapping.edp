//
//
//  PROGRAM SetMapping.edp
//  
//  This program sets up the mapping parameters and updates the Mesh files 
//  This program has to be launched prior other solvers each time the Mapping parameters are changed.
//
//  The parameters of the complex mapping (ParamMap###) are defined in a file "Param_Mapping.edp" 
//
//  INPUT PARAMETERS (from keyboard or pipe) :
//   	(none)
//	INPUT FILES :
// 		mesh.msh 			->  mesh in Freefem format
//		Param_Mapping.edp	->  file to input including the parameters defining the mapping
//  OUTPUT FILES :
//      Mapping.ff2m         -> file containing the "physical coordinates" and the mapping functions
//
// 	ERROR MANAGEMENT : 
//
//
//  This program is part of the StabFem project ; copyright D. Fabre 2018

// The main (and unique) role of this function is to call the macro SFWriteMapping to create the output file Mapping.ff2m
//  
// Below is a default "minimal" version of this macro.
//
// If you want to customize the macro do not do this here , instead copy it to your StabFem.idp

cout << "$$$$ ENTERING SetMapping.edp " << endl << "$$" << endl; 
include "SF_Geom.edp";
include "StabFem.idp";
include "Param_Mapping.edp";
include "MappingDef_Rectangle.idp";

IFMACRO(!SFWriteMapping)
macro SFWriteMapping(filename,TH)
{
    ofstream file(filename);    
    fespace p1forff2m(TH,P1);    
	p1forff2m xx,yy;
    xx=x;
    yy=y;
   	file << "### Data generated by Freefem++ ; " << endl;
    file << "physical coordinates resulting from mapping (possibly complex...)" << endl;
    file << "datatype MeshMapped " << endl;
    file << "P1c xphys P1c yphys P1c Hx P1c Hy" << endl; 
	for (int j=0;j<xx[].n ; j++) file << real(Xphys(xx[][j],yy[][j],ParamMap)) << endl << imag(Xphys(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Rphys(xx[][j],yy[][j],ParamMap)) << endl << imag(Rphys(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Hx(xx[][j],yy[][j],ParamMap)) << endl << imag(Hx(xx[][j],yy[][j],ParamMap)) << endl;
	for (int j=0;j<xx[].n ; j++) file << real(Hy(xx[][j],yy[][j],ParamMap)) << endl << imag(Hy(xx[][j],yy[][j],ParamMap)) << endl;
}; 
//EOM
ENDIFMACRO

mesh th=readmesh(ffdatadir+"mesh.msh");
cout << "$$ SetMapping.edp :" << endl << "$$ Reading mesh with nv = " << th.nv << endl;
SFWriteMapping(ffdatadir+"mesh_mapping.ff2m",th);

// THAT'S ALL TO BE DONE HERE !
