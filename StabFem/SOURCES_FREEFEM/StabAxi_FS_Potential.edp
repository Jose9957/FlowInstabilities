///
// THIS PROGRAM IS ADAPTED FROM Eigen_Bridge_Potential.edp from LiquidBridges++_V1.3
// imported in STABFEM project by D. Fabre on december 2017.
// STILL TO BE RATIONALIZED A LOT !!!
//
//  Computation of the eigenvalues and eigenvectors for oscillations of a liquid bridge
//  (inviscid theory)
// ----------------------------------------
// the problem is potential : u = grad (phi) 
// PROBLEM : find $\lambda$ and $[phi,eta]$  such that
// 	$$ \Delta \phi = 0 $$ inside the domain
// 	$$ \lambda \phi = - \gamma (-(K0a^2+K0b^2) \eta - \partial^2 \eta / \partial s^2 + m^2/r^2 \eta $$ on the free surface
// 	$$ \lambda \eta = grad \phi \dot n $$ on the free surface 
// 
//-----------------------------------------

include "SF_Geom.edp"; // probably useless
include "StabFem.idp"
include "Macros_Lineic.idp"


////////////////////////////////////////////////////////////////
//
// MAILLAGE ET GEOMETRIE ET ESPACES ELEMENTS FINIS
//
////////////////////////////////////////////////////////////////


mesh th=readmesh(ffdatadir+"mesh.msh");
int[int] lab = [7];
meshL thlin = extract(th,refedge = lab);

fespace Vh(th,P2);
//fespace VhxVh(th,[P1,P1]);
fespace Vhlin(thlin,P1);

Vhlin xsurf,ysurf,alphasurf,S0,N0x,N0y,K0a,K0b;
CalcGeomLin(thlin,xsurf,ysurf,alphasurf,S0,N0x,N0y,K0a,K0b,th,7)



////////////////////////////////////////////////////////////////
//
// PARAMETRES
//
////////////////////////////////////////////////////////////////


// constantes physiques 
real gamma; // tension de surface
real R; // echelle de longueur (rayon pour un pont liquide)
real dpdz; // parametre de gravite
real GAMMA; // circulation pour cas polygones tournants
real nu; // viscosity FOR VISCOUS POTENTIAL CASE 
real alphaMILES; // parametre alpha pour dissipation a la linge triple (Miles, Hocking)
string typestart; // possibilites : "pined", "axis", "plane", "freeH", "freeV"
string typeend;    // possibilites : "pined", "axis", "plane", "freeH, "freeV"

real L, PP0, Vol, Area;

// HERE THERE ARE TWO METHODS TO SPECIFY THE PHYSICAL PARAMETERS

try
{
ifstream file(ffdatadir+"BaseFlow.txt"); // here this is not a base flow but the parameters
file >> gamma >> dpdz >> GAMMA;
cout << "$$$ successfully read BF file containing physical parameters " << endl;
cout << "$$$ Surface tension gamma = " << gamma<< endl;
cout << "$$$ gravity rho g = " << dpdz<< endl;
cout << "$$$ circulation Gamma/(2 pi) = " << GAMMA << endl; 
}
catch(...)
{ cout << "WARNING : DID NOT FIND A FILE BaseFlow.txt. " << endl 
       << " Make sure to provide physical parameters as optional arguments (-gamma gamma -dpdz dpdz -GAMMA GAMMA)" <<  endl;
       gamma = 1; dpdz = 1; GAMMA = 0; /* new default values */
};
cout << "%% TENSION DE SURFACE gamma : ";
gamma =  getARGV("-gamma",gamma);
cout << gamma << endl;
cout << "%% PARAMETRE DE GRAVITE dp/dz = rho g : ";
dpdz = getARGV("-dpdz",dpdz);
cout << dpdz << endl;
cout << "%% CIRCULATION GAMMA : ";
GAMMA= getARGV("-GAMMA",GAMMA);
cout << GAMMA << endl;    

cout << "%% VISCOSITE NU (pour approximation ecoulement visqueux potentiel) : " ;
nu=getARGV("-nu",1e-12);
cout << nu << endl;

cout << "%% PARAMETRE alpha de dissipation a la ligne triple (modele lineaire de MILES & HOCKING)  " ;
alphaMILES = getARGV("-alphaMILES",0);
cout << alphaMILES << endl;

// Parametres du calcul
int m;  // Nombre d'onde

cout << "%% typestart (pined, axis, plane, freeH, freeV) : ";
typestart = getARGV("-typestart","pined");
cout << typestart << endl;

cout << "%% typeend (pined, axis, plane) : ";
typeend = getARGV("-typeend","pined");
cout << typeend << endl;

cout << "%% Nombre d'onde m ?";
m = getARGV("-m",1);
cout << m << endl;

int nev;
cout << "%% Nombre de modes a calculer : " ;
nev = getARGV("-nev",10);
cout << nev << endl;
int Nval = nev;  // nb. de valeurs propres à calculer

complex shift;
real shiftr, shifti;
cout << "%% Shift (real and imaginary part) : " ;
shiftr = getARGV("-shift_r",0.);
shifti = getARGV("-shift_i",0.);
shift = shiftr+1i*shifti;
cout << shift << endl << endl;




////////////////////////////////////////////////////
//
// MACROS AND CURVATURE
//  
/////////////////////////////////////////////////////


macro Ds(a) (Tl.x*dx(a)+Tl.y*dy(a)) //EOM
macro DPDR(r) (GAMMA)^2*(1/r^3) //EOM THIS MACRO IS FOR ROTATING POLYGONS

//macro StartPoint() ((S0<S0[](thlin.nv-1)/2)?1:0) //EOM
//macro EndPoint() ((S0>S0[](thlin.nv-1)/2)?1:0) //EOM
macro StartPoint() (abs((x-xsurf[](0))^2+(y-ysurf[](0))^2)<abs((x-xsurf[](thlin.nv-1))^2+(y-ysurf[](thlin.nv-1))^2)) //EOP
macro EndPoint() (abs((x-xsurf[](0))^2+(y-ysurf[](0))^2)>abs((x-xsurf[](thlin.nv-1))^2+(y-ysurf[](thlin.nv-1))^2)) //EOM



////////////////////////////////////////////////////
//
// CONSTRUCTION DES MATRICES
//  
/////////////////////////////////////////////////////

Vh<complex> phiB,phiA,vA,vB;
Vhlin<complex> etaB,qB,etaA,qA; // will be used for"block" method 
int isshift = 1;  // NB THIS IS BECAUSE THE MACRO EXPECTS OP = A-shift B



matrix<complex> A,B;


// Nouvelle methode par blocs
varf avphi(phiA,vA)=	  
	  int2d(th)(  (dx(phiA)*dx(vA) + dy(phiA)*dy(vA)+(m^2+1e-8)*phiA*vA/(x^2+1e-30))*x ) 
	+ int1d(th,1)(abs(m)*phiA*vA*1e30) // axis
;

varf aqeta(etaA,qA)=
	int1d(thlin)(-gamma*((Ds(etaA))*(Ds(qA))-(K0a^2+K0b^2)*etaA*qA+m^2/(x^2+1e-30)*qA*etaA)*x)
	-int1d(thlin)(qA*etaA*(-dpdz*Tl.x-DPDR(x)*Tl.y)*x)
	+ int0d(thlin)(1e30*etaA*qA*abs(x)*(gamma!=0)*StartPoint*(typestart=="pined")) // Dirichlet if Pined
    + int0d(thlin)(1e30*etaA*qA*abs(x)*(gamma!=0)*EndPoint*(typeend=="pined")) // Dirichlet if Pined
    + int0d(thlin)(StartPoint*(typestart=="freeV")*gamma*(-N0x/N0y)*K0a*x*etaA*qA) // Robin cond.
    + int0d(thlin)(StartPoint*(typestart=="freeH")*gamma*(N0y/N0x)*K0a*x*etaA*qA) // Robin cond.
    + int0d(thlin)(1e30*etaA*qA*StartPoint*(typestart=="axis")*(m!=0)) // axis
    + int0d(thlin)(1e30*etaA*qA*EndPoint*(typeend=="axis")*(m!=0)) // axis

//	+ int1d(th,5,55)(1e30*etaA*qA*abs(x)*(gamma!=0)*((typestart=="pined")||(typeend=="pined"))) //OLD SYNTAX
//	(typestart=="freeV")
//	{Aqeta(IndexPointSurf(0),IndexPointSurf(0)) += gamma*(tan(alphaPointSurf(0)))*K0aPointSurf(0)*xPointSurf(0);};
//if(typestart=="freeH")
//	{Aqeta(IndexPointSurf(0),IndexPointSurf(0)) += gamma*(1/tan(alphaPointSurf(0)))*K0aPointSurf(0)*xPointSurf(0);};
;

varf aveta(etaA,vA)=
	- int1d(thlin)(isshift*shift*(etaA*vA)*x)
	+ int1d(thlin)(-1i*m*GAMMA/(2*pi*x^2)*(etaA*vA)*x)
;

varf aqphi(qA,phiA)= /* Warning : should be qphi(phiA,qA) but swap function/test to build transpose of matrix */
	- int1d(thlin)(isshift*conj(shift)*(qA*phiA)*x) // nb should take conjugate
 	+ int1d(thlin)(-conj(1i*m)*GAMMA/(2*pi*x^2)*(qA*phiA)*x) // nb should take conjugate
 ;

cout << "...Blocks for A : OK " << endl;

matrix<complex> Avphi = avphi(Vh,Vh,solver=sparsesolver);
matrix<complex> Aqphi = aqphi(Vhlin,Vh,solver=sparsesolver);
Aqphi = Aqphi';
matrix<complex> Aqeta = aqeta(Vhlin,Vhlin,solver=sparsesolver); 
matrix<complex> Aveta = aveta(Vhlin,Vh,solver=sparsesolver); 

cout << "...M-Blocks for A : OK " << endl;

//
// Modify the coefficient of the first point along the surface for "natural conditions"
//if(typestart=="freeV")
//	{Aqeta(IndexPointSurf(0),IndexPointSurf(0)) += gamma*(tan(alphaPointSurf(0)))*K0aPointSurf(0)*xPointSurf(0);};
//if(typestart=="freeH")
//	{Aqeta(IndexPointSurf(0),IndexPointSurf(0)) += gamma*(1/tan(alphaPointSurf(0)))*K0aPointSurf(0)*xPointSurf(0);};

A = [
	[Aqphi,Aqeta],
	[Avphi,Aveta]
	];
	
set(A,solver =sparsesolver);

cout << "...Matrix A Completed..." << endl;

// Construction de la matrice B
varf bqphi(qB,phiB) = /* Warning : should be bqphi(phiA,qA) but swap function/test to build transpose of matrix */
       int1d(thlin)(qB*phiB*x);

varf bveta(etaB,vB) = 
        int1d(thlin)(etaB*vB*x);
        
varf bqeta(etaB,qB) = int1d(thlin)(0*etaB*qB);        
        
matrix<complex> Bqphi = bqphi(Vhlin,Vh,solver=GMRES,eps=1e-20); 
Bqphi = Bqphi';

matrix<complex> Bveta = bveta(Vhlin,Vh,solver=GMRES,eps=1e-20); 
matrix<complex> Bqeta = bqeta(Vhlin,Vhlin,solver=GMRES,eps=1e-20); 

// Modify the coefficient of the first point along the surface for Miles & Hocking term
//if(typestart=="freeH")
//	{Bqeta(IndexPointSurf(0),IndexPointSurf(0)) += gamma*alphaMILES/sin(alphaPointSurf(0))*xPointSurf(0);};
//if(typestart=="freeV")
//    {Bqeta(IndexPointSurf(0),IndexPointSurf(0)) += gamma*alphaMILES/(-cos(alphaPointSurf(0)))*xPointSurf(0);};

B = [	
	[Bqphi,Bqeta],
	[0,Bveta]
	];

cout << "...Matrix B Completed..." << endl;


set(B,solver =GMRES);


////////////////////////////////////////////////////
//
//  RESOLUTION DU PB AUX VALEURS PROPRES
//  
/////////////////////////////////////////////////////

int k;
complex[int] ev(nev); // to store nev eigein values
complex[int,int] EigenVEC(A.n,nev);

cout << "Dimensions A, B : "<<  A.m << " x " << A.n << " and  " <<  B.m << " x " << B.n << endl; 

SFEVSOLVE(k,nev,A,B,shift,ev,EigenVEC);

int Nmodes = min(k,nev); // nb. de vecteurs propres à post-traiter



////////////////////////////////////////////////////
//
//    POST TRAITEMENT
//
///////////////////////////////////////////////////

IFMACRO(!SFWriteModePotential)	
macro SFWriteModePotential(namefile,MODE,ev)
  {	
   	fespace P1forfile(th,P1);
    P1forfile<complex> urforfile,uzforfile,utforfile;
    urforfile = dx(MODE#phi);
    uzforfile = dy(MODE#phi);
    utforfile = 1i*m*MODE#phi;
    fespace P1linforfile(thlin,P1);
    P1linforfile<complex> Etaforfile;
    Etaforfile = MODE#eta;
   	{
	ofstream file(namefile);
	file << "### Data generated by Freefem++ ; " << endl;
    file << "Eigenmode of a free-surface problem (INVISCID, POTENTIAL)" << endl;
    file << "datatype Eigenmode datastoragemode CxP2.0 datadescriptors phi" << endl;	
	file << "complex* lambda int* m  P1c ur P1c uz P1c ut  P1surfc eta " << endl;
	file << real(ev) <<  endl << imag(ev) << endl << m << endl << endl; 
	for(int j=0; j<urforfile[].n ; j++) file << real(urforfile[][j]) << endl << imag(urforfile[][j]) << endl;	
	for(int j=0; j<urforfile[].n ; j++) file << real(uzforfile[][j]) << endl << imag(uzforfile[][j]) << endl;	
	for(int j=0; j<urforfile[].n ; j++) file << real(utforfile[][j]) << endl << imag(utforfile[][j]) << endl;		
	file << endl;
	for(int j=0;j<Etaforfile[].n ; j++) file << real(Etaforfile[][j]) << endl << imag(Etaforfile[][j]) << endl; 
	file << endl;
   };
  }
//EOM	
ENDIFMACRO


cout << " ### VP Calculees :" << endl;

//real[int]  eev(Nval);
ofstream EV(ffdatadir+"Spectrum.txt");
EV.scientific;

Vh<complex> Modecphi;
Vhlin<complex> Modeceta;
//VhxVh<complex> [Modecphi,Modeceta];
//Vh<complex> Modebphi,Modebeta;
complex lambda;


for (int i=0;i<Nval;i++)
{
cout << ev[i] << endl;
};


for (int i=0;i<Nval;i++)
{
lambda = ev[i];
complex[int] EVVV(A.n);
	//EVVV = eVphi[i][]; 
	[Modecphi[],Modeceta[]] = EigenVEC(:,i);

// Normalisation of the modes
        complex norm;
        {
        Vh<complex> etaTEMP=Modeceta;
        real[int] Xx = etaTEMP[].re;
        real[int] Yy = etaTEMP[].im;
        real[int] etaRAD  = Xx.*Xx;
               etaRAD += Yy.*Yy;
        etaRAD = sqrt(etaRAD);
        int Imax = etaRAD.imax;
        norm =  etaTEMP[][Imax];
       if(norm ==0){ cout << "WARNING  : dected norm = 0 !" << endl; norm =1;};
        }
		Modecphi = Modecphi/norm;
        Modeceta = Modeceta/norm;
{
  cout << " VP numero " <<  i<< " : " << real(lambda) << "+i"<<imag(lambda) <<  endl;
  EV << real(lambda) << " " << imag(lambda) << " " << L << "  " << PP0  << " " << Vol << "  " << dpdz << "   " << m  <<  endl;
}; 
  
    
// Post-traitement MODES

if (i<Nmodes)
   {	
   	{
   	ofstream FileTXT(ffdatadir+"Eigenmode"+(i+1)+".txt");
   	FileTXT << Modecphi[];
   	FileTXT << endl << endl << lambda << endl;
   	}
   SFWriteModePotential(ffdatadir+"Eigenmode"+(i+1)+".ff2m",Modec,lambda);    	
   };
}	
	if(nev==1){ 
		exec("cp "+ffdatadir+"Eigenmode0.txt "+ffdatadir+"Eigenmode.txt");
		exec("cp "+ffdatadir+"Eigenmode0.ff2m "+ffdatadir+"Eigenmode.ff2m");
		};

cout << " ### StabAxi_FreeSurface_Potential.edp correctly ended." << endl;

